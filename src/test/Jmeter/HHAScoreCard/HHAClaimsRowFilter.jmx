<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="4.0" jmeter="4.0 r1823414">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
        <stringProp name="dataSource">MySQLQA</stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="checkQuery">Select 1</stringProp>
        <stringProp name="dbUrl">jdbc:mysql://rds-qa.remedypartners.com:3306/warehouse</stringProp>
        <stringProp name="driver">com.mysql.jdbc.Driver</stringProp>
        <stringProp name="username">salam</stringProp>
        <stringProp name="password">1Welcome2</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="HHA Scorecard DashBoard" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1511452775000</longProp>
        <longProp name="ThreadGroup.end_time">1511452775000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
        <hashTree>
          <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="OS Process Sampler" enabled="false">
            <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
            <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
            <stringProp name="SystemSampler.command">cmd.exe</stringProp>
            <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="Argument">
                  <stringProp name="Argument.name"></stringProp>
                  <stringProp name="Argument.value">-c</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="" elementType="Argument">
                  <stringProp name="Argument.name"></stringProp>
                  <stringProp name="Argument.value">echo &quot;ECEpiosdeCount,claimsEpiosdeCount,savingRate,TotalNPRA, TotalProgram&quot; &gt;&gt; PerformanceDashboardResult.txt</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="SystemSampler.directory">C:\Users\sandeep.singh\Desktop\Tableautestpaln</stringProp>
          </SystemSampler>
          <hashTree/>
        </hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="NumberOfEppisode" enabled="true">
          <stringProp name="filename">RowFilterInput.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">Flag,userName,postacuteccn,bundle,region,market,r_region,r_market,participantName,bpid,anchorFacility,ccn</stringProp>
          <stringProp name="delimiter">|</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">if(!vars.get(&quot;postacuteccn&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;EC_POSTCCN&quot;,&quot;AND pac.bpid in ${postacuteccn}&quot;);
	vars.put(&quot;C_POSTCCN&quot;,&quot;AND pac.bpid in ${postacuteccn}&quot;);	
} else {
	vars.put(&quot;EC_POSTCCN&quot;,&quot;&quot;);
	vars.put(&quot;C_POSTCCN&quot;,&quot;&quot;);	
}

if(!vars.get(&quot;bundle&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;EC_BUNDLE&quot;,&quot;AND drg.bundleName in ${bundle}&quot;);	
	vars.put(&quot;C_BUNDLE&quot;,&quot;AND drg.bundleName in ${bundle}&quot;);
} else{
	vars.put(&quot;EC_BUNDLE&quot;,&quot;&quot;);
	vars.put(&quot;C_BUNDLE&quot;,&quot;&quot;);
}

if(!vars.get(&quot;r_region&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;EC_R_REGION&quot;,&quot;AND rm.region in  ${r_region}&quot;);
	vars.put(&quot;C_R_REGION&quot;,&quot;AND rm.region in  ${r_region}&quot;);	
} else {
	vars.put(&quot;EC_R_REGION&quot;,&quot;&quot;);
	vars.put(&quot;C_R_REGION&quot;,&quot;&quot;);
}
if(!vars.get(&quot;r_market&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;EC_R_MARKET&quot;,&quot;AND rm.market in ${r_market}&quot;);
	vars.put(&quot;C_R_MARKET&quot;,&quot;AND rm.market in ${r_market}&quot;);		
} else{
	vars.put(&quot;EC_R_MARKET&quot;,&quot;&quot;);
	vars.put(&quot;C_R_MARKET&quot;,&quot;&quot;);
}
if(!vars.get(&quot;region&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;EC_REGION&quot;,&quot;AND prm.region in  ${region}&quot;);
	vars.put(&quot;C_REGION&quot;,&quot;AND prm.region in  ${region}&quot;);		
} else {
	vars.put(&quot;EC_REGION&quot;,&quot;&quot;);
	vars.put(&quot;C_REGION&quot;,&quot;&quot;);
}
if(!vars.get(&quot;market&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;EC_MARKET&quot;,&quot;AND prm.market in ${market}&quot;);	
	vars.put(&quot;C_MARKET&quot;,&quot;AND prm.market in ${market}&quot;);
} else{
	vars.put(&quot;EC_MARKET&quot;,&quot;&quot;);
	vars.put(&quot;C_MARKET&quot;,&quot;&quot;);
}


if(!vars.get(&quot;participantName&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;EC_PARTICIPANTNAME&quot;,&quot;AND ei.participantName in ${participantName}&quot;);
	vars.put(&quot;C_PARTICIPANTNAME&quot;,&quot;AND e.participantNameInitCap in ${participantName}&quot;);	
} else{
	vars.put(&quot;EC_PARTICIPANTNAME&quot;,&quot;&quot;);
	vars.put(&quot;C_PARTICIPANTNAME&quot;,&quot;&quot;);
}

if(!vars.get(&quot;participantName&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;ECA_PARTICIPANTNAME&quot;,&quot;AND ei.participantNameInitCap in ${participantName}&quot;);
	vars.put(&quot;CA_PARTICIPANTNAME&quot;,&quot;AND e.participantNameInitCap in ${participantName}&quot;);	
} else{
	vars.put(&quot;ECA_PARTICIPANTNAME&quot;,&quot;&quot;);
	vars.put(&quot;CA_PARTICIPANTNAME&quot;,&quot;&quot;);
}


if(!vars.get(&quot;bpid&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;EC_BPID&quot;,&quot;AND ei.bpid in ${bpid}&quot;);
	vars.put(&quot;C_BPID&quot;,&quot;AND e.bpid in ${bpid}&quot;);	
} else {
	vars.put(&quot;EC_BPID&quot;,&quot;&quot;);
	vars.put(&quot;C_BPID&quot;,&quot;&quot;);
}

if(!vars.get(&quot;ccn&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;EC_CCN&quot;,&quot;AND anc.CCN in ${ccn}&quot;);
	vars.put(&quot;C_CCN&quot;,&quot;AND f.ccn in ${ccn}&quot;);	
} else {
	vars.put(&quot;EC_CCN&quot;,&quot;&quot;);
	vars.put(&quot;C_CCN&quot;,&quot;&quot;);
}

</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="POSTAcuteFacilityCCN" enabled="true">
          <stringProp name="dataSource">MySQLQA</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select distinct concat( `Post Acute Facility`, &apos; - &apos;, `Post Acute CCN`) as Pac_ccn from
( 
-- EC Data
select 
distinct  case when post_acute_df.facilityNameInitCap is null then null else post_acute_df.facilityNameInitCap end as &apos;Post Acute Facility&apos;,
case when post_acute_df.ccn is null then null else post_acute_df.ccn end as &apos;Post Acute CCN&apos;
FROM
warehouse.factPatientEpisode fp
LEFT JOIN  (select f.facilitySK,f.ccn,f.facilityName,
    case when df_claims.facilityNameInitCap is null then f.facilityNameInitCap
    else df_claims.facilityNameInitCap end facilityNameInitCap,
    f.facilityType,f.facilitySubtype,f.address1,f.address2,f.city,f.state,f.zip,f.contactName,f.contactEmail,
    f.contactPhone1,f.contactPhone2,f.contactRole,f.lat,f.lon,f.fips,f.confirmed,f.dataSource,f.description,
    f.excludedFromRiskScore,f.sourceFacilityKey,f.fgroup,f.id,f.isFeatured,f.medicareId,f.mongoId,f.outboundBpciParticipant,
    f.participantId,f.participating,f.bpid,f.careType,f.categorySpecificFields,f.dwhIsActive,f.dwhIsDeleted,f.dwhSource,
    f.dwhVersion,f.dwhStartDate,f.dwhEndDate,f.dwhMD5Checksum
    from warehouse.dimFacility f
    left outer join (select * from warehouse.dimFacility where dwhSource=&apos;Claims&apos;) as df_claims
    on f.ccn = df_claims.ccn and f.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;) 
    ) anc ON fp.anchorAdmitFacilityKey=anc.facilitySK
LEFT JOIN warehouse.dimFacility afdetail ON anc.sourceFacilityKey = afdetail.facilitySK
LEFT JOIN warehouse.dimEpisodeInitiator ei ON fp.episodeInitiatorKey=ei.episodeInitiatorSK
LEFT JOIN (select f.facilitySK,f.ccn,f.facilityName,
    case when df_claims.facilityNameInitCap is null then f.facilityNameInitCap
    else df_claims.facilityNameInitCap end facilityNameInitCap,
    f.facilityType,f.facilitySubtype,f.address1,f.address2,f.city,f.state,f.zip,f.contactName,f.contactEmail,
    f.contactPhone1,f.contactPhone2,f.contactRole,f.lat,f.lon,f.fips,f.confirmed,f.dataSource,f.description,
    f.excludedFromRiskScore,f.sourceFacilityKey,f.fgroup,f.id,f.isFeatured,f.medicareId,f.mongoId,f.outboundBpciParticipant,
    f.participantId,f.participating,f.bpid,f.careType,f.categorySpecificFields,f.dwhIsActive,f.dwhIsDeleted,f.dwhSource,
    f.dwhVersion,f.dwhStartDate,f.dwhEndDate,f.dwhMD5Checksum
    from warehouse.dimFacility f
    left outer join (select * from warehouse.dimFacility where dwhSource=&apos;Claims&apos;) as df_claims
    on f.ccn = df_claims.ccn and f.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;) 
    ) post_acute_df ON fp.anchorDischargeFacilityKey=post_acute_df.facilitySK
LEFT JOIN warehouse.dimCARL c ON fp.carlKey=c.carlSK
LEFT JOIN warehouse.dimPhysician p on fp.physicianKey=p.physicianSK
LEFT JOIN warehouse.dimRegionMarket rm ON fp.rgRemKey = rm.rgSK
 LEFT JOIN warehouse.dimRegionMarket rmp ON fp.rgPartnerKey = rmp.rgSK
LEFT JOIN warehouse.dimDRG drg on fp.currDrgKey = drg.drgSK
left join warehouse.ref_operational_targets ot on ei.bpid=ot.BPID and anc.ccn=ot.CCN and drg.bundleShortName=ot.Clinical_Episode
LEFT JOIN warehouse.dimDate dt ON fp.anchorAdmitDateKey = dt.dateSK
LEFT JOIN warehouse.dimPatient pat ON fp.patientKey=pat.patientSK
LEFT JOIN warehouse.dimFacility readmitsrcccn ON fp.readmitfacilityKey1 = readmitsrcccn.facilitySK
LEFT JOIN warehouse.dimDRG readmitDRG ON fp.readmissionDrgKey1=readmitDRG.drgSK
LEFT JOIN (
select distinct provider_ccn ,quality_of_patient_care_star_rating,number_of_completed_surveys, max(file_date) from warehouse.ops_hha_home_health_compare group by provider_ccn)hhc on post_acute_df.CCN =hhc.provider_ccn
INNER JOIN 
    (
 SELECT tabUserSecurityBPID.bpid, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityBPID where username = ${userName}
       GROUP BY bpid
       )tbsBPID ON fp.BPID = tbsBPID.bpid
INNER JOIN 
     (       
        SELECT tabUserSecurityCCN.ccn, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityCCN where username = ${userName}
       GROUP BY ccn
        )tbsCCN on anc.ccn=tbsCCN.ccn
INNER JOIN 
     (       
        SELECT tabUserSecurityFacilityKey.facilitykey, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityFacilityKey where username = ${userName}
       GROUP BY facilitykey
        )tbsFacilityKey on fp.sourceFacilityKey=tbsFacilityKey.facilitykey
WHERE fp.NSOCType=&apos;HHA&apos;
and fp.bundleRisk=1 and fp.episodeCountReport=1
and anc.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;) and post_acute_df.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;)
and afdetail.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;) 
and ei.bpid not like &apos;%DEMO%&apos;
and  fp.anchorAdmitDateKey &gt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;) 
and fp.anchorAdmitDateKey &lt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;BPCIAStartDate&apos;)
-- and fp.anchorAdmitDateKey &gt;= &apos;&apos;
          ${EC_BUNDLE} 
		${EC_R_REGION} 
		${EC_R_MARKET} 
		${EC_REGION} 
		${EC_MARKET} 
		${EC_PARTICIPANTNAME}  
		${EC_BPID} 
		${EC_CCN} 

union

-- Claims Data 
select 
distinct  case when pac.facilityNameInitCap is null then null else pac.facilityNameInitCap end AS &apos;Post Acute Facility&apos;,
 case when pac.ccn is null then null else pac.ccn end AS &apos;Post Acute CCN&apos;
FROM warehouse.factClaims c
LEFT JOIN warehouse.dimFacility f ON c.anchorFacilityKey = f.facilitySK
LEFT JOIN warehouse.dimEpisodeInitiator e ON c.episodeInitiatorKey = e.episodeInitiatorSK
LEFT JOIN warehouse.dimFacility pac ON c.postAcuteFacilityKey = pac.facilitySK
LEFT JOIN warehouse.dimFacility ssoc ON c.SSOC_CCN_key = ssoc.facilitySK
LEFT JOIN warehouse.dimDRG drg ON c.anchorDrgKey = drg.drgSK
LEFT JOIN warehouse.dimSNFNetwork snf ON c.SNFNetworkKey = snf.SNFNeworkSK
LEFT JOIN warehouse.dimPhysician p ON c.physicianKey = p.physicianSK
LEFT JOIN warehouse.dimRegionMarket rm ON c.rgRemKey = rm.rgSK
LEFT JOIN warehouse.dimRegionMarket rmp ON c.rgPartnerKey = rmp.rgSK
left join warehouse.ref_operational_targets ot on e.bpid=ot.BPID and f.ccn=ot.CCN and drg.bundleShortName=ot.Clinical_Episode
LEFT JOIN warehouse.dimDate dt ON c.anchorBeginDateKey = dt.dateSK
LEFT JOIN warehouse.dimPatient pat ON c.patientKey=pat.patientSK
LEFT JOIN warehouse.dimFacility readmitsrcccn ON c.readmission_source_ccn_1_Key = readmitsrcccn.facilitySK
LEFT JOIN warehouse.dimDRG readmitDRG ON c.readmissionDrgKey1=readmitDRG.drgSK
LEFT JOIN (
select distinct provider_ccn ,quality_of_patient_care_star_rating,number_of_completed_surveys, max(file_date) from warehouse.ops_hha_home_health_compare
 group by provider_ccn)hhc
 on pac.CCN =hhc.provider_ccn
 INNER JOIN 
    (
 SELECT tabUserSecurityBPID.bpid, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityBPID where username = ${userName}
       GROUP BY bpid
       )tbsBPID ON e.BPID = tbsBPID.bpid
INNER JOIN 
     (       
        SELECT tabUserSecurityCCN.ccn, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityCCN where username = ${userName}
       GROUP BY ccn
        )tbsCCN on f.ccn=tbsCCN.ccn
 WHERE  c.postAcuteCategory=&apos;HHA&apos;
 and f.dwhSource in (&apos;Claims&apos;, &apos;ZeroKey&apos;,&apos;emblemClaims&apos;) 
 and pac.dwhSource in (&apos;Claims&apos;, &apos;ZeroKey&apos;,&apos;emblemClaims&apos;)
 and e.bpid  not like &apos;%DEMO%&apos; 
  and c.targetPrice &lt;&gt; 0
  and c.atRisk=&apos;Y&apos;  
and c.anchorBeginDateKey &gt;= &apos;20160101&apos; /*change back to 2016*/
and c.anchorBeginDateKey &lt;= (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;)
 	             
				${C_BUNDLE} 
				${C_R_REGION} 
				${C_R_MARKET} 
				${C_REGION} 
				${C_MARKET} 
				${C_PARTICIPANTNAME} 
				${C_BPID} 
		          ${C_CCN} 
 
			)a  order by concat( `Post Acute Facility`, &apos; - &apos;, `Post Acute CCN`); -- Pass</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">POST_CCN</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Bundle" enabled="true">
          <stringProp name="dataSource">MySQLQA</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select distinct a.Bundle  from
( 
-- EC Data
select 
distinct drg.bundleName as Bundle
FROM
warehouse.factPatientEpisode fp
LEFT JOIN  (select f.facilitySK,f.ccn,f.facilityName,
    case when df_claims.facilityNameInitCap is null then f.facilityNameInitCap
    else df_claims.facilityNameInitCap end facilityNameInitCap,
    f.facilityType,f.facilitySubtype,f.address1,f.address2,f.city,f.state,f.zip,f.contactName,f.contactEmail,
    f.contactPhone1,f.contactPhone2,f.contactRole,f.lat,f.lon,f.fips,f.confirmed,f.dataSource,f.description,
    f.excludedFromRiskScore,f.sourceFacilityKey,f.fgroup,f.id,f.isFeatured,f.medicareId,f.mongoId,f.outboundBpciParticipant,
    f.participantId,f.participating,f.bpid,f.careType,f.categorySpecificFields,f.dwhIsActive,f.dwhIsDeleted,f.dwhSource,
    f.dwhVersion,f.dwhStartDate,f.dwhEndDate,f.dwhMD5Checksum
    from warehouse.dimFacility f
    left outer join (select * from warehouse.dimFacility where dwhSource=&apos;Claims&apos;) as df_claims
    on f.ccn = df_claims.ccn and f.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;) 
    ) anc ON fp.anchorAdmitFacilityKey=anc.facilitySK
LEFT JOIN warehouse.dimFacility afdetail ON anc.sourceFacilityKey = afdetail.facilitySK
LEFT JOIN warehouse.dimEpisodeInitiator ei ON fp.episodeInitiatorKey=ei.episodeInitiatorSK
LEFT JOIN (select f.facilitySK,f.ccn,f.facilityName,
    case when df_claims.facilityNameInitCap is null then f.facilityNameInitCap
    else df_claims.facilityNameInitCap end facilityNameInitCap,
    f.facilityType,f.facilitySubtype,f.address1,f.address2,f.city,f.state,f.zip,f.contactName,f.contactEmail,
    f.contactPhone1,f.contactPhone2,f.contactRole,f.lat,f.lon,f.fips,f.confirmed,f.dataSource,f.description,
    f.excludedFromRiskScore,f.sourceFacilityKey,f.fgroup,f.id,f.isFeatured,f.medicareId,f.mongoId,f.outboundBpciParticipant,
    f.participantId,f.participating,f.bpid,f.careType,f.categorySpecificFields,f.dwhIsActive,f.dwhIsDeleted,f.dwhSource,
    f.dwhVersion,f.dwhStartDate,f.dwhEndDate,f.dwhMD5Checksum
    from warehouse.dimFacility f
    left outer join (select * from warehouse.dimFacility where dwhSource=&apos;Claims&apos;) as df_claims
    on f.ccn = df_claims.ccn and f.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;) 
    ) post_acute_df ON fp.anchorDischargeFacilityKey=post_acute_df.facilitySK
LEFT JOIN warehouse.dimCARL c ON fp.carlKey=c.carlSK
LEFT JOIN warehouse.dimPhysician p on fp.physicianKey=p.physicianSK
LEFT JOIN warehouse.dimRegionMarket rm ON fp.rgRemKey = rm.rgSK
 LEFT JOIN warehouse.dimRegionMarket rmp ON fp.rgPartnerKey = rmp.rgSK
LEFT JOIN warehouse.dimDRG drg on fp.currDrgKey = drg.drgSK
left join warehouse.ref_operational_targets ot on ei.bpid=ot.BPID and anc.ccn=ot.CCN and drg.bundleShortName=ot.Clinical_Episode
LEFT JOIN warehouse.dimDate dt ON fp.anchorAdmitDateKey = dt.dateSK
LEFT JOIN warehouse.dimPatient pat ON fp.patientKey=pat.patientSK
LEFT JOIN warehouse.dimFacility readmitsrcccn ON fp.readmitfacilityKey1 = readmitsrcccn.facilitySK
LEFT JOIN warehouse.dimDRG readmitDRG ON fp.readmissionDrgKey1=readmitDRG.drgSK
LEFT JOIN (
select distinct provider_ccn ,quality_of_patient_care_star_rating,number_of_completed_surveys, max(file_date) from warehouse.ops_hha_home_health_compare group by provider_ccn)hhc on post_acute_df.CCN =hhc.provider_ccn
INNER JOIN 
    (
 SELECT tabUserSecurityBPID.bpid, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityBPID where username = ${userName}
       GROUP BY bpid
       )tbsBPID ON fp.BPID = tbsBPID.bpid
INNER JOIN 
     (       
        SELECT tabUserSecurityCCN.ccn, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityCCN where username = ${userName}
       GROUP BY ccn
        )tbsCCN on anc.ccn=tbsCCN.ccn
INNER JOIN 
     (       
        SELECT tabUserSecurityFacilityKey.facilitykey, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityFacilityKey where username = ${userName}
       GROUP BY facilitykey
        )tbsFacilityKey on fp.sourceFacilityKey=tbsFacilityKey.facilitykey
WHERE fp.NSOCType=&apos;HHA&apos;
and fp.bundleRisk=1 and fp.episodeCountReport=1
and anc.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;) and post_acute_df.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;)
and afdetail.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;) 
and ei.bpid not like &apos;%DEMO%&apos;
and  fp.anchorAdmitDateKey &gt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;) 
and fp.anchorAdmitDateKey &lt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;BPCIAStartDate&apos;)
--  and fp.anchorAdmitDateKey &gt;= &apos;&apos;
          
          ${EC_POSTCCN} 
		${EC_R_REGION} 
		${EC_R_MARKET} 
		${EC_REGION} 
		${EC_MARKET} 
		${EC_PARTICIPANTNAME}  
           ${EC_BPID}
           ${EC_CCN}
union
 
-- Claims data
select 
distinct  drg.bundleName AS Bundle
FROM warehouse.factClaims c
LEFT JOIN warehouse.dimFacility f ON c.anchorFacilityKey = f.facilitySK
LEFT JOIN warehouse.dimEpisodeInitiator e ON c.episodeInitiatorKey = e.episodeInitiatorSK
LEFT JOIN warehouse.dimFacility pac ON c.postAcuteFacilityKey = pac.facilitySK
LEFT JOIN warehouse.dimFacility ssoc ON c.SSOC_CCN_key = ssoc.facilitySK
LEFT JOIN warehouse.dimDRG drg ON c.anchorDrgKey = drg.drgSK
LEFT JOIN warehouse.dimSNFNetwork snf ON c.SNFNetworkKey = snf.SNFNeworkSK
LEFT JOIN warehouse.dimPhysician p ON c.physicianKey = p.physicianSK
LEFT JOIN warehouse.dimRegionMarket rm ON c.rgRemKey = rm.rgSK
LEFT JOIN warehouse.dimRegionMarket rmp ON c.rgPartnerKey = rmp.rgSK
left join warehouse.ref_operational_targets ot on e.bpid=ot.BPID and f.ccn=ot.CCN and drg.bundleShortName=ot.Clinical_Episode
LEFT JOIN warehouse.dimDate dt ON c.anchorBeginDateKey = dt.dateSK
LEFT JOIN warehouse.dimPatient pat ON c.patientKey=pat.patientSK
LEFT JOIN warehouse.dimFacility readmitsrcccn ON c.readmission_source_ccn_1_Key = readmitsrcccn.facilitySK
LEFT JOIN warehouse.dimDRG readmitDRG ON c.readmissionDrgKey1=readmitDRG.drgSK
LEFT JOIN (
select distinct provider_ccn ,quality_of_patient_care_star_rating,number_of_completed_surveys, max(file_date) from warehouse.ops_hha_home_health_compare
 group by provider_ccn)hhc
 on pac.CCN =hhc.provider_ccn
 INNER JOIN 
    (
 SELECT tabUserSecurityBPID.bpid, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityBPID where username = ${userName}
       GROUP BY bpid
       )tbsBPID ON e.BPID = tbsBPID.bpid
INNER JOIN 
     (       
        SELECT tabUserSecurityCCN.ccn, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityCCN where username = ${userName}
       GROUP BY ccn
        )tbsCCN on f.ccn=tbsCCN.ccn
 WHERE  c.postAcuteCategory=&apos;HHA&apos;
 and f.dwhSource in (&apos;Claims&apos;, &apos;ZeroKey&apos;,&apos;emblemClaims&apos;) 
 and pac.dwhSource in (&apos;Claims&apos;, &apos;ZeroKey&apos;,&apos;emblemClaims&apos;)
 and e.bpid  not like &apos;%DEMO%&apos; 
  and c.targetPrice &lt;&gt; 0
  and c.atRisk=&apos;Y&apos;  
and c.anchorBeginDateKey &gt;= &apos;20160101&apos; /*change back to 2016*/
and c.anchorBeginDateKey &lt;= (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;)
          ${C_POSTCCN} 
		${C_R_REGION} 
		${C_R_MARKET} 
		${C_REGION} 
		${C_MARKET} 
		${C_PARTICIPANTNAME}  
		${C_BPID}
          ${C_CCN}
)a  order by a.Bundle ;
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">bundleName</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Partner Region Market" enabled="true">
          <stringProp name="dataSource">MySQLQA</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select distinct CONCAT( a.participantShortName, a.region, &apos; &apos;,  a.market ) AS &apos;Partner Region Market&apos; from
( 
-- EC Data
select 
distinct  ei.participantShortName, rmp.region, rmp.market
FROM
warehouse.factPatientEpisode fp
LEFT JOIN  (select f.facilitySK,f.ccn,f.facilityName,
    case when df_claims.facilityNameInitCap is null then f.facilityNameInitCap
    else df_claims.facilityNameInitCap end facilityNameInitCap,
    f.facilityType,f.facilitySubtype,f.address1,f.address2,f.city,f.state,f.zip,f.contactName,f.contactEmail,
    f.contactPhone1,f.contactPhone2,f.contactRole,f.lat,f.lon,f.fips,f.confirmed,f.dataSource,f.description,
    f.excludedFromRiskScore,f.sourceFacilityKey,f.fgroup,f.id,f.isFeatured,f.medicareId,f.mongoId,f.outboundBpciParticipant,
    f.participantId,f.participating,f.bpid,f.careType,f.categorySpecificFields,f.dwhIsActive,f.dwhIsDeleted,f.dwhSource,
    f.dwhVersion,f.dwhStartDate,f.dwhEndDate,f.dwhMD5Checksum
    from warehouse.dimFacility f
    left outer join (select * from warehouse.dimFacility where dwhSource=&apos;Claims&apos;) as df_claims
    on f.ccn = df_claims.ccn and f.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;) 
    ) anc ON fp.anchorAdmitFacilityKey=anc.facilitySK
LEFT JOIN warehouse.dimFacility afdetail ON anc.sourceFacilityKey = afdetail.facilitySK
LEFT JOIN warehouse.dimEpisodeInitiator ei ON fp.episodeInitiatorKey=ei.episodeInitiatorSK
LEFT JOIN (select f.facilitySK,f.ccn,f.facilityName,
    case when df_claims.facilityNameInitCap is null then f.facilityNameInitCap
    else df_claims.facilityNameInitCap end facilityNameInitCap,
    f.facilityType,f.facilitySubtype,f.address1,f.address2,f.city,f.state,f.zip,f.contactName,f.contactEmail,
    f.contactPhone1,f.contactPhone2,f.contactRole,f.lat,f.lon,f.fips,f.confirmed,f.dataSource,f.description,
    f.excludedFromRiskScore,f.sourceFacilityKey,f.fgroup,f.id,f.isFeatured,f.medicareId,f.mongoId,f.outboundBpciParticipant,
    f.participantId,f.participating,f.bpid,f.careType,f.categorySpecificFields,f.dwhIsActive,f.dwhIsDeleted,f.dwhSource,
    f.dwhVersion,f.dwhStartDate,f.dwhEndDate,f.dwhMD5Checksum
    from warehouse.dimFacility f
    left outer join (select * from warehouse.dimFacility where dwhSource=&apos;Claims&apos;) as df_claims
    on f.ccn = df_claims.ccn and f.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;) 
    ) post_acute_df ON fp.anchorDischargeFacilityKey=post_acute_df.facilitySK
LEFT JOIN warehouse.dimCARL c ON fp.carlKey=c.carlSK
LEFT JOIN warehouse.dimPhysician p on fp.physicianKey=p.physicianSK
LEFT JOIN warehouse.dimRegionMarket rm ON fp.rgRemKey = rm.rgSK
 LEFT JOIN warehouse.dimRegionMarket rmp ON fp.rgPartnerKey = rmp.rgSK
LEFT JOIN warehouse.dimDRG drg on fp.currDrgKey = drg.drgSK
left join warehouse.ref_operational_targets ot on ei.bpid=ot.BPID and anc.ccn=ot.CCN and drg.bundleShortName=ot.Clinical_Episode
LEFT JOIN warehouse.dimDate dt ON fp.anchorAdmitDateKey = dt.dateSK
LEFT JOIN warehouse.dimPatient pat ON fp.patientKey=pat.patientSK
LEFT JOIN warehouse.dimFacility readmitsrcccn ON fp.readmitfacilityKey1 = readmitsrcccn.facilitySK
LEFT JOIN warehouse.dimDRG readmitDRG ON fp.readmissionDrgKey1=readmitDRG.drgSK
LEFT JOIN (
select distinct provider_ccn ,quality_of_patient_care_star_rating,number_of_completed_surveys, max(file_date) from warehouse.ops_hha_home_health_compare group by provider_ccn)hhc on post_acute_df.CCN =hhc.provider_ccn
INNER JOIN 
    (
 SELECT tabUserSecurityBPID.bpid, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityBPID where username = ${userName}
       GROUP BY bpid
       )tbsBPID ON fp.BPID = tbsBPID.bpid
INNER JOIN 
     (       
        SELECT tabUserSecurityCCN.ccn, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityCCN where username = ${userName}
       GROUP BY ccn
        )tbsCCN on anc.ccn=tbsCCN.ccn
INNER JOIN 
     (       
        SELECT tabUserSecurityFacilityKey.facilitykey, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityFacilityKey where username = ${userName}
       GROUP BY facilitykey
        )tbsFacilityKey on fp.sourceFacilityKey=tbsFacilityKey.facilitykey
WHERE fp.NSOCType=&apos;HHA&apos;
and fp.bundleRisk=1 and fp.episodeCountReport=1
and anc.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;) and post_acute_df.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;)
and afdetail.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;) 
and ei.bpid not like &apos;%DEMO%&apos;
and  fp.anchorAdmitDateKey &gt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;) 
and fp.anchorAdmitDateKey &lt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;BPCIAStartDate&apos;)
-- and fp.anchorAdmitDateKey &gt;= &apos;&apos;

 and drg.bundleName in (&apos;Acute myocardial infarction&apos;, &apos;Amputation&apos;, &apos;Congestive heart failure&apos;, &apos;Coronary artery bypass graft&apos;, &apos;Hip &amp; femur procedures except major joint&apos;, &apos;Lower Major joint replacement&apos;, &apos;Medical non-infectious orthopedic&apos;, &apos;Medical peripheral vascular disorders&apos;, &apos;Nutritional and metabolic disorders&apos;, &apos;Other knee procedures&apos;, &apos;Percutaneous coronary intervention&apos;, &apos;Revision of the hip or knee&apos;, &apos;Simple pneumonia and respiratory infections&apos;, &apos;Transient ischemia&apos;, &apos;Urinary tract infection&apos;) 
		 
		 
		 ${EC_POSTCCN} 
          ${EC_BUNDLE} 
		${EC_R_REGION} 
		${EC_R_MARKET} 
		${EC_PARTICIPANTNAME}  
          ${EC_BPID}
          ${EC_CCN}

union

-- Claims data
select 
distinct  e.participantShortName, rmp.region, rmp.market
FROM warehouse.factClaims c
LEFT JOIN warehouse.dimFacility f ON c.anchorFacilityKey = f.facilitySK
LEFT JOIN warehouse.dimEpisodeInitiator e ON c.episodeInitiatorKey = e.episodeInitiatorSK
LEFT JOIN warehouse.dimFacility pac ON c.postAcuteFacilityKey = pac.facilitySK
LEFT JOIN warehouse.dimFacility ssoc ON c.SSOC_CCN_key = ssoc.facilitySK
LEFT JOIN warehouse.dimDRG drg ON c.anchorDrgKey = drg.drgSK
LEFT JOIN warehouse.dimSNFNetwork snf ON c.SNFNetworkKey = snf.SNFNeworkSK
LEFT JOIN warehouse.dimPhysician p ON c.physicianKey = p.physicianSK
LEFT JOIN warehouse.dimRegionMarket rm ON c.rgRemKey = rm.rgSK
LEFT JOIN warehouse.dimRegionMarket rmp ON c.rgPartnerKey = rmp.rgSK
left join warehouse.ref_operational_targets ot on e.bpid=ot.BPID and f.ccn=ot.CCN and drg.bundleShortName=ot.Clinical_Episode
LEFT JOIN warehouse.dimDate dt ON c.anchorBeginDateKey = dt.dateSK
LEFT JOIN warehouse.dimPatient pat ON c.patientKey=pat.patientSK
LEFT JOIN warehouse.dimFacility readmitsrcccn ON c.readmission_source_ccn_1_Key = readmitsrcccn.facilitySK
LEFT JOIN warehouse.dimDRG readmitDRG ON c.readmissionDrgKey1=readmitDRG.drgSK
LEFT JOIN (
select distinct provider_ccn ,quality_of_patient_care_star_rating,number_of_completed_surveys, max(file_date) from warehouse.ops_hha_home_health_compare
 group by provider_ccn)hhc
 on pac.CCN =hhc.provider_ccn
 INNER JOIN 
    (
 SELECT tabUserSecurityBPID.bpid, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityBPID where username = ${userName}
       GROUP BY bpid
       )tbsBPID ON e.BPID = tbsBPID.bpid
INNER JOIN 
     (       
        SELECT tabUserSecurityCCN.ccn, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityCCN where username = ${userName}
       GROUP BY ccn
        )tbsCCN on f.ccn=tbsCCN.ccn
 WHERE  c.postAcuteCategory=&apos;HHA&apos;
 and f.dwhSource in (&apos;Claims&apos;, &apos;ZeroKey&apos;,&apos;emblemClaims&apos;) 
 and pac.dwhSource in (&apos;Claims&apos;, &apos;ZeroKey&apos;,&apos;emblemClaims&apos;)
 and e.bpid  not like &apos;%DEMO%&apos; 
  and c.targetPrice &lt;&gt; 0
  and c.atRisk=&apos;Y&apos;  
and c.anchorBeginDateKey &gt;= &apos;20160101&apos; /*change back to 2016*/
and c.anchorBeginDateKey &lt;= (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;)
 and drg.bundleName in (&apos;Acute myocardial infarction&apos;, &apos;Amputation&apos;, &apos;Congestive heart failure&apos;, &apos;Coronary artery bypass graft&apos;, &apos;Hip &amp; femur procedures except major joint&apos;, &apos;Lower Major joint replacement&apos;, &apos;Medical non-infectious orthopedic&apos;, &apos;Medical peripheral vascular disorders&apos;, &apos;Nutritional and metabolic disorders&apos;, &apos;Other knee procedures&apos;, &apos;Percutaneous coronary intervention&apos;, &apos;Revision of the hip or knee&apos;, &apos;Simple pneumonia and respiratory infections&apos;, &apos;Transient ischemia&apos;, &apos;Urinary tract infection&apos;) 
		 
		  ${C_POSTCCN} 
          ${C_BUNDLE} 
		${C_R_REGION} 
		${C_R_MARKET} 
		${C_PARTICIPANTNAME}  
          ${C_BPID}
          ${C_CCN}
		
)a
 
  order by CONCAT( a.participantShortName, a.region, &apos; &apos;,  a.market ); -- Pass</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PartnerRegionMarket</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Remedy Region Market " enabled="true">
          <stringProp name="dataSource">MySQLQA</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select distinct CONCAT( &apos;Remedy-&apos;, a.region, &apos; &apos;,  a.market ) AS &apos;Remedy Region Market&apos; from
( 
-- EC Data
select 
distinct  rm.region, rm.market
FROM
warehouse.factPatientEpisode fp
LEFT JOIN  (select f.facilitySK,f.ccn,f.facilityName,
    case when df_claims.facilityNameInitCap is null then f.facilityNameInitCap
    else df_claims.facilityNameInitCap end facilityNameInitCap,
    f.facilityType,f.facilitySubtype,f.address1,f.address2,f.city,f.state,f.zip,f.contactName,f.contactEmail,
    f.contactPhone1,f.contactPhone2,f.contactRole,f.lat,f.lon,f.fips,f.confirmed,f.dataSource,f.description,
    f.excludedFromRiskScore,f.sourceFacilityKey,f.fgroup,f.id,f.isFeatured,f.medicareId,f.mongoId,f.outboundBpciParticipant,
    f.participantId,f.participating,f.bpid,f.careType,f.categorySpecificFields,f.dwhIsActive,f.dwhIsDeleted,f.dwhSource,
    f.dwhVersion,f.dwhStartDate,f.dwhEndDate,f.dwhMD5Checksum
    from warehouse.dimFacility f
    left outer join (select * from warehouse.dimFacility where dwhSource=&apos;Claims&apos;) as df_claims
    on f.ccn = df_claims.ccn and f.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;) 
    ) anc ON fp.anchorAdmitFacilityKey=anc.facilitySK
LEFT JOIN warehouse.dimFacility afdetail ON anc.sourceFacilityKey = afdetail.facilitySK
LEFT JOIN warehouse.dimEpisodeInitiator ei ON fp.episodeInitiatorKey=ei.episodeInitiatorSK
LEFT JOIN (select f.facilitySK,f.ccn,f.facilityName,
    case when df_claims.facilityNameInitCap is null then f.facilityNameInitCap
    else df_claims.facilityNameInitCap end facilityNameInitCap,
    f.facilityType,f.facilitySubtype,f.address1,f.address2,f.city,f.state,f.zip,f.contactName,f.contactEmail,
    f.contactPhone1,f.contactPhone2,f.contactRole,f.lat,f.lon,f.fips,f.confirmed,f.dataSource,f.description,
    f.excludedFromRiskScore,f.sourceFacilityKey,f.fgroup,f.id,f.isFeatured,f.medicareId,f.mongoId,f.outboundBpciParticipant,
    f.participantId,f.participating,f.bpid,f.careType,f.categorySpecificFields,f.dwhIsActive,f.dwhIsDeleted,f.dwhSource,
    f.dwhVersion,f.dwhStartDate,f.dwhEndDate,f.dwhMD5Checksum
    from warehouse.dimFacility f
    left outer join (select * from warehouse.dimFacility where dwhSource=&apos;Claims&apos;) as df_claims
    on f.ccn = df_claims.ccn and f.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;) 
    ) post_acute_df ON fp.anchorDischargeFacilityKey=post_acute_df.facilitySK
LEFT JOIN warehouse.dimCARL c ON fp.carlKey=c.carlSK
LEFT JOIN warehouse.dimPhysician p on fp.physicianKey=p.physicianSK
LEFT JOIN warehouse.dimRegionMarket rm ON fp.rgRemKey = rm.rgSK
 LEFT JOIN warehouse.dimRegionMarket rmp ON fp.rgPartnerKey = rmp.rgSK
LEFT JOIN warehouse.dimDRG drg on fp.currDrgKey = drg.drgSK
left join warehouse.ref_operational_targets ot on ei.bpid=ot.BPID and anc.ccn=ot.CCN and drg.bundleShortName=ot.Clinical_Episode
LEFT JOIN warehouse.dimDate dt ON fp.anchorAdmitDateKey = dt.dateSK
LEFT JOIN warehouse.dimPatient pat ON fp.patientKey=pat.patientSK
LEFT JOIN warehouse.dimFacility readmitsrcccn ON fp.readmitfacilityKey1 = readmitsrcccn.facilitySK
LEFT JOIN warehouse.dimDRG readmitDRG ON fp.readmissionDrgKey1=readmitDRG.drgSK
LEFT JOIN (
select distinct provider_ccn ,quality_of_patient_care_star_rating,number_of_completed_surveys, max(file_date) from warehouse.ops_hha_home_health_compare group by provider_ccn)hhc on post_acute_df.CCN =hhc.provider_ccn
INNER JOIN 
    (
 SELECT tabUserSecurityBPID.bpid, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityBPID where username = ${userName}
       GROUP BY bpid
       )tbsBPID ON fp.BPID = tbsBPID.bpid
INNER JOIN 
     (       
        SELECT tabUserSecurityCCN.ccn, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityCCN where username = ${userName}
       GROUP BY ccn
        )tbsCCN on anc.ccn=tbsCCN.ccn
INNER JOIN 
     (       
        SELECT tabUserSecurityFacilityKey.facilitykey, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityFacilityKey where username = ${userName}
       GROUP BY facilitykey
        )tbsFacilityKey on fp.sourceFacilityKey=tbsFacilityKey.facilitykey
WHERE fp.NSOCType=&apos;HHA&apos;
and fp.bundleRisk=1 and fp.episodeCountReport=1
and anc.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;) and post_acute_df.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;)
and afdetail.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;) 
and ei.bpid not like &apos;%DEMO%&apos;
and  fp.anchorAdmitDateKey &gt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;) 
and fp.anchorAdmitDateKey &lt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;BPCIAStartDate&apos;)
-- and fp.anchorAdmitDateKey &gt;= &apos;&apos;

${EC_POSTCCN} 
          ${EC_BUNDLE} 
		${EC_REGION} 
		${EC_MARKET} 
		${ECA_PARTICIPANTNAME}  
          ${EC_BPID}
          ${EC_CCN}
union

-- Claims Data
select 
distinct  rm.region, rm.market
FROM warehouse.factClaims c
LEFT JOIN warehouse.dimFacility f ON c.anchorFacilityKey = f.facilitySK
LEFT JOIN warehouse.dimEpisodeInitiator e ON c.episodeInitiatorKey = e.episodeInitiatorSK
LEFT JOIN warehouse.dimFacility pac ON c.postAcuteFacilityKey = pac.facilitySK
LEFT JOIN warehouse.dimFacility ssoc ON c.SSOC_CCN_key = ssoc.facilitySK
LEFT JOIN warehouse.dimDRG drg ON c.anchorDrgKey = drg.drgSK
LEFT JOIN warehouse.dimSNFNetwork snf ON c.SNFNetworkKey = snf.SNFNeworkSK
LEFT JOIN warehouse.dimPhysician p ON c.physicianKey = p.physicianSK
LEFT JOIN warehouse.dimRegionMarket rm ON c.rgRemKey = rm.rgSK
LEFT JOIN warehouse.dimRegionMarket rmp ON c.rgPartnerKey = rmp.rgSK
left join warehouse.ref_operational_targets ot on e.bpid=ot.BPID and f.ccn=ot.CCN and drg.bundleShortName=ot.Clinical_Episode
LEFT JOIN warehouse.dimDate dt ON c.anchorBeginDateKey = dt.dateSK
LEFT JOIN warehouse.dimPatient pat ON c.patientKey=pat.patientSK
LEFT JOIN warehouse.dimFacility readmitsrcccn ON c.readmission_source_ccn_1_Key = readmitsrcccn.facilitySK
LEFT JOIN warehouse.dimDRG readmitDRG ON c.readmissionDrgKey1=readmitDRG.drgSK
LEFT JOIN (
select distinct provider_ccn ,quality_of_patient_care_star_rating,number_of_completed_surveys, max(file_date) from warehouse.ops_hha_home_health_compare
 group by provider_ccn)hhc
 on pac.CCN =hhc.provider_ccn
 INNER JOIN 
    (
 SELECT tabUserSecurityBPID.bpid, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityBPID where username = ${userName}
       GROUP BY bpid
       )tbsBPID ON e.BPID = tbsBPID.bpid
INNER JOIN 
     (       
        SELECT tabUserSecurityCCN.ccn, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityCCN where username = ${userName}
       GROUP BY ccn
        )tbsCCN on f.ccn=tbsCCN.ccn
 WHERE  c.postAcuteCategory=&apos;HHA&apos;
 and f.dwhSource in (&apos;Claims&apos;, &apos;ZeroKey&apos;,&apos;emblemClaims&apos;) 
 and pac.dwhSource in (&apos;Claims&apos;, &apos;ZeroKey&apos;,&apos;emblemClaims&apos;)
 and e.bpid  not like &apos;%DEMO%&apos; 
  and c.targetPrice &lt;&gt; 0
  and c.atRisk=&apos;Y&apos;  
and c.anchorBeginDateKey &gt;= &apos;20160101&apos; /*change back to 2016*/
and c.anchorBeginDateKey &lt;= (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;)

${EC_POSTCCN} 
          ${C_BUNDLE} 
		${C_REGION} 
		${C_MARKET} 
		${C_PARTICIPANTNAME}  
          ${C_BPID}
          ${C_CCN}
)a  order by CONCAT( &apos;Remedy-&apos;, a.region, &apos; &apos;,  a.market ); -- Pass</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">RRegionMarket</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Participant" enabled="true">
          <stringProp name="dataSource">MySQLQA</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select distinct a.Participant  from
( 
-- EC Data
select 
distinct ei.participantNameInitCap AS Participant
FROM
warehouse.factPatientEpisode fp
LEFT JOIN  (select f.facilitySK,f.ccn,f.facilityName,
    case when df_claims.facilityNameInitCap is null then f.facilityNameInitCap
    else df_claims.facilityNameInitCap end facilityNameInitCap,
    f.facilityType,f.facilitySubtype,f.address1,f.address2,f.city,f.state,f.zip,f.contactName,f.contactEmail,
    f.contactPhone1,f.contactPhone2,f.contactRole,f.lat,f.lon,f.fips,f.confirmed,f.dataSource,f.description,
    f.excludedFromRiskScore,f.sourceFacilityKey,f.fgroup,f.id,f.isFeatured,f.medicareId,f.mongoId,f.outboundBpciParticipant,
    f.participantId,f.participating,f.bpid,f.careType,f.categorySpecificFields,f.dwhIsActive,f.dwhIsDeleted,f.dwhSource,
    f.dwhVersion,f.dwhStartDate,f.dwhEndDate,f.dwhMD5Checksum
    from warehouse.dimFacility f
    left outer join (select * from warehouse.dimFacility where dwhSource=&apos;Claims&apos;) as df_claims
    on f.ccn = df_claims.ccn and f.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;) 
    ) anc ON fp.anchorAdmitFacilityKey=anc.facilitySK
LEFT JOIN warehouse.dimFacility afdetail ON anc.sourceFacilityKey = afdetail.facilitySK
LEFT JOIN warehouse.dimEpisodeInitiator ei ON fp.episodeInitiatorKey=ei.episodeInitiatorSK
LEFT JOIN (select f.facilitySK,f.ccn,f.facilityName,
    case when df_claims.facilityNameInitCap is null then f.facilityNameInitCap
    else df_claims.facilityNameInitCap end facilityNameInitCap,
    f.facilityType,f.facilitySubtype,f.address1,f.address2,f.city,f.state,f.zip,f.contactName,f.contactEmail,
    f.contactPhone1,f.contactPhone2,f.contactRole,f.lat,f.lon,f.fips,f.confirmed,f.dataSource,f.description,
    f.excludedFromRiskScore,f.sourceFacilityKey,f.fgroup,f.id,f.isFeatured,f.medicareId,f.mongoId,f.outboundBpciParticipant,
    f.participantId,f.participating,f.bpid,f.careType,f.categorySpecificFields,f.dwhIsActive,f.dwhIsDeleted,f.dwhSource,
    f.dwhVersion,f.dwhStartDate,f.dwhEndDate,f.dwhMD5Checksum
    from warehouse.dimFacility f
    left outer join (select * from warehouse.dimFacility where dwhSource=&apos;Claims&apos;) as df_claims
    on f.ccn = df_claims.ccn and f.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;) 
    ) post_acute_df ON fp.anchorDischargeFacilityKey=post_acute_df.facilitySK
LEFT JOIN warehouse.dimCARL c ON fp.carlKey=c.carlSK
LEFT JOIN warehouse.dimPhysician p on fp.physicianKey=p.physicianSK
LEFT JOIN warehouse.dimRegionMarket rm ON fp.rgRemKey = rm.rgSK
 LEFT JOIN warehouse.dimRegionMarket rmp ON fp.rgPartnerKey = rmp.rgSK
LEFT JOIN warehouse.dimDRG drg on fp.currDrgKey = drg.drgSK
left join warehouse.ref_operational_targets ot on ei.bpid=ot.BPID and anc.ccn=ot.CCN and drg.bundleShortName=ot.Clinical_Episode
LEFT JOIN warehouse.dimDate dt ON fp.anchorAdmitDateKey = dt.dateSK
LEFT JOIN warehouse.dimPatient pat ON fp.patientKey=pat.patientSK
LEFT JOIN warehouse.dimFacility readmitsrcccn ON fp.readmitfacilityKey1 = readmitsrcccn.facilitySK
LEFT JOIN warehouse.dimDRG readmitDRG ON fp.readmissionDrgKey1=readmitDRG.drgSK
LEFT JOIN (
select distinct provider_ccn ,quality_of_patient_care_star_rating,number_of_completed_surveys, max(file_date) from warehouse.ops_hha_home_health_compare group by provider_ccn)hhc on post_acute_df.CCN =hhc.provider_ccn
INNER JOIN 
    (
 SELECT tabUserSecurityBPID.bpid, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityBPID where username = ${userName}
       GROUP BY bpid
       )tbsBPID ON fp.BPID = tbsBPID.bpid
INNER JOIN 
     (       
        SELECT tabUserSecurityCCN.ccn, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityCCN where username = ${userName}
       GROUP BY ccn
        )tbsCCN on anc.ccn=tbsCCN.ccn
INNER JOIN 
     (       
        SELECT tabUserSecurityFacilityKey.facilitykey, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityFacilityKey where username = ${userName}
       GROUP BY facilitykey
        )tbsFacilityKey on fp.sourceFacilityKey=tbsFacilityKey.facilitykey
WHERE fp.NSOCType=&apos;HHA&apos;
and fp.bundleRisk=1 and fp.episodeCountReport=1
and anc.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;) and post_acute_df.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;)
and afdetail.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;) 
and ei.bpid not like &apos;%DEMO%&apos;
and  fp.anchorAdmitDateKey &gt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;) 
and fp.anchorAdmitDateKey &lt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;BPCIAStartDate&apos;)
-- and fp.anchorAdmitDateKey &gt;= &apos;&apos;

    
          ${EC_POSTCCN} 
          ${EC_BUNDLE}
		${EC_R_REGION} 
		${EC_R_MARKET} 
		${EC_REGION} 
		${EC_MARKET} 
		${EC_BPID}
          ${EC_CCN}

union

 -- Claims Data
select
distinct  e.participantNameInitCap AS Participant
FROM warehouse.factClaims c
LEFT JOIN warehouse.dimFacility f ON c.anchorFacilityKey = f.facilitySK
LEFT JOIN warehouse.dimEpisodeInitiator e ON c.episodeInitiatorKey = e.episodeInitiatorSK
LEFT JOIN warehouse.dimFacility pac ON c.postAcuteFacilityKey = pac.facilitySK
LEFT JOIN warehouse.dimFacility ssoc ON c.SSOC_CCN_key = ssoc.facilitySK
LEFT JOIN warehouse.dimDRG drg ON c.anchorDrgKey = drg.drgSK
LEFT JOIN warehouse.dimSNFNetwork snf ON c.SNFNetworkKey = snf.SNFNeworkSK
LEFT JOIN warehouse.dimPhysician p ON c.physicianKey = p.physicianSK
LEFT JOIN warehouse.dimRegionMarket rm ON c.rgRemKey = rm.rgSK
LEFT JOIN warehouse.dimRegionMarket rmp ON c.rgPartnerKey = rmp.rgSK
left join warehouse.ref_operational_targets ot on e.bpid=ot.BPID and f.ccn=ot.CCN and drg.bundleShortName=ot.Clinical_Episode
LEFT JOIN warehouse.dimDate dt ON c.anchorBeginDateKey = dt.dateSK
LEFT JOIN warehouse.dimPatient pat ON c.patientKey=pat.patientSK
LEFT JOIN warehouse.dimFacility readmitsrcccn ON c.readmission_source_ccn_1_Key = readmitsrcccn.facilitySK
LEFT JOIN warehouse.dimDRG readmitDRG ON c.readmissionDrgKey1=readmitDRG.drgSK
LEFT JOIN (
select distinct provider_ccn ,quality_of_patient_care_star_rating,number_of_completed_surveys, max(file_date) from warehouse.ops_hha_home_health_compare
 group by provider_ccn)hhc
 on pac.CCN =hhc.provider_ccn
 INNER JOIN 
    (
 SELECT tabUserSecurityBPID.bpid, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityBPID where username = ${userName}
       GROUP BY bpid
       )tbsBPID ON e.BPID = tbsBPID.bpid
INNER JOIN 
     (       
        SELECT tabUserSecurityCCN.ccn, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityCCN where username = ${userName}
       GROUP BY ccn
        )tbsCCN on f.ccn=tbsCCN.ccn
 WHERE  c.postAcuteCategory=&apos;HHA&apos;
 and f.dwhSource in (&apos;Claims&apos;, &apos;ZeroKey&apos;,&apos;emblemClaims&apos;) 
 and pac.dwhSource in (&apos;Claims&apos;, &apos;ZeroKey&apos;,&apos;emblemClaims&apos;)
 and e.bpid  not like &apos;%DEMO%&apos; 
  and c.targetPrice &lt;&gt; 0
  and c.atRisk=&apos;Y&apos;  
and c.anchorBeginDateKey &gt;= &apos;20160101&apos; /*change back to 2016*/
and c.anchorBeginDateKey &lt;= (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;)
   ${C_POSTCCN} 
          ${C_BUNDLE}
		${C_R_REGION} 
		${C_R_MARKET} 
		${C_REGION} 
		${C_MARKET} 
		${C_BPID}
          ${C_CCN}

)a  order by a.Participant ;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">participantName</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Episode Initiator BPID" enabled="true">
          <stringProp name="dataSource">MySQLQA</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select concat( `Episode Initiator`, &apos; - &apos;, BPID)
from
( 
-- EC Data
select 
distinct fp.BPID,
case when ei.episodeInitiatorNameInitCap is null then null else ei.episodeInitiatorNameInitCap end AS &apos;Episode Initiator&apos;
FROM
warehouse.factPatientEpisode fp
LEFT JOIN  (select f.facilitySK,f.ccn,f.facilityName,
    case when df_claims.facilityNameInitCap is null then f.facilityNameInitCap
    else df_claims.facilityNameInitCap end facilityNameInitCap,
    f.facilityType,f.facilitySubtype,f.address1,f.address2,f.city,f.state,f.zip,f.contactName,f.contactEmail,
    f.contactPhone1,f.contactPhone2,f.contactRole,f.lat,f.lon,f.fips,f.confirmed,f.dataSource,f.description,
    f.excludedFromRiskScore,f.sourceFacilityKey,f.fgroup,f.id,f.isFeatured,f.medicareId,f.mongoId,f.outboundBpciParticipant,
    f.participantId,f.participating,f.bpid,f.careType,f.categorySpecificFields,f.dwhIsActive,f.dwhIsDeleted,f.dwhSource,
    f.dwhVersion,f.dwhStartDate,f.dwhEndDate,f.dwhMD5Checksum
    from warehouse.dimFacility f
    left outer join (select * from warehouse.dimFacility where dwhSource=&apos;Claims&apos;) as df_claims
    on f.ccn = df_claims.ccn and f.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;) 
    ) anc ON fp.anchorAdmitFacilityKey=anc.facilitySK
LEFT JOIN warehouse.dimFacility afdetail ON anc.sourceFacilityKey = afdetail.facilitySK
LEFT JOIN warehouse.dimEpisodeInitiator ei ON fp.episodeInitiatorKey=ei.episodeInitiatorSK
LEFT JOIN (select f.facilitySK,f.ccn,f.facilityName,
    case when df_claims.facilityNameInitCap is null then f.facilityNameInitCap
    else df_claims.facilityNameInitCap end facilityNameInitCap,
    f.facilityType,f.facilitySubtype,f.address1,f.address2,f.city,f.state,f.zip,f.contactName,f.contactEmail,
    f.contactPhone1,f.contactPhone2,f.contactRole,f.lat,f.lon,f.fips,f.confirmed,f.dataSource,f.description,
    f.excludedFromRiskScore,f.sourceFacilityKey,f.fgroup,f.id,f.isFeatured,f.medicareId,f.mongoId,f.outboundBpciParticipant,
    f.participantId,f.participating,f.bpid,f.careType,f.categorySpecificFields,f.dwhIsActive,f.dwhIsDeleted,f.dwhSource,
    f.dwhVersion,f.dwhStartDate,f.dwhEndDate,f.dwhMD5Checksum
    from warehouse.dimFacility f
    left outer join (select * from warehouse.dimFacility where dwhSource=&apos;Claims&apos;) as df_claims
    on f.ccn = df_claims.ccn and f.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;) 
    ) post_acute_df ON fp.anchorDischargeFacilityKey=post_acute_df.facilitySK
LEFT JOIN warehouse.dimCARL c ON fp.carlKey=c.carlSK
LEFT JOIN warehouse.dimPhysician p on fp.physicianKey=p.physicianSK
LEFT JOIN warehouse.dimRegionMarket rm ON fp.rgRemKey = rm.rgSK
 LEFT JOIN warehouse.dimRegionMarket rmp ON fp.rgPartnerKey = rmp.rgSK
LEFT JOIN warehouse.dimDRG drg on fp.currDrgKey = drg.drgSK
left join warehouse.ref_operational_targets ot on ei.bpid=ot.BPID and anc.ccn=ot.CCN and drg.bundleShortName=ot.Clinical_Episode
LEFT JOIN warehouse.dimDate dt ON fp.anchorAdmitDateKey = dt.dateSK
LEFT JOIN warehouse.dimPatient pat ON fp.patientKey=pat.patientSK
LEFT JOIN warehouse.dimFacility readmitsrcccn ON fp.readmitfacilityKey1 = readmitsrcccn.facilitySK
LEFT JOIN warehouse.dimDRG readmitDRG ON fp.readmissionDrgKey1=readmitDRG.drgSK
LEFT JOIN (
select distinct provider_ccn ,quality_of_patient_care_star_rating,number_of_completed_surveys, max(file_date) from warehouse.ops_hha_home_health_compare group by provider_ccn)hhc on post_acute_df.CCN =hhc.provider_ccn
INNER JOIN 
    (
 SELECT tabUserSecurityBPID.bpid, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityBPID where username = ${userName}
       GROUP BY bpid
       )tbsBPID ON fp.BPID = tbsBPID.bpid
INNER JOIN 
     (       
        SELECT tabUserSecurityCCN.ccn, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityCCN where username = ${userName}
       GROUP BY ccn
        )tbsCCN on anc.ccn=tbsCCN.ccn
INNER JOIN 
     (       
        SELECT tabUserSecurityFacilityKey.facilitykey, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityFacilityKey where username = ${userName}
       GROUP BY facilitykey
        )tbsFacilityKey on fp.sourceFacilityKey=tbsFacilityKey.facilitykey
WHERE fp.NSOCType=&apos;HHA&apos;
and fp.bundleRisk=1 and fp.episodeCountReport=1
and anc.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;) and post_acute_df.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;)
and afdetail.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;) 
and
ei.bpid not like &apos;%DEMO%&apos;
and  fp.anchorAdmitDateKey &gt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;) 
and fp.anchorAdmitDateKey &lt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;BPCIAStartDate&apos;)
-- and fp.anchorAdmitDateKey &gt;= &apos;&apos;
 ${EC_POSTCCN} 
 ${EC_BUNDLE} 
		${EC_R_REGION} 
		${EC_R_MARKET} 
		${EC_REGION} 
		${EC_MARKET} 
		${EC_PARTICIPANTNAME}  
		
         
		${EC_CCN} 
 union

-- Query to find out BPID&apos;s with Claims data
 
select
distinct  e.BPID,
case when e.episodeInitiatorNameInitCap is null then null else e.episodeInitiatorNameInitCap end AS &apos;Episode Initiator&apos;
FROM warehouse.factClaims c
LEFT JOIN warehouse.dimFacility f ON c.anchorFacilityKey = f.facilitySK
LEFT JOIN warehouse.dimEpisodeInitiator e ON c.episodeInitiatorKey = e.episodeInitiatorSK
LEFT JOIN warehouse.dimFacility pac ON c.postAcuteFacilityKey = pac.facilitySK
LEFT JOIN warehouse.dimFacility ssoc ON c.SSOC_CCN_key = ssoc.facilitySK
LEFT JOIN warehouse.dimDRG drg ON c.anchorDrgKey = drg.drgSK
LEFT JOIN warehouse.dimSNFNetwork snf ON c.SNFNetworkKey = snf.SNFNeworkSK
LEFT JOIN warehouse.dimPhysician p ON c.physicianKey = p.physicianSK
LEFT JOIN warehouse.dimRegionMarket rm ON c.rgRemKey = rm.rgSK
LEFT JOIN warehouse.dimRegionMarket rmp ON c.rgPartnerKey = rmp.rgSK
left join warehouse.ref_operational_targets ot on e.bpid=ot.BPID and f.ccn=ot.CCN and drg.bundleShortName=ot.Clinical_Episode
LEFT JOIN warehouse.dimDate dt ON c.anchorBeginDateKey = dt.dateSK
LEFT JOIN warehouse.dimPatient pat ON c.patientKey=pat.patientSK
LEFT JOIN warehouse.dimFacility readmitsrcccn ON c.readmission_source_ccn_1_Key = readmitsrcccn.facilitySK
LEFT JOIN warehouse.dimDRG readmitDRG ON c.readmissionDrgKey1=readmitDRG.drgSK
LEFT JOIN (
select distinct provider_ccn ,quality_of_patient_care_star_rating,number_of_completed_surveys, max(file_date) from warehouse.ops_hha_home_health_compare
 group by provider_ccn)hhc
 on pac.CCN =hhc.provider_ccn
 INNER JOIN 
    (
 SELECT tabUserSecurityBPID.bpid, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityBPID where username = ${userName}
       GROUP BY bpid
       )tbsBPID ON e.BPID = tbsBPID.bpid
INNER JOIN 
     (       
        SELECT tabUserSecurityCCN.ccn, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityCCN where username = ${userName}
       GROUP BY ccn
        )tbsCCN on f.ccn=tbsCCN.ccn
 WHERE  c.postAcuteCategory=&apos;HHA&apos;
 and f.dwhSource in (&apos;Claims&apos;, &apos;ZeroKey&apos;,&apos;emblemClaims&apos;) 
 and pac.dwhSource in (&apos;Claims&apos;, &apos;ZeroKey&apos;,&apos;emblemClaims&apos;)
 and 
 e.bpid  not like &apos;%DEMO%&apos; 
  and c.targetPrice &lt;&gt; 0
  and c.atRisk=&apos;Y&apos;  
  AND c.anchorBeginDateKey &gt;= 20160101
  AND c.anchorBeginDateKey &lt;= (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;)
   ${C_POSTCCN} 
   ${C_BUNDLE} 
		${C_R_REGION} 
		${C_R_MARKET} 
		${C_REGION} 
		${C_MARKET} 
		${C_PARTICIPANTNAME}  
		
		${C_CCN} 
 )  a
order by concat(`Episode Initiator`,&apos; - &apos;, BPID);

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">EpisodeInitiator_BPID</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Anchor Facility CCN" enabled="true">
          <stringProp name="dataSource">MySQLQA</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select  concat(`Anchor Facility`, &apos; - &apos;, CCN)
from
( 
-- EC Data
select 
distinct anc.facilityNameInitCap AS &apos;Anchor Facility&apos;, anc.ccn AS CCN
FROM
warehouse.factPatientEpisode fp
LEFT JOIN  (select f.facilitySK,f.ccn,f.facilityName,
    case when df_claims.facilityNameInitCap is null then f.facilityNameInitCap
    else df_claims.facilityNameInitCap end facilityNameInitCap,
    f.facilityType,f.facilitySubtype,f.address1,f.address2,f.city,f.state,f.zip,f.contactName,f.contactEmail,
    f.contactPhone1,f.contactPhone2,f.contactRole,f.lat,f.lon,f.fips,f.confirmed,f.dataSource,f.description,
    f.excludedFromRiskScore,f.sourceFacilityKey,f.fgroup,f.id,f.isFeatured,f.medicareId,f.mongoId,f.outboundBpciParticipant,
    f.participantId,f.participating,f.bpid,f.careType,f.categorySpecificFields,f.dwhIsActive,f.dwhIsDeleted,f.dwhSource,
    f.dwhVersion,f.dwhStartDate,f.dwhEndDate,f.dwhMD5Checksum
    from warehouse.dimFacility f
    left outer join (select * from warehouse.dimFacility where dwhSource=&apos;Claims&apos;) as df_claims
    on f.ccn = df_claims.ccn and f.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;) 
    ) anc ON fp.anchorAdmitFacilityKey=anc.facilitySK
LEFT JOIN warehouse.dimFacility afdetail ON anc.sourceFacilityKey = afdetail.facilitySK
LEFT JOIN warehouse.dimEpisodeInitiator ei ON fp.episodeInitiatorKey=ei.episodeInitiatorSK
LEFT JOIN (select f.facilitySK,f.ccn,f.facilityName,
    case when df_claims.facilityNameInitCap is null then f.facilityNameInitCap
    else df_claims.facilityNameInitCap end facilityNameInitCap,
    f.facilityType,f.facilitySubtype,f.address1,f.address2,f.city,f.state,f.zip,f.contactName,f.contactEmail,
    f.contactPhone1,f.contactPhone2,f.contactRole,f.lat,f.lon,f.fips,f.confirmed,f.dataSource,f.description,
    f.excludedFromRiskScore,f.sourceFacilityKey,f.fgroup,f.id,f.isFeatured,f.medicareId,f.mongoId,f.outboundBpciParticipant,
    f.participantId,f.participating,f.bpid,f.careType,f.categorySpecificFields,f.dwhIsActive,f.dwhIsDeleted,f.dwhSource,
    f.dwhVersion,f.dwhStartDate,f.dwhEndDate,f.dwhMD5Checksum
    from warehouse.dimFacility f
    left outer join (select * from warehouse.dimFacility where dwhSource=&apos;Claims&apos;) as df_claims
    on f.ccn = df_claims.ccn and f.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;) 
    ) post_acute_df ON fp.anchorDischargeFacilityKey=post_acute_df.facilitySK
LEFT JOIN warehouse.dimCARL c ON fp.carlKey=c.carlSK
LEFT JOIN warehouse.dimPhysician p on fp.physicianKey=p.physicianSK
LEFT JOIN warehouse.dimRegionMarket rm ON fp.rgRemKey = rm.rgSK
 LEFT JOIN warehouse.dimRegionMarket rmp ON fp.rgPartnerKey = rmp.rgSK
LEFT JOIN warehouse.dimDRG drg on fp.currDrgKey = drg.drgSK
left join warehouse.ref_operational_targets ot on ei.bpid=ot.BPID and anc.ccn=ot.CCN and drg.bundleShortName=ot.Clinical_Episode
LEFT JOIN warehouse.dimDate dt ON fp.anchorAdmitDateKey = dt.dateSK
LEFT JOIN warehouse.dimPatient pat ON fp.patientKey=pat.patientSK
LEFT JOIN warehouse.dimFacility readmitsrcccn ON fp.readmitfacilityKey1 = readmitsrcccn.facilitySK
LEFT JOIN warehouse.dimDRG readmitDRG ON fp.readmissionDrgKey1=readmitDRG.drgSK
LEFT JOIN (
select distinct provider_ccn ,quality_of_patient_care_star_rating,number_of_completed_surveys, max(file_date) from warehouse.ops_hha_home_health_compare group by provider_ccn)hhc on post_acute_df.CCN =hhc.provider_ccn
INNER JOIN 
    (
 SELECT tabUserSecurityBPID.bpid, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityBPID where username = ${userName}
       GROUP BY bpid
       )tbsBPID ON fp.BPID = tbsBPID.bpid
INNER JOIN 
     (       
        SELECT tabUserSecurityCCN.ccn, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityCCN where username = ${userName}
       GROUP BY ccn
        )tbsCCN on anc.ccn=tbsCCN.ccn
INNER JOIN 
     (       
        SELECT tabUserSecurityFacilityKey.facilitykey, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityFacilityKey where username = ${userName}
       GROUP BY facilitykey
        )tbsFacilityKey on fp.sourceFacilityKey=tbsFacilityKey.facilitykey
WHERE fp.NSOCType=&apos;HHA&apos;
and fp.bundleRisk=1 and fp.episodeCountReport=1
and anc.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;) and post_acute_df.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;)
and afdetail.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;) 
and ei.bpid not like &apos;%DEMO%&apos;
and  fp.anchorAdmitDateKey &gt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;) 
and fp.anchorAdmitDateKey &lt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;BPCIAStartDate&apos;)
-- and fp.anchorAdmitDateKey &gt;= &apos;&apos;

          ${EC_POSTCCN} 
          ${EC_BUNDLE} 
		${EC_R_REGION} 
		${EC_R_MARKET} 
		${EC_REGION} 
		${EC_MARKET} 
		${EC_PARTICIPANTNAME}  
		${EC_BPID} 

union

-- Claims Data
select
distinct  f.facilityNameInitCap as &apos;Anchor Facility&apos;, f.ccn  AS CCN
FROM warehouse.factClaims c
LEFT JOIN warehouse.dimFacility f ON c.anchorFacilityKey = f.facilitySK
LEFT JOIN warehouse.dimEpisodeInitiator e ON c.episodeInitiatorKey = e.episodeInitiatorSK
LEFT JOIN warehouse.dimFacility pac ON c.postAcuteFacilityKey = pac.facilitySK
LEFT JOIN warehouse.dimFacility ssoc ON c.SSOC_CCN_key = ssoc.facilitySK
LEFT JOIN warehouse.dimDRG drg ON c.anchorDrgKey = drg.drgSK
LEFT JOIN warehouse.dimSNFNetwork snf ON c.SNFNetworkKey = snf.SNFNeworkSK
LEFT JOIN warehouse.dimPhysician p ON c.physicianKey = p.physicianSK
LEFT JOIN warehouse.dimRegionMarket rm ON c.rgRemKey = rm.rgSK
LEFT JOIN warehouse.dimRegionMarket rmp ON c.rgPartnerKey = rmp.rgSK
left join warehouse.ref_operational_targets ot on e.bpid=ot.BPID and f.ccn=ot.CCN and drg.bundleShortName=ot.Clinical_Episode
LEFT JOIN warehouse.dimDate dt ON c.anchorBeginDateKey = dt.dateSK
LEFT JOIN warehouse.dimPatient pat ON c.patientKey=pat.patientSK
LEFT JOIN warehouse.dimFacility readmitsrcccn ON c.readmission_source_ccn_1_Key = readmitsrcccn.facilitySK
LEFT JOIN warehouse.dimDRG readmitDRG ON c.readmissionDrgKey1=readmitDRG.drgSK
LEFT JOIN (
select distinct provider_ccn ,quality_of_patient_care_star_rating,number_of_completed_surveys, max(file_date) from warehouse.ops_hha_home_health_compare
 group by provider_ccn)hhc
 on pac.CCN =hhc.provider_ccn
 INNER JOIN 
    (
 SELECT tabUserSecurityBPID.bpid, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityBPID where username = ${userName}
       GROUP BY bpid
       )tbsBPID ON e.BPID = tbsBPID.bpid
INNER JOIN 
     (       
        SELECT tabUserSecurityCCN.ccn, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityCCN where username = ${userName}
       GROUP BY ccn
        )tbsCCN on f.ccn=tbsCCN.ccn
 WHERE  c.postAcuteCategory=&apos;HHA&apos;
 and f.dwhSource in (&apos;Claims&apos;, &apos;ZeroKey&apos;,&apos;emblemClaims&apos;) 
 and pac.dwhSource in (&apos;Claims&apos;, &apos;ZeroKey&apos;,&apos;emblemClaims&apos;)
 and e.bpid  not like &apos;%DEMO%&apos; 
  and c.targetPrice &lt;&gt; 0
  and c.atRisk=&apos;Y&apos;  
and c.anchorBeginDateKey &gt;= &apos;20160101&apos; /*change back to 2016*/
and c.anchorBeginDateKey &lt;= (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;)
          ${C_POSTCCN} 
          ${C_BUNDLE} 
		${C_R_REGION} 
		${C_R_MARKET} 
		${C_REGION} 
		${C_MARKET} 
		${C_PARTICIPANTNAME}  
		${C_BPID} 
)a
 order by concat(`Anchor Facility`, &apos; - &apos;, CCN) ;

 
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">AnchorFacility_CCN</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="OS Process Sampler" enabled="true">
          <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
          <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
          <stringProp name="SystemSampler.command">cmd.exe</stringProp>
          <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">/c</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">echo Episode Initiator - BPID=${value1}*Anchor Facility - CCN=${value2}*Bundle=${value3}*Region - Market=${value5}*Remedy Region - Market=${value4}*Participant=${value6}*DRG=${value7}*Physician - NPI=${value8}*Model=${value9}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SystemSampler.directory">${__BeanShell(import org.apache.jmeter.services.FileServer; FileServer.getFileServer().getBaseDir();)}${__BeanShell(File.separator,)}</stringProp>
        </SystemSampler>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import java.util.ArrayList;

ArrayList post_ccn = new ArrayList();
for(int i=1;i&lt;=Integer.parseInt(vars.get(&quot;POST_CCN_#&quot;));i++){
post_ccn.add(vars.get(&quot;POST_CCN_&quot;+i));
}
vars.put(&quot;value11&quot;,&quot;\&quot;&quot;+post_ccn.toString()+&quot;\&quot;&quot;);
System.out.println(&quot;POST CCN:&quot;+post_ccn.toString());
log.info(&quot;POST CCN&quot;+post_ccn.toString());


ArrayList al_bundleName = new ArrayList();
for(int i=1;i&lt;=Integer.parseInt(vars.get(&quot;bundleName_#&quot;));i++){
al_bundleName.add(vars.get(&quot;bundleName_&quot;+i));
}
vars.put(&quot;value3&quot;,&quot;\&quot;&quot;+al_bundleName.toString()+&quot;\&quot;&quot;);
System.out.println(&quot;bundleName:&quot;+al_bundleName.toString());

ArrayList al_PartnerRegionMarket = new ArrayList();
for(int i=1;i&lt;=Integer.parseInt(vars.get(&quot;PartnerRegionMarket_#&quot;));i++){
al_PartnerRegionMarket.add(vars.get(&quot;PartnerRegionMarket_&quot;+i));
}
vars.put(&quot;value4&quot;,&quot;\&quot;&quot;+al_PartnerRegionMarket.toString()+&quot;\&quot;&quot;);
System.out.println(&quot;Partner region:&quot;+al_PartnerRegionMarket.toString());



for(int i=1;i&lt;=Integer.parseInt(vars.get(&quot;RRegionMarket_#&quot;));i++){
al_RRegionMarket.add(vars.get(&quot;RRegionMarket_&quot;+i));
}
vars.put(&quot;value5&quot;,&quot;\&quot;&quot;+al_RRegionMarket.toString()+&quot;\&quot;&quot;);
System.out.println(&quot;RRegionMarket:&quot;+al_RRegionMarket.toString());


ArrayList al_participant = new ArrayList();
for(int i=1;i&lt;=Integer.parseInt(vars.get(&quot;participantName_#&quot;));i++){
al_participant.add(vars.get(&quot;participantName_&quot;+i));
}
vars.put(&quot;value6&quot;,&quot;\&quot;&quot;+al_participant.toString()+&quot;\&quot;&quot;);
System.out.println(&quot;Participant:&quot;+al_participant.toString());



ArrayList al_bpid = new ArrayList();
for(int i=1;i&lt;=Integer.parseInt(vars.get(&quot;EpisodeInitiator_BPID_#&quot;));i++){
al_bpid.add(vars.get(&quot;EpisodeInitiator_BPID_&quot;+i));
}
vars.put(&quot;value7&quot;,&quot;\&quot;&quot;+al_bpid.toString()+&quot;\&quot;&quot;);
System.out.println(&quot;BPID:&quot;+al_bpid.toString());

ArrayList al_facilityName = new ArrayList();
for(int i=1;i&lt;=Integer.parseInt(vars.get(&quot;AnchorFacility_CCN_#&quot;));i++){
al_facilityName.add(vars.get(&quot;AnchorFacility_CCN_&quot;+i));
}
vars.put(&quot;value8&quot;,&quot;\&quot;&quot;+al_facilityName.toString()+&quot;\&quot;&quot;);
System.out.println(&quot;AnchorFacility_CCN&quot;+al_facilityName);




//ArrayList al_DRG_Fracture = new ArrayList();
//for(int i=1;i&lt;=Integer.parseInt(vars.get(&quot;DRG_Fracture_#&quot;));i++){
//al_DRG_Fracture.add(vars.get(&quot;DRG_Fracture_&quot;+i));
//}
//vars.put(&quot;value7&quot;,&quot;\&quot;&quot;+al_DRG_Fracture.toString()+&quot;\&quot;&quot;);
//System.out.println(&quot;DRG_Fracture:&quot;+al_DRG_Fracture.toString());
//
//ArrayList al_Physician_NPI = new ArrayList();
//for(int i=1;i&lt;=Integer.parseInt(vars.get(&quot;Physician_NPI_#&quot;));i++){
//al_Physician_NPI.add(vars.get(&quot;Physician_NPI_&quot;+i));
//}
//vars.put(&quot;value8&quot;,&quot;\&quot;&quot;+al_Physician_NPI.toString()+&quot;\&quot;&quot;);
//System.out.println(&quot;Physician_NPI:&quot;+al_Physician_NPI.toString());
//
//ArrayList al_model = new ArrayList();
//for(int i=1;i&lt;=Integer.parseInt(vars.get(&quot;model_#&quot;));i++){
//al_model.add(vars.get(&quot;model_&quot;+i));
//}
//vars.put(&quot;value9&quot;,&quot;\&quot;&quot;+al_model.toString()+&quot;\&quot;&quot;);
//System.out.println(&quot;model:&quot;+al_model.toString());

//ArrayList al_facilityNameInitCap = new ArrayList();
//for(int i=1;i&lt;=Integer.parseInt(vars.get(&quot;facilityNameInitCap_#&quot;));i++){
//al_facilityNameInitCap.add(vars.get(&quot;facilityNameInitCap_&quot;+i));
//}
//vars.put(&quot;value10&quot;,&quot;\&quot;&quot;+al_facilityNameInitCap.toString()+&quot;\&quot;&quot;);
//System.out.println(&quot;facilityNameInitCap:&quot;+al_facilityNameInitCap.toString());
</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.services.FileServer;
//get current jmeter script&apos;s directory
String path = FileServer.getFileServer().getBaseDir();
 
//get the separator
String separator = File.separator;
 
log.info(&quot;Path: &quot; + path);
log.info(&quot;Path with separator: &quot; + path + separator);
System.out.print(path+separator);
System.out.println(${Flag});
if(vars.get(&quot;Flag&quot;).equals(&quot;(1)&quot;)){
	log.info(&quot;Path: 1&quot;);
	fA = new FileOutputStream(path+separator+&quot;ClaimsRowFilterOutput.txt&quot;);
	pA = new PrintStream(fA); 
	pA.print(&quot;&quot;);
	pA.close();
	fA.close();
	}
log.info(&quot;Path: 7&quot;);
f= new FileOutputStream(path + separator+&quot;ClaimsRowFilterOutput.txt&quot;,true);
	p = new PrintStream(f);

	String vValue1 =  vars.get(&quot;value11&quot;);
     String vValue2 =  vars.get(&quot;value3&quot;);
 	String vValue3 =  vars.get(&quot;value4&quot;);
	String vValue4 =  vars.get(&quot;value5&quot;);
	String vValue5 =  vars.get(&quot;value6&quot;);
	String vValue6 =  vars.get(&quot;value7&quot;);
	String vValue7 =  vars.get(&quot;value8&quot;);
	
//	String vValue9 =  vars.get(&quot;value9&quot;);
//	String vValue10 =  vars.get(&quot;value10&quot;);
//	p.println(&quot;Episode Initiator - BPID=&quot;+vValue1+&quot;*Anchor Facility - CCN=&quot;+vValue2+&quot;*Bundle=&quot;+vValue3+&quot;*Remdy Region Market=&quot;+vValue4+&quot;*Partner Region Market=&quot;+vValue5+&quot;*Participant=&quot;+vValue6+&quot;*DRG - Fracture=&quot;+vValue7+&quot;*Physician - NPI=&quot;+vValue8+&quot;*Model=&quot;+vValue9); //+&quot;*Anchor Facility Detail=&quot;+vValue10);
	
//	p.println(&quot;Episode Initiator - BPID=&quot;+${value1}+&quot;*Anchor Facility - CCN=&quot;+${value2}+&quot;*Bundle=&quot;+${value3}+&quot;*Remdy Region Market=&quot;+${value4}+&quot;*Partner Region Market=&quot;+${value5}+&quot;*Participant=&quot;+${value6}+&quot;*DRG - Fracture=&quot;+${value7}+&quot;*Physician - NPI=&quot;+${value8}+&quot;*Model=&quot;+${value9}); //&quot;*Anchor Facility Detail=&quot;+${value10});


	p.println(&quot;POST Acute Facility - CCN=&quot;+vValue1+&quot;*Bundle=&quot;+vValue2+&quot;*Region - Market=&quot;+vValue3+&quot;*Remedy Region - Market=&quot;+vValue4+&quot;*Participant=&quot;+vValue5+&quot;*Episode Initiator - BPID=&quot;+vValue6+&quot;*Anchor Facility - CCN=&quot;+vValue7);
	p.close();
	f.close();

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
