<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.0 r1840935">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
        <stringProp name="dataSource">MySQLQA</stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="checkQuery">Select 1</stringProp>
        <stringProp name="dbUrl">jdbc:mysql://rds-qa.remedypartners.com:3306/warehouse</stringProp>
        <stringProp name="driver">com.mysql.jdbc.Driver</stringProp>
        <stringProp name="username">salam</stringProp>
        <stringProp name="password">1Welcome2</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Performace DashBoard" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1511452775000</longProp>
        <longProp name="ThreadGroup.end_time">1511452775000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
        <hashTree>
          <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="OS Process Sampler" enabled="false">
            <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
            <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
            <stringProp name="SystemSampler.command">cmd.exe</stringProp>
            <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="Argument">
                  <stringProp name="Argument.name"></stringProp>
                  <stringProp name="Argument.value">-c</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="" elementType="Argument">
                  <stringProp name="Argument.name"></stringProp>
                  <stringProp name="Argument.value">echo &quot;ECEpiosdeCount,claimsEpiosdeCount,savingRate,TotalNPRA, TotalProgram&quot; &gt;&gt; PerformanceDashboardResult.txt</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="SystemSampler.directory">C:\Users\sandeep.singh\Desktop\Tableautestpaln</stringProp>
          </SystemSampler>
          <hashTree/>
        </hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="NumberOfEppisode" enabled="true">
          <stringProp name="filename">ECRowFilterInput.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">Flag,userName,bpid,anchorFacility,ccn,bundle,dummyregion,dummymarket,r_region,r_market,participantName,drgCode,drgName,drgsubcode,npi,model,anch,region,market</stringProp>
          <stringProp name="delimiter">|</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">if(!vars.get(&quot;bpid&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;EC_BPID&quot;,&quot;AND de.bpid in ${bpid}&quot;);
} else {
	vars.put(&quot;EC_BPID&quot;,&quot;&quot;);
}
if(!vars.get(&quot;anchorFacility&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;EC_AnchorFacility&quot;,&quot;AND df.facilityNameInitCap in ${anchorFacility}&quot;);	
} else {
	vars.put(&quot;EC_AnchorFacility&quot;,&quot;&quot;);
}

if(!vars.get(&quot;ccn&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;EC_CCN&quot;,&quot;AND df.ccn in ${ccn}&quot;);	
} else {
	vars.put(&quot;EC_CCN&quot;,&quot;&quot;);
	
}

if(!vars.get(&quot;bundle&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;EC_BUNDLE&quot;,&quot;and d.bundleName in ${bundle}&quot;);	
} else{
	vars.put(&quot;EC_BUNDLE&quot;,&quot;&quot;);
}
if(!vars.get(&quot;r_region&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;EC_R_REGION&quot;,&quot;and rm.region in  ${r_region}&quot;);	
} else {
	vars.put(&quot;EC_R_REGION&quot;,&quot;&quot;);
}
if(!vars.get(&quot;r_market&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;EC_R_MARKET&quot;,&quot;and rm.market in ${r_market}&quot;);		
} else{
	vars.put(&quot;EC_R_MARKET&quot;,&quot;&quot;);
}
if(!vars.get(&quot;region&quot;).contains(&quot;Skip&quot;)){
	if(vars.get(&quot;region&quot;).equals(&quot;(&apos;null&apos;)&quot;)){
		vars.put(&quot;EC_Query_REGION&quot;,&quot;and prm.region is null&quot;);
	}
	else if(vars.get(&quot;region&quot;).contains(&quot;null&quot;)){
		String valueReg = &quot;and ( prm.region is null&quot;;
		String valueReg1 = vars.get(&quot;region&quot;);
		valueReg1 = valueReg1.replaceAll(&quot;&apos;null&apos;,&quot;,&quot;&quot;);
		valueReg1 = &quot; or prm.region in &quot;+valueReg1+&quot;)&quot;;
		vars.put(&quot;EC_Query_REGION&quot;,valueReg+valueReg1);
		} else {
		vars.put(&quot;EC_Query_REGION&quot;,&quot;and prm.region in ${region}&quot;);
	}	
} else {
	vars.put(&quot;EC_Query_REGION&quot;,&quot;&quot;);
}

if(!vars.get(&quot;market&quot;).contains(&quot;Skip&quot;)){
	if(vars.get(&quot;market&quot;).equals(&quot;(&apos;null&apos;)&quot;)){
		vars.put(&quot;EC_Query_MARKET&quot;,&quot;and prm.market is null&quot;);
	}
	else if(vars.get(&quot;market&quot;).contains(&quot;null&quot;)){
		String valueMar = &quot;and ( prm.market is null&quot;;
		String valueMar1 = vars.get(&quot;market&quot;);
		valueMar1 = valueMar1.replaceAll(&quot;&apos;null&apos;,&quot;,&quot;&quot;);
		valueMar1 = &quot; or prm.market in &quot;+valueMar1+&quot;)&quot;;
		vars.put(&quot;EC_Query_MARKET&quot;,valueMar+valueMar1);
		} else {
		vars.put(&quot;EC_Query_MARKET&quot;,&quot;and prm.market in ${market}&quot;);
	}
} else {
vars.put(&quot;EC_Query_MARKET&quot;,&quot;&quot;);
}

if(!vars.get(&quot;participantName&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;EC_PARTICIPANTNAME&quot;,&quot;and de.participantName in ${participantName}&quot;);
} else{
	vars.put(&quot;EC_PARTICIPANTNAME&quot;,&quot;&quot;);
}

if(vars.get(&quot;npi&quot;).equals(&quot;(&apos;Null&apos;)&quot;)){
	vars.put(&quot;EC_PHY_NPI&quot;,&quot;and dpy.npi is null&quot;);		
} else if(!vars.get(&quot;npi&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;EC_PHY_NPI&quot;,&quot;and dpy.npi in ${npi}&quot;);		
}else{
	vars.put(&quot;EC_PHY_NPI&quot;,&quot;&quot;);
}
if(!vars.get(&quot;model&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;EC_Model&quot;,&quot;and fp.Model in ${model}&quot;);	
} else{
	vars.put(&quot;EC_Model&quot;,&quot;&quot;);
}	
if(vars.get(&quot;anch&quot;).equals(&quot;(&apos;Null&apos;)&quot;)){
	vars.put(&quot;EC_AnchorFacility&quot;,&quot;and afdetail.facilityNameInitCap is null&quot;);		
} else if(!vars.get(&quot;anch&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;EC_AnchorFacility&quot;,&quot;and afdetail.facilityNameInitCap in ${anch}&quot;);		
}else{
	vars.put(&quot;EC_AnchorFacility&quot;,&quot;&quot;);
}

if(!vars.get(&quot;drgCode&quot;).contains(&quot;Skip&quot;)){
String neee;
ArrayList a= new ArrayList();
ArrayList b= new ArrayList();

     String code=vars.get(&quot;drgCode&quot;).replace(&quot;(&quot;,&quot;&quot;).replace(&quot;)&quot;,&quot;&quot;);
	log.info(&quot;Code is&quot;+code);
	String[] code1=code.split(&quot;,&quot;);
	log.info(&quot;Array Code is&quot;+code1);
	log.info(&quot;Array Code Value 1 is&quot;+code1[0]);
    
	String code4=vars.get(&quot;drgName&quot;);
	log.info(&quot;Name Code is&quot;+code4);
	String[] code5=code4.split(&quot;, &apos;&quot;);
	int n=code1.length-1;

	for(int i=0;i&lt;code1.length;i++){

         String newcode=code1[i];
       	String newname;

       	if(i==0){
       	newname=code5[i];	
       	}else{
           newname=&quot;&apos;&quot;+code5[i];}
           a.add(newcode);	
           b.add(newname);
           
           
            
           }
           log.info(&quot;a11 is&quot;+a);
           log.info(&quot;a22 is&quot;+b);
           String ww=a.toString().replace(&quot;[&quot;,&quot;&quot;).replace(&quot;]&quot;,&quot;&quot;);
             log.info(&quot;ww is&quot;+ww);
            String ww1=b.toString().replace(&quot;[&quot;,&quot;&quot;).replace(&quot;]&quot;,&quot;&quot;).replace(&quot;(&quot;,&quot;&quot;).replace(&quot;)&quot;,&quot;&quot;);
            log.info(&quot;ww is&quot;+ww1);
            neee=&quot;AND (d.drgCode in (&quot;+ww+&quot;) and  d.drgName in (&quot;+ww1+&quot;))&quot;;
     	  log.info(&quot;Nee is&quot;+neee);
           vars.put(&quot;EC_DRGCODE&quot;,neee);
		} else{
		vars.put(&quot;EC_DRGCODE&quot;,&quot;&quot;);
	}



</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="BPID Filter " enabled="true">
          <stringProp name="dataSource">MySQLQA</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT DISTINCT
    EpisodeInitiator_BPID
FROM
    (
    
    SELECT DISTINCT
        de.episodeInitiatorNameInitCap, de.bpid,
        CONCAT(de.episodeInitiatorNameInitCap,&apos; - &apos;, de.bpid) as &apos;EpisodeInitiator_BPID&apos;
    FROM
        warehouse.factPatientEpisode fp
LEFT JOIN warehouse.dimEpisodeInitiator de on fp.episodeInitiatorKey = de.episodeInitiatorSK 
LEFT JOIN warehouse.dimFacility df on fp.anchorAdmitFacilityKey = df.facilitySK 
LEFT JOIN warehouse.dimFacility pac on fp.anchorPostAcuteAdmitFacilityKey = pac.facilitySK 
LEFT JOIN warehouse.dimPatient dp on fp.patientKey = dp.patientSK 
LEFT JOIN warehouse.dimDate dt ON fp.anchorAdmitDateKey = dt.dateSK
LEFT JOIN warehouse.dimLookup dlk on dp.totalRiskScore = dlk.lookupName 
LEFT JOIN warehouse.dimDRG d on fp.currDrgKey = d.drgSK 
LEFT JOIN warehouse.dimRegionMarket rm on rm.rgSK = fp.rgRemKey 
LEFT JOIN warehouse.dimRegionMarket prm on prm.rgSK = fp.rgPartnerKey 
LEFT JOIN warehouse.dimPhysician dpy on fp.physicianKey = dpy.physicianSK
   LEFT JOIN
  (SELECT f.facilitySK, f.ccn,f.facilityName, 
    CASE  WHEN df_claims.facilityNameInitCap IS NULL THEN f.facilityNameInitCap
       ELSE df_claims.facilityNameInitCap
    END facilityNameInitCap,f.sourceFacilityKey, f.dwhSource            
  FROM warehouse.dimFacility f
  LEFT OUTER JOIN 
   (SELECT * FROM warehouse.dimFacility
   WHERE dwhSource = &apos;Claims&apos;) AS df_claims ON f.ccn = df_claims.ccn AND f.dwhSource IN (&apos;EC&apos; , &apos;ZeroKey&apos;)
  ) anc ON fp.anchorAdmitFacilityKey = anc.facilitySK
 LEFT JOIN warehouse.dimFacility afdetail ON anc.sourceFacilityKey = afdetail.facilitySK and afdetail.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;)
		    INNER JOIN (
		SELECT  tabUserSecurityBPID.bpid FROM  warehouse.tabUserSecurityBPID
		WHERE  username = ${userName} GROUP BY bpid) tbsBPID ON de.BPID = tbsBPID.bpid
    WHERE
        fp.bundleRisk = 1
            AND fp.episodeCountReport = 1
            AND de.bpid NOT LIKE &apos;%DEMO%&apos;
            and dlk.lookupCategory = &apos;patientRisk&apos;
            AND anc.dwhSource IN (&apos;EC&apos; , &apos;ZeroKey&apos;)
            AND fp.anchorAdmitDateKey &gt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;) 
		  AND fp.anchorAdmitDateKey &lt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;BPCIAStartDate&apos;)
     --       AND dt.calendarDate BETWEEN DATE_SUB(NOW(), INTERVAL ${time_range} MONTH) AND NOW()
			
--				${EC_BPID}
   				${EC_AnchorFacility}
	           	${EC_CCN}
				${EC_BUNDLE} 
				${EC_R_REGION} 
				${EC_R_MARKET}
				${EC_Query_REGION}
				${EC_Query_MARKET}
				${EC_PARTICIPANTNAME}  
				${EC_DRGCODE} 
				${EC_PHY_NPI} 
				${EC_Model}
				${EC_AnchorFacility}
			) a
ORDER BY a.episodeInitiatorNameInitCap , a.bpid;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">EpisodeInitiator_BPID</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Facility Name CCN" enabled="true">
          <stringProp name="dataSource">MySQLQA</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT DISTINCT
    AnchorFacility_CCN
FROM
    (
    
  -- EC  
    SELECT DISTINCT
         anc.facilityNameInitCap, anc.ccn,
         CONCAT(anc.facilityNameInitCap,&apos; - &apos;, anc.ccn) as &apos;AnchorFacility_CCN&apos;
    FROM
        warehouse.factPatientEpisode fp
LEFT JOIN warehouse.dimEpisodeInitiator de on fp.episodeInitiatorKey = de.episodeInitiatorSK 
LEFT JOIN warehouse.dimFacility df on fp.anchorAdmitFacilityKey = df.facilitySK 
LEFT JOIN warehouse.dimFacility pac on fp.anchorPostAcuteAdmitFacilityKey = pac.facilitySK 
LEFT JOIN warehouse.dimPatient dp on fp.patientKey = dp.patientSK 
LEFT JOIN warehouse.dimDate dt ON fp.anchorAdmitDateKey = dt.dateSK
LEFT JOIN warehouse.dimLookup dlk on dp.totalRiskScore = dlk.lookupName 
LEFT JOIN warehouse.dimDRG d on fp.currDrgKey = d.drgSK 
LEFT JOIN warehouse.dimRegionMarket rm on rm.rgSK = fp.rgRemKey 
LEFT JOIN warehouse.dimRegionMarket prm on prm.rgSK = fp.rgPartnerKey 
LEFT JOIN warehouse.dimPhysician dpy on fp.physicianKey = dpy.physicianSK
   LEFT JOIN
  (SELECT f.facilitySK, f.ccn,f.facilityName, 
    CASE  WHEN df_claims.facilityNameInitCap IS NULL THEN f.facilityNameInitCap
       ELSE df_claims.facilityNameInitCap
    END facilityNameInitCap,f.sourceFacilityKey, f.dwhSource            
  FROM warehouse.dimFacility f
  LEFT OUTER JOIN 
   (SELECT * FROM warehouse.dimFacility
   WHERE dwhSource = &apos;Claims&apos;) AS df_claims ON f.ccn = df_claims.ccn AND f.dwhSource IN (&apos;EC&apos; , &apos;ZeroKey&apos;)
  ) anc ON fp.anchorAdmitFacilityKey = anc.facilitySK
 LEFT JOIN warehouse.dimFacility afdetail ON anc.sourceFacilityKey = afdetail.facilitySK and afdetail.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;)
    INNER JOIN (
		SELECT  tabUserSecurityBPID.bpid FROM  warehouse.tabUserSecurityBPID
		WHERE  username = ${userName} GROUP BY bpid) tbsBPID ON de.BPID = tbsBPID.bpid
	INNER JOIN (
		SELECT  tabUserSecurityCCN.ccn FROM  warehouse.tabUserSecurityCCN
		WHERE  username = ${userName} GROUP BY ccn) tbsCCN on anc.ccn=tbsCCN.ccn
	INNER JOIN(    
        SELECT tabUserSecurityFacilityKey.facilitykey FROM warehouse.tabUserSecurityFacilityKey 
        WHERE username = ${userName} GROUP BY facilitykey
        )tbsFacilityKey on anc.sourceFacilityKey=tbsFacilityKey.facilitykey 
    WHERE
        fp.bundleRisk = 1
            AND fp.episodeCountReport = 1
            AND de.bpid NOT LIKE &apos;%DEMO%&apos;
            and dlk.lookupCategory = &apos;patientRisk&apos; 
            AND anc.dwhSource IN (&apos;EC&apos; , &apos;ZeroKey&apos;)
            AND fp.anchorAdmitDateKey &gt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;) 
              AND fp.anchorAdmitDateKey &lt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;BPCIAStartDate&apos;)
            -- AND dt.calendarDate BETWEEN DATE_SUB(NOW(), INTERVAL ${time_range} MONTH) AND NOW()
			-- AND e.bpid = @test_bpid
	            	${EC_BPID}
--		          ${EC_CCN}
				${EC_BUNDLE} 
				${EC_R_REGION} 
				${EC_R_MARKET} 
				${EC_Query_REGION}
				${EC_Query_MARKET} 
				${EC_PARTICIPANTNAME}  
				${EC_DRGCODE} 
				${EC_PHY_NPI} 
				${EC_Model}
				${EC_AnchorFacility}
				) a
ORDER BY a.facilityNameInitCap, a.ccn;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">AnchorFacility_CCN</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="BundleName" enabled="true">
          <stringProp name="dataSource">MySQLQA</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT DISTINCT
    a.bundleName
FROM
    (
    
  -- EC  
    SELECT DISTINCT
         d.bundleName
    FROM
        warehouse.factPatientEpisode fp
LEFT JOIN warehouse.dimEpisodeInitiator de on fp.episodeInitiatorKey = de.episodeInitiatorSK 
LEFT JOIN warehouse.dimFacility df on fp.anchorAdmitFacilityKey = df.facilitySK 
LEFT JOIN warehouse.dimFacility pac on fp.anchorPostAcuteAdmitFacilityKey = pac.facilitySK 
LEFT JOIN warehouse.dimPatient dp on fp.patientKey = dp.patientSK 
LEFT JOIN warehouse.dimDate dt ON fp.anchorAdmitDateKey = dt.dateSK
LEFT JOIN warehouse.dimLookup dlk on dp.totalRiskScore = dlk.lookupName 
LEFT JOIN warehouse.dimDRG d on fp.currDrgKey = d.drgSK 
LEFT JOIN warehouse.dimRegionMarket rm on rm.rgSK = fp.rgRemKey 
LEFT JOIN warehouse.dimRegionMarket prm on prm.rgSK = fp.rgPartnerKey 
LEFT JOIN warehouse.dimPhysician dpy on fp.physicianKey = dpy.physicianSK
   LEFT JOIN
  (SELECT f.facilitySK, f.ccn,f.facilityName, 
    CASE  WHEN df_claims.facilityNameInitCap IS NULL THEN f.facilityNameInitCap
       ELSE df_claims.facilityNameInitCap
    END facilityNameInitCap,f.sourceFacilityKey, f.dwhSource            
  FROM warehouse.dimFacility f
  LEFT OUTER JOIN 
   (SELECT * FROM warehouse.dimFacility
   WHERE dwhSource = &apos;Claims&apos;) AS df_claims ON f.ccn = df_claims.ccn AND f.dwhSource IN (&apos;EC&apos; , &apos;ZeroKey&apos;)
  ) anc ON fp.anchorAdmitFacilityKey = anc.facilitySK
 LEFT JOIN warehouse.dimFacility afdetail ON anc.sourceFacilityKey = afdetail.facilitySK and afdetail.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;)
    INNER JOIN (
		SELECT  tabUserSecurityBPID.bpid FROM  warehouse.tabUserSecurityBPID
		WHERE  username = ${userName} GROUP BY bpid) tbsBPID ON de.BPID = tbsBPID.bpid
	INNER JOIN (
		SELECT  tabUserSecurityCCN.ccn FROM  warehouse.tabUserSecurityCCN
		WHERE  username = ${userName} GROUP BY ccn) tbsCCN on anc.ccn=tbsCCN.ccn
	INNER JOIN(    
        SELECT tabUserSecurityFacilityKey.facilitykey FROM warehouse.tabUserSecurityFacilityKey 
        WHERE username = ${userName} GROUP BY facilitykey
        )tbsFacilityKey on anc.sourceFacilityKey=tbsFacilityKey.facilitykey 
    WHERE
        fp.bundleRisk = 1
            AND fp.episodeCountReport = 1
            AND de.bpid NOT LIKE &apos;%DEMO%&apos;
            and dlk.lookupCategory = &apos;patientRisk&apos;
            AND anc.dwhSource IN (&apos;EC&apos; , &apos;ZeroKey&apos;)
            AND fp.anchorAdmitDateKey &gt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;) 
              AND fp.anchorAdmitDateKey &lt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;BPCIAStartDate&apos;)
            -- AND dt.calendarDate BETWEEN DATE_SUB(NOW(), INTERVAL ${time_range} MONTH) AND NOW()
			-- AND e.bpid = @test_bpid
            		${EC_BPID}
            		${EC_AnchorFacility}
	           	${EC_CCN}
--				${EC_BUNDLE} 
				${EC_R_REGION} 
				${EC_R_MARKET} 
				${EC_Query_REGION}
				${EC_Query_MARKET} 
				${EC_PARTICIPANTNAME}  
				${EC_DRGCODE} 
				${EC_PHY_NPI} 
				${EC_Model}
				${EC_AnchorFacility}
			    ) a
ORDER BY a.bundleName;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">bundleName</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Partner Region Market" enabled="true">
          <stringProp name="dataSource">MySQLQA</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT DISTINCT
    a.PartnerRegionMarket
FROM
    (
    
  -- EC  
    SELECT DISTINCT
         prm.region, prm.market,de.participantShortName,
         CONCAT(de.participantShortName,&apos; &apos;,prm.region,&apos; - &apos;, prm.market) as &apos;PartnerRegionMarket&apos;
    FROM
        warehouse.factPatientEpisode fp
    LEFT JOIN warehouse.dimEpisodeInitiator de on fp.episodeInitiatorKey = de.episodeInitiatorSK 
LEFT JOIN warehouse.dimFacility df on fp.anchorAdmitFacilityKey = df.facilitySK 
LEFT JOIN warehouse.dimFacility pac on fp.anchorPostAcuteAdmitFacilityKey = pac.facilitySK 
LEFT JOIN warehouse.dimPatient dp on fp.patientKey = dp.patientSK 
LEFT JOIN warehouse.dimDate dt ON fp.anchorAdmitDateKey = dt.dateSK
LEFT JOIN warehouse.dimLookup dlk on dp.totalRiskScore = dlk.lookupName 
LEFT JOIN warehouse.dimDRG d on fp.currDrgKey = d.drgSK 
LEFT JOIN warehouse.dimRegionMarket rm on rm.rgSK = fp.rgRemKey 
LEFT JOIN warehouse.dimRegionMarket prm on prm.rgSK = fp.rgPartnerKey 
LEFT JOIN warehouse.dimPhysician dpy on fp.physicianKey = dpy.physicianSK
    LEFT JOIN
  (SELECT f.facilitySK, f.ccn,f.facilityName, 
    CASE  WHEN df_claims.facilityNameInitCap IS NULL THEN f.facilityNameInitCap
       ELSE df_claims.facilityNameInitCap
    END facilityNameInitCap,f.sourceFacilityKey, f.dwhSource            
  FROM warehouse.dimFacility f
  LEFT OUTER JOIN 
   (SELECT * FROM warehouse.dimFacility
   WHERE dwhSource = &apos;Claims&apos;) AS df_claims ON f.ccn = df_claims.ccn AND f.dwhSource IN (&apos;EC&apos; , &apos;ZeroKey&apos;)
  ) anc ON fp.anchorAdmitFacilityKey = anc.facilitySK
 LEFT JOIN warehouse.dimFacility afdetail ON anc.sourceFacilityKey = afdetail.facilitySK and afdetail.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;)
    INNER JOIN (
		SELECT  tabUserSecurityBPID.bpid FROM  warehouse.tabUserSecurityBPID
		WHERE  username = ${userName} GROUP BY bpid) tbsBPID ON de.BPID = tbsBPID.bpid
	INNER JOIN (
		SELECT  tabUserSecurityCCN.ccn FROM  warehouse.tabUserSecurityCCN
		WHERE  username = ${userName} GROUP BY ccn) tbsCCN on anc.ccn=tbsCCN.ccn
	INNER JOIN(    
        SELECT tabUserSecurityFacilityKey.facilitykey FROM warehouse.tabUserSecurityFacilityKey 
        WHERE username = ${userName} GROUP BY facilitykey
        )tbsFacilityKey on anc.sourceFacilityKey=tbsFacilityKey.facilitykey 
    WHERE
        fp.bundleRisk = 1
            AND fp.episodeCountReport = 1
            AND de.bpid NOT LIKE &apos;%DEMO%&apos;
            and dlk.lookupCategory = &apos;patientRisk&apos;
            AND anc.dwhSource IN (&apos;EC&apos; , &apos;ZeroKey&apos;)
            AND fp.anchorAdmitDateKey &gt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;) 
              AND fp.anchorAdmitDateKey &lt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;BPCIAStartDate&apos;)
            -- AND dt.calendarDate BETWEEN DATE_SUB(NOW(), INTERVAL @test_time_rage MONTH) AND NOW()
            -- AND de.bpid = @test_bpid
            	${EC_BPID}
            	${EC_AnchorFacility}
	            ${EC_CCN}
				${EC_BUNDLE} 
				${EC_R_REGION} 
				${EC_R_MARKET} 
--				${EC_REGION} 
--				${EC_MARKET} 
				${EC_PARTICIPANTNAME}  
				${EC_DRGCODE} 
				${EC_PHY_NPI} 
				${EC_Model}
				${EC_AnchorFacility} 
				) a
ORDER BY a.PartnerRegionMarket;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PartnerRegionMarket</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Remedy Region Market " enabled="true">
          <stringProp name="dataSource">MySQLQA</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT DISTINCT
    a.RRegionMarket
FROM
    (
    
  -- EC  
    SELECT DISTINCT
        rm.region, rm.market,
        CONCAT(&apos;Remedy &apos;,rm.region,&apos; - &apos;, rm.market) as &apos;RRegionMarket&apos;
    FROM
        warehouse.factPatientEpisode fp
    LEFT JOIN warehouse.dimEpisodeInitiator de on fp.episodeInitiatorKey = de.episodeInitiatorSK 
LEFT JOIN warehouse.dimFacility df on fp.anchorAdmitFacilityKey = df.facilitySK 
LEFT JOIN warehouse.dimFacility pac on fp.anchorPostAcuteAdmitFacilityKey = pac.facilitySK 
LEFT JOIN warehouse.dimPatient dp on fp.patientKey = dp.patientSK 
LEFT JOIN warehouse.dimDate dt ON fp.anchorAdmitDateKey = dt.dateSK
LEFT JOIN warehouse.dimLookup dlk on dp.totalRiskScore = dlk.lookupName 
LEFT JOIN warehouse.dimDRG d on fp.currDrgKey = d.drgSK 
LEFT JOIN warehouse.dimRegionMarket rm on rm.rgSK = fp.rgRemKey 
LEFT JOIN warehouse.dimRegionMarket prm on prm.rgSK = fp.rgPartnerKey 
LEFT JOIN warehouse.dimPhysician dpy on fp.physicianKey = dpy.physicianSK
    LEFT JOIN
  (SELECT f.facilitySK, f.ccn,f.facilityName, 
    CASE  WHEN df_claims.facilityNameInitCap IS NULL THEN f.facilityNameInitCap
       ELSE df_claims.facilityNameInitCap
    END facilityNameInitCap,f.sourceFacilityKey, f.dwhSource            
  FROM warehouse.dimFacility f
  LEFT OUTER JOIN 
   (SELECT * FROM warehouse.dimFacility
   WHERE dwhSource = &apos;Claims&apos;) AS df_claims ON f.ccn = df_claims.ccn AND f.dwhSource IN (&apos;EC&apos; , &apos;ZeroKey&apos;)
  ) anc ON fp.anchorAdmitFacilityKey = anc.facilitySK
 LEFT JOIN warehouse.dimFacility afdetail ON anc.sourceFacilityKey = afdetail.facilitySK and afdetail.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;)
    INNER JOIN (
		SELECT  tabUserSecurityBPID.bpid FROM  warehouse.tabUserSecurityBPID
		WHERE  username = ${userName} GROUP BY bpid) tbsBPID ON de.BPID = tbsBPID.bpid
	INNER JOIN (
		SELECT  tabUserSecurityCCN.ccn FROM  warehouse.tabUserSecurityCCN
		WHERE  username = ${userName} GROUP BY ccn) tbsCCN on anc.ccn=tbsCCN.ccn
	INNER JOIN(    
        SELECT tabUserSecurityFacilityKey.facilitykey FROM warehouse.tabUserSecurityFacilityKey 
        WHERE username = ${userName} GROUP BY facilitykey
        )tbsFacilityKey on anc.sourceFacilityKey=tbsFacilityKey.facilitykey 
    WHERE
        fp.bundleRisk = 1
            AND fp.episodeCountReport = 1
            AND de.bpid NOT LIKE &apos;%DEMO%&apos;
            and dlk.lookupCategory = &apos;patientRisk&apos;
            AND anc.dwhSource IN (&apos;EC&apos; , &apos;ZeroKey&apos;)
            AND fp.anchorAdmitDateKey &gt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;) 
              AND fp.anchorAdmitDateKey &lt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;BPCIAStartDate&apos;)
            -- AND dt.calendarDate BETWEEN DATE_SUB(NOW(), INTERVAL ${time_range} MONTH) AND NOW()
			-- AND e.bpid = @test_bpid
            		${EC_BPID}
            		${EC_AnchorFacility}
	             	${EC_CCN}
				${EC_BUNDLE} 
--				${EC_R_REGION} 
--				${EC_R_MARKET} 
				${EC_Query_REGION}
				${EC_Query_MARKET} 
				${EC_PARTICIPANTNAME}  
				${EC_DRGCODE} 
				${EC_PHY_NPI} 
				${EC_Model}
				${EC_AnchorFacility}
				) a
ORDER BY a.RRegionMarket;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">RRegionMarket</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Participant" enabled="true">
          <stringProp name="dataSource">MySQLQA</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT DISTINCT
    a.participant
FROM
    (
    
  -- EC  
    SELECT DISTINCT
		de.participantName as participant
    FROM
        warehouse.factPatientEpisode fp
    LEFT JOIN warehouse.dimEpisodeInitiator de on fp.episodeInitiatorKey = de.episodeInitiatorSK 
LEFT JOIN warehouse.dimFacility df on fp.anchorAdmitFacilityKey = df.facilitySK 
LEFT JOIN warehouse.dimFacility pac on fp.anchorPostAcuteAdmitFacilityKey = pac.facilitySK 
LEFT JOIN warehouse.dimPatient dp on fp.patientKey = dp.patientSK 
LEFT JOIN warehouse.dimDate dt ON fp.anchorAdmitDateKey = dt.dateSK
LEFT JOIN warehouse.dimLookup dlk on dp.totalRiskScore = dlk.lookupName 
LEFT JOIN warehouse.dimDRG d on fp.currDrgKey = d.drgSK 
LEFT JOIN warehouse.dimRegionMarket rm on rm.rgSK = fp.rgRemKey 
LEFT JOIN warehouse.dimRegionMarket prm on prm.rgSK = fp.rgPartnerKey 
LEFT JOIN warehouse.dimPhysician dpy on fp.physicianKey = dpy.physicianSK
		LEFT JOIN
  (SELECT f.facilitySK, f.ccn,f.facilityName, 
    CASE  WHEN df_claims.facilityNameInitCap IS NULL THEN f.facilityNameInitCap
       ELSE df_claims.facilityNameInitCap
    END facilityNameInitCap,f.sourceFacilityKey, f.dwhSource            
  FROM warehouse.dimFacility f
  LEFT OUTER JOIN 
   (SELECT * FROM warehouse.dimFacility
   WHERE dwhSource = &apos;Claims&apos;) AS df_claims ON f.ccn = df_claims.ccn AND f.dwhSource IN (&apos;EC&apos; , &apos;ZeroKey&apos;)
  ) anc ON fp.anchorAdmitFacilityKey = anc.facilitySK
 LEFT JOIN warehouse.dimFacility afdetail ON anc.sourceFacilityKey = afdetail.facilitySK and afdetail.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;)
    INNER JOIN (
		SELECT  tabUserSecurityBPID.bpid FROM  warehouse.tabUserSecurityBPID
		WHERE  username = ${userName} GROUP BY bpid) tbsBPID ON de.BPID = tbsBPID.bpid
	INNER JOIN (
		SELECT  tabUserSecurityCCN.ccn FROM  warehouse.tabUserSecurityCCN
		WHERE  username = ${userName} GROUP BY ccn) tbsCCN on anc.ccn=tbsCCN.ccn
	INNER JOIN(    
        SELECT tabUserSecurityFacilityKey.facilitykey FROM warehouse.tabUserSecurityFacilityKey 
        WHERE username =${userName} GROUP BY facilitykey
        )tbsFacilityKey on anc.sourceFacilityKey=tbsFacilityKey.facilitykey 
    WHERE
        fp.bundleRisk = 1
            AND fp.episodeCountReport = 1
            AND de.bpid NOT LIKE &apos;%DEMO%&apos;
            and dlk.lookupCategory = &apos;patientRisk&apos;
            AND anc.dwhSource IN (&apos;EC&apos; , &apos;ZeroKey&apos;)
            AND fp.anchorAdmitDateKey &gt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;) 
              AND fp.anchorAdmitDateKey &lt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;BPCIAStartDate&apos;)
            -- AND dt.calendarDate BETWEEN DATE_SUB(NOW(), INTERVAL ${time_range} MONTH) AND NOW()
			-- AND e.bpid = @test_bpid
            		${EC_BPID}
            		${EC_AnchorFacility}
	            	${EC_CCN}
				${EC_BUNDLE} 
				${EC_R_REGION} 
				${EC_R_MARKET} 
				${EC_Query_REGION}
				${EC_Query_MARKET} 
--				${EC_PARTICIPANTNAME}  
				${EC_DRGCODE} 
				${EC_PHY_NPI} 
				${EC_Model}
				${EC_AnchorFacility}
				) a
ORDER BY a.participant;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">participantName</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DRG" enabled="true">
          <stringProp name="dataSource">MySQLQA</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT DISTINCT
    a.DRG_Fracture
FROM
    (
    
  -- EC  
    SELECT DISTINCT
--     CONCAT(d.drgName ,&apos; (&apos;,d.drgCode,&apos;)&apos;) as &apos;DRG_Fracture&apos;,
     CONCAT(d.drgcode, &apos; - &apos;, d.drgName) as &apos;DRG_Fracture&apos;,
     case when d.drgCode is null then null else d.drgCode end as drgCode
    FROM
        warehouse.factPatientEpisode fp
    LEFT JOIN warehouse.dimEpisodeInitiator de on fp.episodeInitiatorKey = de.episodeInitiatorSK 
LEFT JOIN warehouse.dimFacility df on fp.anchorAdmitFacilityKey = df.facilitySK 
LEFT JOIN warehouse.dimFacility pac on fp.anchorPostAcuteAdmitFacilityKey = pac.facilitySK 
LEFT JOIN warehouse.dimPatient dp on fp.patientKey = dp.patientSK 
LEFT JOIN warehouse.dimDate dt ON fp.anchorAdmitDateKey = dt.dateSK
LEFT JOIN warehouse.dimLookup dlk on dp.totalRiskScore = dlk.lookupName 
LEFT JOIN warehouse.dimDRG d on fp.currDrgKey = d.drgSK 
LEFT JOIN warehouse.dimRegionMarket rm on rm.rgSK = fp.rgRemKey 
LEFT JOIN warehouse.dimRegionMarket prm on prm.rgSK = fp.rgPartnerKey 
LEFT JOIN warehouse.dimPhysician dpy on fp.physicianKey = dpy.physicianSK
    LEFT JOIN
  (SELECT f.facilitySK, f.ccn,f.facilityName, 
    CASE  WHEN df_claims.facilityNameInitCap IS NULL THEN f.facilityNameInitCap
       ELSE df_claims.facilityNameInitCap
    END facilityNameInitCap,f.sourceFacilityKey, f.dwhSource            
  FROM warehouse.dimFacility f
  LEFT OUTER JOIN 
   (SELECT * FROM warehouse.dimFacility
   WHERE dwhSource = &apos;Claims&apos;) AS df_claims ON f.ccn = df_claims.ccn AND f.dwhSource IN (&apos;EC&apos; , &apos;ZeroKey&apos;)
  ) anc ON fp.anchorAdmitFacilityKey = anc.facilitySK
 LEFT JOIN warehouse.dimFacility afdetail ON anc.sourceFacilityKey = afdetail.facilitySK and afdetail.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;)
    INNER JOIN (
		SELECT  tabUserSecurityBPID.bpid FROM  warehouse.tabUserSecurityBPID
		WHERE  username = ${userName} GROUP BY bpid) tbsBPID ON de.BPID = tbsBPID.bpid
	INNER JOIN (
		SELECT  tabUserSecurityCCN.ccn FROM  warehouse.tabUserSecurityCCN
		WHERE  username = ${userName} GROUP BY ccn) tbsCCN on anc.ccn=tbsCCN.ccn
	INNER JOIN(    
        SELECT tabUserSecurityFacilityKey.facilitykey FROM warehouse.tabUserSecurityFacilityKey 
        WHERE username = ${userName} GROUP BY facilitykey
        )tbsFacilityKey on anc.sourceFacilityKey=tbsFacilityKey.facilitykey 
    WHERE
        fp.bundleRisk = 1
            AND fp.episodeCountReport = 1
            AND de.bpid NOT LIKE &apos;%DEMO%&apos;
            and dlk.lookupCategory = &apos;patientRisk&apos;
            AND anc.dwhSource IN (&apos;EC&apos; , &apos;ZeroKey&apos;)
            AND fp.anchorAdmitDateKey &gt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;) 
              AND fp.anchorAdmitDateKey &lt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;BPCIAStartDate&apos;)
            -- AND dt.calendarDate BETWEEN DATE_SUB(NOW(), INTERVAL ${time_range} MONTH) AND NOW()
			-- AND e.bpid = @test_bpid
            		${EC_BPID}
            		${EC_AnchorFacility}
	            	${EC_CCN}
				${EC_BUNDLE} 
				${EC_R_REGION} 
				${EC_R_MARKET} 
				${EC_Query_REGION}
				${EC_Query_MARKET}
				${EC_PARTICIPANTNAME}  
--				${EC_DRGCODE} 
				${EC_PHY_NPI} 
				${EC_Model}
				${EC_AnchorFacility}
) a
ORDER BY a.DRG_Fracture;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">DRG_Fracture</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Physician - NPI Filter Validation" enabled="true">
          <stringProp name="dataSource">MySQLQA</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT DISTINCT
 --   a.physicianNameInitCap, a.npi, a.Physician_NPI
 a.Physician_NPI
FROM
    (
    
  -- EC  
    SELECT DISTINCT
			dpy.physicianNameInitCap, dpy.npi,
			CONCAT(dpy.physicianNameInitCap,&apos; - &apos;, dpy.npi) as &apos;Physician_NPI&apos;
    FROM
        warehouse.factPatientEpisode fp
    LEFT JOIN warehouse.dimEpisodeInitiator de on fp.episodeInitiatorKey = de.episodeInitiatorSK 
LEFT JOIN warehouse.dimFacility df on fp.anchorAdmitFacilityKey = df.facilitySK 
LEFT JOIN warehouse.dimFacility pac on fp.anchorPostAcuteAdmitFacilityKey = pac.facilitySK 
LEFT JOIN warehouse.dimPatient dp on fp.patientKey = dp.patientSK 
LEFT JOIN warehouse.dimDate dt ON fp.anchorAdmitDateKey = dt.dateSK
LEFT JOIN warehouse.dimLookup dlk on dp.totalRiskScore = dlk.lookupName 
LEFT JOIN warehouse.dimDRG d on fp.currDrgKey = d.drgSK 
LEFT JOIN warehouse.dimRegionMarket rm on rm.rgSK = fp.rgRemKey 
LEFT JOIN warehouse.dimRegionMarket prm on prm.rgSK = fp.rgPartnerKey 
LEFT JOIN warehouse.dimPhysician dpy on fp.physicianKey = dpy.physicianSK
    LEFT JOIN
  (SELECT f.facilitySK, f.ccn,f.facilityName, 
    CASE  WHEN df_claims.facilityNameInitCap IS NULL THEN f.facilityNameInitCap
       ELSE df_claims.facilityNameInitCap
    END facilityNameInitCap,f.sourceFacilityKey, f.dwhSource            
  FROM warehouse.dimFacility f
  LEFT OUTER JOIN 
   (SELECT * FROM warehouse.dimFacility
   WHERE dwhSource = &apos;Claims&apos;) AS df_claims ON f.ccn = df_claims.ccn AND f.dwhSource IN (&apos;EC&apos; , &apos;ZeroKey&apos;)
  ) anc ON fp.anchorAdmitFacilityKey = anc.facilitySK
 LEFT JOIN warehouse.dimFacility afdetail ON anc.sourceFacilityKey = afdetail.facilitySK and afdetail.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;)
    INNER JOIN (
		SELECT  tabUserSecurityBPID.bpid FROM  warehouse.tabUserSecurityBPID
		WHERE  username = ${userName} GROUP BY bpid) tbsBPID ON de.BPID = tbsBPID.bpid
	INNER JOIN (
		SELECT  tabUserSecurityCCN.ccn FROM  warehouse.tabUserSecurityCCN
		WHERE  username = ${userName} GROUP BY ccn) tbsCCN on anc.ccn=tbsCCN.ccn
	INNER JOIN(    
        SELECT tabUserSecurityFacilityKey.facilitykey FROM warehouse.tabUserSecurityFacilityKey 
        WHERE username = ${userName} GROUP BY facilitykey
        )tbsFacilityKey on anc.sourceFacilityKey=tbsFacilityKey.facilitykey 
    WHERE
        fp.bundleRisk = 1
            AND fp.episodeCountReport = 1
            AND de.bpid NOT LIKE &apos;%DEMO%&apos;
            and dlk.lookupCategory = &apos;patientRisk&apos;
            AND anc.dwhSource IN (&apos;EC&apos; , &apos;ZeroKey&apos;)
            AND fp.anchorAdmitDateKey &gt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;) 
              AND fp.anchorAdmitDateKey &lt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;BPCIAStartDate&apos;)
            -- AND dt.calendarDate BETWEEN DATE_SUB(NOW(), INTERVAL ${time_range} MONTH) AND NOW()
			-- AND e.bpid = @test_bpid
            		${EC_BPID}
            		${EC_AnchorFacility}
	            	${EC_CCN}
				${EC_BUNDLE} 
				${EC_R_REGION} 
				${EC_R_MARKET} 
				${EC_Query_REGION}
				${EC_Query_MARKET} 
				${EC_PARTICIPANTNAME}  
				${EC_DRGCODE} 
--				${EC_PHY_NPI} 
				${EC_Model}
				${EC_AnchorFacility}
) a
ORDER BY a.Physician_NPI;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">Physician_NPI</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="MODEL Filter Validation" enabled="true">
          <stringProp name="dataSource">MySQLQA</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT DISTINCT
    a.model
FROM
    (
    
  -- EC  
    SELECT DISTINCT
			fp.model
    FROM
        warehouse.factPatientEpisode fp
LEFT JOIN warehouse.dimEpisodeInitiator de on fp.episodeInitiatorKey = de.episodeInitiatorSK 
LEFT JOIN warehouse.dimFacility df on fp.anchorAdmitFacilityKey = df.facilitySK 
LEFT JOIN warehouse.dimFacility pac on fp.anchorPostAcuteAdmitFacilityKey = pac.facilitySK 
LEFT JOIN warehouse.dimPatient dp on fp.patientKey = dp.patientSK 
LEFT JOIN warehouse.dimDate dt ON fp.anchorAdmitDateKey = dt.dateSK
LEFT JOIN warehouse.dimLookup dlk on dp.totalRiskScore = dlk.lookupName 
LEFT JOIN warehouse.dimDRG d on fp.currDrgKey = d.drgSK 
LEFT JOIN warehouse.dimRegionMarket rm on rm.rgSK = fp.rgRemKey 
LEFT JOIN warehouse.dimRegionMarket prm on prm.rgSK = fp.rgPartnerKey 
LEFT JOIN warehouse.dimPhysician dpy on fp.physicianKey = dpy.physicianSK 
    LEFT JOIN
  (SELECT f.facilitySK, f.ccn,f.facilityName, 
    CASE  WHEN df_claims.facilityNameInitCap IS NULL THEN f.facilityNameInitCap
       ELSE df_claims.facilityNameInitCap
    END facilityNameInitCap,f.sourceFacilityKey, f.dwhSource            
  FROM warehouse.dimFacility f
  LEFT OUTER JOIN 
   (SELECT * FROM warehouse.dimFacility
   WHERE dwhSource = &apos;Claims&apos;) AS df_claims ON f.ccn = df_claims.ccn AND f.dwhSource IN (&apos;EC&apos; , &apos;ZeroKey&apos;)
  ) anc ON fp.anchorAdmitFacilityKey = anc.facilitySK
 LEFT JOIN warehouse.dimFacility afdetail ON anc.sourceFacilityKey = afdetail.facilitySK and afdetail.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;)
    INNER JOIN (
		SELECT  tabUserSecurityBPID.bpid FROM  warehouse.tabUserSecurityBPID
		WHERE  username = ${userName} GROUP BY bpid) tbsBPID ON de.BPID = tbsBPID.bpid
	INNER JOIN (
		SELECT  tabUserSecurityCCN.ccn FROM  warehouse.tabUserSecurityCCN
		WHERE  username = ${userName} GROUP BY ccn) tbsCCN on anc.ccn=tbsCCN.ccn
	INNER JOIN(    
        SELECT tabUserSecurityFacilityKey.facilitykey FROM warehouse.tabUserSecurityFacilityKey 
        WHERE username = ${userName} GROUP BY facilitykey
        )tbsFacilityKey on anc.sourceFacilityKey=tbsFacilityKey.facilitykey 
    WHERE
        fp.bundleRisk = 1
            AND fp.episodeCountReport = 1
            AND de.bpid NOT LIKE &apos;%DEMO%&apos;
            and dlk.lookupCategory = &apos;patientRisk&apos;
            AND anc.dwhSource IN (&apos;EC&apos; , &apos;ZeroKey&apos;)
            AND fp.anchorAdmitDateKey &gt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;) 
              AND fp.anchorAdmitDateKey &lt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;BPCIAStartDate&apos;)
            -- AND dt.calendarDate BETWEEN DATE_SUB(NOW(), INTERVAL ${time_range} MONTH) AND NOW()
			-- AND e.bpid = @test_bpid
	            ${EC_BPID}
	            ${EC_AnchorFacility}
	            ${EC_CCN}
				${EC_BUNDLE} 
				${EC_R_REGION} 
				${EC_R_MARKET} 
				${EC_Query_REGION}
				${EC_Query_MARKET}
				${EC_PARTICIPANTNAME}  
				${EC_DRGCODE} 
				${EC_PHY_NPI} 
				${EC_AnchorFacility}
				) a
ORDER BY a.model;	</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">model</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Anchor Facility Details Filter Validation" enabled="true">
          <stringProp name="dataSource">MySQLQA</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query"> -- EC  
    SELECT DISTINCT
			afdetail.facilityNameInitCap
    FROM
        warehouse.factPatientEpisode fp
LEFT JOIN warehouse.dimEpisodeInitiator de on fp.episodeInitiatorKey = de.episodeInitiatorSK 
LEFT JOIN warehouse.dimFacility df on fp.anchorAdmitFacilityKey = df.facilitySK 
LEFT JOIN warehouse.dimFacility pac on fp.anchorPostAcuteAdmitFacilityKey = pac.facilitySK 
LEFT JOIN warehouse.dimPatient dp on fp.patientKey = dp.patientSK 
LEFT JOIN warehouse.dimDate dt ON fp.anchorAdmitDateKey = dt.dateSK
LEFT JOIN warehouse.dimLookup dlk on dp.totalRiskScore = dlk.lookupName 
LEFT JOIN warehouse.dimDRG d on fp.currDrgKey = d.drgSK 
LEFT JOIN warehouse.dimRegionMarket rm on rm.rgSK = fp.rgRemKey 
LEFT JOIN warehouse.dimRegionMarket prm on prm.rgSK = fp.rgPartnerKey 
LEFT JOIN warehouse.dimPhysician dpy on fp.physicianKey = dpy.physicianSK 
LEFT JOIN
  (SELECT f.facilitySK, f.ccn,f.facilityName, 
    CASE  WHEN df_claims.facilityNameInitCap IS NULL THEN f.facilityNameInitCap
       ELSE df_claims.facilityNameInitCap
    END facilityNameInitCap,f.sourceFacilityKey, f.dwhSource            
  FROM warehouse.dimFacility f
  LEFT OUTER JOIN 
   (SELECT * FROM warehouse.dimFacility
   WHERE dwhSource = &apos;Claims&apos;) AS df_claims ON f.ccn = df_claims.ccn AND f.dwhSource IN (&apos;EC&apos; , &apos;ZeroKey&apos;)
  ) anc ON fp.anchorAdmitFacilityKey = anc.facilitySK
 LEFT JOIN warehouse.dimFacility afdetail ON anc.sourceFacilityKey = afdetail.facilitySK and afdetail.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;)
    INNER JOIN (
		SELECT  tabUserSecurityBPID.bpid FROM  warehouse.tabUserSecurityBPID
		WHERE  username = ${userName} GROUP BY bpid) tbsBPID ON de.BPID = tbsBPID.bpid
	INNER JOIN (
		SELECT  tabUserSecurityCCN.ccn FROM  warehouse.tabUserSecurityCCN
		WHERE  username = ${userName} GROUP BY ccn) tbsCCN on anc.ccn=tbsCCN.ccn
	INNER JOIN(    
        SELECT tabUserSecurityFacilityKey.facilitykey FROM warehouse.tabUserSecurityFacilityKey 
        WHERE username = ${userName} GROUP BY facilitykey
        )tbsFacilityKey on anc.sourceFacilityKey=tbsFacilityKey.facilitykey 
    WHERE
        fp.bundleRisk = 1
            AND fp.episodeCountReport = 1
            AND de.bpid NOT LIKE &apos;%DEMO%&apos;
            and dlk.lookupCategory = &apos;patientRisk&apos;
            AND anc.dwhSource IN (&apos;EC&apos; , &apos;ZeroKey&apos;)
            AND fp.anchorAdmitDateKey &gt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;) 
              AND fp.anchorAdmitDateKey &lt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;BPCIAStartDate&apos;)
            -- AND dt.calendarDate BETWEEN DATE_SUB(NOW(), INTERVAL ${time_range} MONTH) AND NOW()
			-- AND e.bpid = @test_bpid
	            	${EC_BPID}
	            	${EC_AnchorFacility}
	            	${EC_CCN}
				${EC_BUNDLE} 
				${EC_R_REGION} 
				${EC_R_MARKET} 
				${EC_Query_REGION}
				${EC_Query_MARKET}
				${EC_PARTICIPANTNAME}  
				${EC_DRGCODE} 
				${EC_PHY_NPI} 
				${EC_Model}</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">facilityNameInitCap</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="OS Process Sampler" enabled="true">
          <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
          <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
          <stringProp name="SystemSampler.command">cmd.exe</stringProp>
          <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">/c</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">echo Printed</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SystemSampler.directory">${__BeanShell(import org.apache.jmeter.services.FileServer; FileServer.getFileServer().getBaseDir();)}${__BeanShell(File.separator,)}</stringProp>
        </SystemSampler>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import java.util.ArrayList;

ArrayList al_bpid = new ArrayList();
for(int i=1;i&lt;=Integer.parseInt(vars.get(&quot;EpisodeInitiator_BPID_#&quot;));i++){
al_bpid.add(vars.get(&quot;EpisodeInitiator_BPID_&quot;+i));
}
vars.put(&quot;value1&quot;,&quot;\&quot;&quot;+al_bpid.toString()+&quot;\&quot;&quot;);
System.out.println(&quot;BPID:&quot;+al_bpid.toString());

ArrayList al_facilityName = new ArrayList();
for(int i=1;i&lt;=Integer.parseInt(vars.get(&quot;AnchorFacility_CCN_#&quot;));i++){
al_facilityName.add(vars.get(&quot;AnchorFacility_CCN_&quot;+i));
}
vars.put(&quot;value2&quot;,&quot;\&quot;&quot;+al_facilityName.toString()+&quot;\&quot;&quot;);
System.out.println(&quot;AnchorFacility_CCN&quot;+al_facilityName);

ArrayList al_bundleName = new ArrayList();
for(int i=1;i&lt;=Integer.parseInt(vars.get(&quot;bundleName_#&quot;));i++){
al_bundleName.add(vars.get(&quot;bundleName_&quot;+i));
}
vars.put(&quot;value3&quot;,&quot;\&quot;&quot;+al_bundleName.toString()+&quot;\&quot;&quot;);
System.out.println(&quot;bundleName:&quot;+al_bundleName.toString());
ArrayList al_RRegionMarket = new ArrayList();

for(int i=1;i&lt;=Integer.parseInt(vars.get(&quot;RRegionMarket_#&quot;));i++){
al_RRegionMarket.add(vars.get(&quot;RRegionMarket_&quot;+i));
}
vars.put(&quot;value4&quot;,&quot;\&quot;&quot;+al_RRegionMarket.toString()+&quot;\&quot;&quot;);
System.out.println(&quot;RRegionMarket:&quot;+al_RRegionMarket.toString());

ArrayList al_PartnerRegionMarket = new ArrayList();
for(int i=1;i&lt;=Integer.parseInt(vars.get(&quot;PartnerRegionMarket_#&quot;));i++){
al_PartnerRegionMarket.add(vars.get(&quot;PartnerRegionMarket_&quot;+i));
}
vars.put(&quot;value5&quot;,&quot;\&quot;&quot;+al_PartnerRegionMarket.toString()+&quot;\&quot;&quot;);
System.out.println(&quot;Partner region:&quot;+al_PartnerRegionMarket.toString());

ArrayList al_participant = new ArrayList();
for(int i=1;i&lt;=Integer.parseInt(vars.get(&quot;participantName_#&quot;));i++){
al_participant.add(vars.get(&quot;participantName_&quot;+i));
}
vars.put(&quot;value6&quot;,&quot;\&quot;&quot;+al_participant.toString()+&quot;\&quot;&quot;);
System.out.println(&quot;Participant:&quot;+al_participant.toString());

ArrayList al_DRG_Fracture = new ArrayList();
for(int i=1;i&lt;=Integer.parseInt(vars.get(&quot;DRG_Fracture_#&quot;));i++){
al_DRG_Fracture.add(vars.get(&quot;DRG_Fracture_&quot;+i));
}
vars.put(&quot;value7&quot;,&quot;\&quot;&quot;+al_DRG_Fracture.toString()+&quot;\&quot;&quot;);
System.out.println(&quot;DRG_Fracture:&quot;+al_DRG_Fracture.toString());

ArrayList al_Physician_NPI = new ArrayList();
for(int i=1;i&lt;=Integer.parseInt(vars.get(&quot;Physician_NPI_#&quot;));i++){
al_Physician_NPI.add(vars.get(&quot;Physician_NPI_&quot;+i));
}
vars.put(&quot;value8&quot;,&quot;\&quot;&quot;+al_Physician_NPI.toString()+&quot;\&quot;&quot;);
System.out.println(&quot;Physician_NPI:&quot;+al_Physician_NPI.toString());

ArrayList al_model = new ArrayList();
for(int i=1;i&lt;=Integer.parseInt(vars.get(&quot;model_#&quot;));i++){
al_model.add(vars.get(&quot;model_&quot;+i));
}
vars.put(&quot;value9&quot;,&quot;\&quot;&quot;+al_model.toString()+&quot;\&quot;&quot;);
System.out.println(&quot;model:&quot;+al_model.toString());

ArrayList al_facilityNameInitCap = new ArrayList();
for(int i=1;i&lt;=Integer.parseInt(vars.get(&quot;facilityNameInitCap_#&quot;));i++){
al_facilityNameInitCap.add(vars.get(&quot;facilityNameInitCap_&quot;+i));
}
vars.put(&quot;value10&quot;,&quot;\&quot;&quot;+al_facilityNameInitCap.toString()+&quot;\&quot;&quot;);
System.out.println(&quot;facilityNameInitCap:&quot;+al_facilityNameInitCap.toString());
</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.services.FileServer;
//get current jmeter script&apos;s directory
String path = FileServer.getFileServer().getBaseDir();
 
//get the separator
String separator = File.separator;
 
log.info(&quot;Path: &quot; + path);
log.info(&quot;Path with separator: &quot; + path + separator);
System.out.print(path+separator);
System.out.println(${Flag});
if(vars.get(&quot;Flag&quot;).equals(&quot;(1)&quot;)){
	log.info(&quot;Path: 1&quot;);
	fA = new FileOutputStream(path+separator+&quot;ECRowFilterOutput.txt&quot;);
	pA = new PrintStream(fA); 
	pA.print(&quot;&quot;);
	pA.close();
	fA.close();
	}
log.info(&quot;Path: 7&quot;);
f= new FileOutputStream(path + separator+&quot;ECRowFilterOutput.txt&quot;,true);
	p = new PrintStream(f);

	String vValue1 =  vars.get(&quot;value1&quot;);
	String vValue2 =  vars.get(&quot;value2&quot;);
	String vValue3 =  vars.get(&quot;value3&quot;);
	String vValue4 =  vars.get(&quot;value4&quot;);
	String vValue5 =  vars.get(&quot;value5&quot;);
	vValue5 = vValue5.replace(&quot;null&quot;,&quot;Not Available&quot;); //Region Market 
	String vValue6 =  vars.get(&quot;value6&quot;);
	String vValue7 =  vars.get(&quot;value7&quot;);
	String vValue8 =  vars.get(&quot;value8&quot;);
	String vValue9 =  vars.get(&quot;value9&quot;);
	String vValue10 =  vars.get(&quot;value10&quot;);
	
	
	p.println(&quot;Episode Initiator - BPID=&quot;+vValue1+&quot;*Anchor Facility - CCN=&quot;+vValue2+&quot;*Bundle=&quot;+vValue3+&quot;*Remedy Region - Market=&quot;+vValue4+&quot;*Region - Market=&quot;+vValue5+&quot;*Participant=&quot;+vValue6+&quot;*DRG=&quot;+vValue7+&quot;*Physician - NPI=&quot;+vValue8+&quot;*Model=&quot;+vValue9+&quot;*Anchor Facility Detail=&quot;+vValue10);
	
//	p.println(&quot;Episode Initiator - BPID=&quot;+${value1}+&quot;*Anchor Facility - CCN=&quot;+${value2}+&quot;*Bundle=&quot;+${value3}+&quot;*Remdy Region Market=&quot;+${value4}+&quot;*Partner Region Market=&quot;+${value5}+&quot;*Participant=&quot;+${value6}+&quot;*DRG - Fracture=&quot;+${value7}+&quot;*Physician - NPI=&quot;+${value8}+&quot;*Model=&quot;+${value9}+&quot;*Anchor Facility Detail=&quot;+${value10});

	p.close();
	f.close();

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
