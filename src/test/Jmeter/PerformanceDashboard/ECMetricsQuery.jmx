<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="4.0" jmeter="4.0 r1823414">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
        <stringProp name="dataSource">MySQLQA</stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="checkQuery">Select 1</stringProp>
        <stringProp name="dbUrl">jdbc:mysql://rds-qa.remedypartners.com:3306/warehouse</stringProp>
        <stringProp name="driver">com.mysql.jdbc.Driver</stringProp>
        <stringProp name="username">salam</stringProp>
        <stringProp name="password">1Welcome2</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Performace DashBoard" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1511452775000</longProp>
        <longProp name="ThreadGroup.end_time">1511452775000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
        <hashTree>
          <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="OS Process Sampler" enabled="false">
            <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
            <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
            <stringProp name="SystemSampler.command">cmd.exe</stringProp>
            <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="Argument">
                  <stringProp name="Argument.name"></stringProp>
                  <stringProp name="Argument.value">-c</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="" elementType="Argument">
                  <stringProp name="Argument.name"></stringProp>
                  <stringProp name="Argument.value">echo &quot;ECEpiosdeCount,claimsEpiosdeCount,savingRate,TotalNPRA, TotalProgram&quot; &gt;&gt; PerformanceDashboardResult.txt</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="SystemSampler.directory">C:\Users\sandeep.singh\Desktop\Tableautestpaln</stringProp>
          </SystemSampler>
          <hashTree/>
        </hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="NumberOfEppisode" enabled="true">
          <stringProp name="filename">ECMetricsInput.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">Flag,bpid,ccn,bundle,dummyregion,dummymarket,r_region,r_market,participantName,drgCode,npi,model,region,market</stringProp>
          <stringProp name="delimiter">|</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
        </CSVDataSet>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Start Date for Dashboard" enabled="false">
          <stringProp name="dataSource">MySQLQA</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select DATE_FORMAT(CAST(lookupValue AS UNSIGNED),&apos;%m/%d/%Y&apos;) as ClaimsCubeDate,
DATE_FORMAT(adddate(CAST(lookupValue AS UNSIGNED),1),&apos;%m/%d/%Y&apos;) as ECStartDate 
from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;;
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">ClaimsCubeDateDB,ECStartDateDB</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="script">if(!vars.get(&quot;bpid&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;Q_BPID&quot;,&quot;and fp.BPID in  ${bpid}&quot;);	
} else {
	vars.put(&quot;Q_BPID&quot;,&quot;&quot;);
}
if(!vars.get(&quot;ccn&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;Q_CCN&quot;,&quot;and df.ccn in ${ccn}&quot;);	
} else{
	vars.put(&quot;Q_CCN&quot;,&quot;&quot;);
}
if(!vars.get(&quot;bundle&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;Q_BUNDLE&quot;,&quot;and d.bundleName in ${bundle}&quot;);	
} else{
	vars.put(&quot;Q_BUNDLE&quot;,&quot;&quot;);
}
if(!vars.get(&quot;r_region&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;Q_R_REGION&quot;,&quot;and rm.region in  ${r_region}&quot;);	
} else {
	vars.put(&quot;Q_R_REGION&quot;,&quot;&quot;);
}
if(!vars.get(&quot;r_market&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;Q_R_MARKET&quot;,&quot;and rm.market in ${r_market}&quot;);	
} else{
	vars.put(&quot;Q_R_MARKET&quot;,&quot;&quot;);
}
if(!vars.get(&quot;region&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;Q_REGION&quot;,&quot;and rmp.region in  ${region}&quot;);	
} else {
	vars.put(&quot;Q_REGION&quot;,&quot;&quot;);
}
if(!vars.get(&quot;market&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;Q_MARKET&quot;,&quot;and rmp.market in ${market}&quot;);	
} else{
	vars.put(&quot;Q_MARKET&quot;,&quot;&quot;);
}
if(!vars.get(&quot;participantName&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;Q_PARTICIPANTNAME&quot;,&quot;and de.participantName in ${participantName}&quot;);	
} else{
	vars.put(&quot;Q_PARTICIPANTNAME&quot;,&quot;&quot;);
}
if(!vars.get(&quot;drgCode&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;Q_DRGCODE&quot;,&quot;and d.drgCode in ${drgCode}&quot;);	
} else{
	vars.put(&quot;Q_DRGCODE&quot;,&quot;&quot;);
}
if(!vars.get(&quot;npi&quot;).contains(&quot;Skip&quot;) &amp;&amp; !vars.get(&quot;npi&quot;).equals(&quot;(&apos;Null&apos;)&quot;)){
	vars.put(&quot;Q_PHY_NPI&quot;,&quot;and dpy.npi in ${npi}&quot;);	
} else{
	vars.put(&quot;Q_PHY_NPI&quot;,&quot;&quot;);
}
if(!vars.get(&quot;model&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;Q_Model&quot;,&quot;and fp.Model in ${model}&quot;);	
} else{
	vars.put(&quot;Q_Model&quot;,&quot;&quot;);
}	</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="No. of Episode (EC Source)" enabled="true">
          <stringProp name="dataSource">MySQLQA</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">-- ${Query}
select sum(fp.episodeCountReport)  as EC_Episode  from warehouse.factPatientEpisode fp  
left join warehouse.dimEpisodeInitiator de on fp.episodeInitiatorKey = de.episodeInitiatorSK 
left join warehouse.dimFacility df on fp.anchorAdmitFacilityKey = df.facilitySK 
left join warehouse.dimFacility pac on fp.anchorPostAcuteAdmitFacilityKey = pac.facilitySK 
left join warehouse.dimPatient dp on fp.patientKey = dp.patientSK 
left join warehouse.dimLookup dlk on dp.totalRiskScore = dlk.lookupName 
left join warehouse.dimDRG d on fp.currDrgKey = d.drgSK 
left join warehouse.dimRegionMarket rm on rm.rgSK = fp.rgRemKey 
left join warehouse.dimRegionMarket rmp on rmp.rgSK = fp.rgPartnerKey 
left join warehouse.dimPhysician dpy on fp.physicianKey = dpy.physicianSK 
where fp.bundleRisk = 1  and fp.episodeCountReport = 1 and df.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;) and pac.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;) and de.bpid not like &apos;%DEMO%&apos; and dlk.lookupCategory = &apos;patientRisk&apos; 
and fp.anchorAdmitDateKey  &gt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;)  
-- AND fp.anchorAdmitDateKey &gt; (SELECT CAST(lookupValue AS UNSIGNED) FROM warehouse.dimLookup WHERE lookupCategory = &apos;ClaimsCubeDate&apos;) 
and fp.anchorAdmitDateKey &lt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;BPCIAStartDate&apos;) 
${Q_BPID} 
${Q_CCN} 
${Q_BUNDLE} 
${Q_R_REGION} 
${Q_R_MARKET} 
${Q_REGION} 
${Q_MARKET} 
${Q_PARTICIPANTNAME} 
${Q_DRGCODE} 
${Q_PHY_NPI} 
${Q_Model} ;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">ECEpisodeCount</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Discharge to SNF (EC)" enabled="true">
          <stringProp name="dataSource">MySQLQA</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">-- ${Query}
select round(sum(Category)/sum(episodes)*100,1) as DischargeToSNFEC 
from (select fp.BPID, sum(if((fp.NSOCType) in (&apos;SNF&apos;), 1,0) ) as Category, sum(fp.episodeCountReport) as Episodes 
from warehouse.factPatientEpisode fp left join warehouse.dimEpisodeInitiator de on fp.episodeInitiatorKey = de.episodeInitiatorSK left join warehouse.dimFacility df on fp.anchorAdmitFacilityKey = df.facilitySK 
left join warehouse.dimFacility pac on fp.anchorPostAcuteAdmitFacilityKey = pac.facilitySK 
left join warehouse.dimPatient dp on fp.patientKey = dp.patientSK 
left join warehouse.dimLookup dlk on dp.totalRiskScore = dlk.lookupName 
left join warehouse.dimDRG d on fp.currDrgKey = d.drgSK 
left join warehouse.dimRegionMarket rm on rm.rgSK = fp.rgRemKey 
left join warehouse.dimRegionMarket rmp on rmp.rgSK = fp.rgPartnerKey 
left join warehouse.dimPhysician dpy on fp.physicianKey = dpy.physicianSK 
where fp.bundleRisk = 1  and fp.episodeCountReport = 1 
and df.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;) and pac.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;) and de.bpid not like &apos;%DEMO%&apos; and dlk.lookupCategory = &apos;patientRisk&apos; 
and fp.anchorAdmitDateKey  &gt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;) 
-- AND fp.anchorAdmitDateKey &gt; (SELECT CAST(lookupValue AS UNSIGNED) FROM warehouse.dimLookup WHERE lookupCategory = &apos;ClaimsCubeDate&apos;) 
and fp.anchorAdmitDateKey &lt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;BPCIAStartDate&apos;) 
and fp.NSOCType in (&apos;SNF&apos;,&apos;LTCH&apos;,&apos;OTHER&apos;,&apos;HHA&apos;,&apos;HOME&apos;,&apos;IRF&apos;) 
${Q_BPID} ${Q_CCN} ${Q_BUNDLE} ${Q_R_REGION} ${Q_R_MARKET} ${Q_REGION} ${Q_MARKET} ${Q_PARTICIPANTNAME} ${Q_DRGCODE} ${Q_PHY_NPI} ${Q_Model} )a; </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">dischargetoSNFEC</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Discharge to SNF Benchmark (EC)" enabled="true">
          <stringProp name="TestPlan.comments">	</stringProp>
          <stringProp name="dataSource">MySQLQA</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select round(baseSNF/baseEpicounts*100, 1) as dischtoSNFBenchmarkEC 
from (select fp.BPID, sum(fp.baseSNF) as baseSNF, sum(fp.baseEpiCounts) as baseEpicounts 
from warehouse.factPatientEpisode fp  
left join warehouse.dimEpisodeInitiator de on fp.episodeInitiatorKey = de.episodeInitiatorSK 
left join warehouse.dimFacility df on fp.anchorAdmitFacilityKey = df.facilitySK 
left join warehouse.dimFacility pac on fp.anchorPostAcuteAdmitFacilityKey = pac.facilitySK 
left join warehouse.dimPatient dp on fp.patientKey = dp.patientSK 
left join warehouse.dimLookup dlk on dp.totalRiskScore = dlk.lookupName 
left join warehouse.dimDRG d on fp.currDrgKey = d.drgSK 
left join warehouse.dimRegionMarket rm on rm.rgSK = fp.rgRemKey 
left join warehouse.dimRegionMarket rmp on rmp.rgSK = fp.rgPartnerKey 
left join warehouse.dimPhysician dpy on fp.physicianKey = dpy.physicianSK 
where fp.bundleRisk = 1  
and fp.episodeCountReport = 1 
and df.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;) 
and pac.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;) 
and de.bpid not like &apos;%DEMO%&apos; and dlk.lookupCategory = &apos;patientRisk&apos; 
and fp.anchorAdmitDateKey  &gt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;) 
-- AND fp.anchorAdmitDateKey &gt; (SELECT CAST(lookupValue AS UNSIGNED) FROM warehouse.dimLookup WHERE lookupCategory = &apos;ClaimsCubeDate&apos;) 
and fp.anchorAdmitDateKey &lt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;BPCIAStartDate&apos;) 
and fp.NSOCType in (&apos;SNF&apos;,&apos;LTCH&apos;,&apos;OTHER&apos;,&apos;HHA&apos;,&apos;HOME&apos;,&apos;IRF&apos;) 
${Q_BPID} ${Q_CCN} ${Q_BUNDLE} ${Q_R_REGION} ${Q_R_MARKET} ${Q_REGION} ${Q_MARKET} ${Q_PARTICIPANTNAME} ${Q_DRGCODE} ${Q_PHY_NPI} ${Q_Model} )a;  </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">dischtoSNFBenchmarkEC</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SNF Days (EC)" enabled="true">
          <stringProp name="dataSource">MySQLQA</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select round(sum(case when (fp.dataQualityFlag not like &apos;%Invalid%&apos; and fp.totalSNFDays &gt;= 90) then 90 when (fp.dataQualityFlag not like &apos;%Invalid%&apos; ) then fp.totalSNFDays else 0 end ) /(sum(if((fp.totalSNFDays &gt; 0 and fp.dataQualityFlag not like &apos;Invalid%&apos;),fp.currEpiCounts,0))),1)  as SNFDays 
from warehouse.factPatientEpisode fp  
left join warehouse.dimEpisodeInitiator de on fp.episodeInitiatorKey = de.episodeInitiatorSK 
left join warehouse.dimFacility df on fp.anchorAdmitFacilityKey = df.facilitySK 
left join warehouse.dimFacility pac on fp.anchorPostAcuteAdmitFacilityKey = pac.facilitySK 
left join warehouse.dimPatient dp on fp.patientKey = dp.patientSK 
left join warehouse.dimLookup dlk on dp.totalRiskScore = dlk.lookupName 
left join warehouse.dimDRG d on fp.currDrgKey = d.drgSK 
left join warehouse.dimRegionMarket rm on rm.rgSK = fp.rgRemKey 
left join warehouse.dimRegionMarket rmp on rmp.rgSK = fp.rgPartnerKey 
left join warehouse.dimPhysician dpy on fp.physicianKey = dpy.physicianSK 
where fp.bundleRisk = 1  and fp.totalSNFDays &gt; 0 
and fp.dataQualityFlag not like &apos;%Invalid%&apos; 
and fp.episodeCountReport = 1 and df.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;) 
and pac.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;) and de.bpid not like &apos;%DEMO%&apos; 
and dlk.lookupCategory = &apos;patientRisk&apos; 
and fp.anchorAdmitDateKey  &gt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;) 
--AND fp.anchorAdmitDateKey &gt; (SELECT CAST(lookupValue AS UNSIGNED) FROM warehouse.dimLookup WHERE lookupCategory = &apos;ClaimsCubeDate&apos;) 
and fp.anchorAdmitDateKey &lt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;BPCIAStartDate&apos;) 
${Q_BPID} ${Q_CCN} ${Q_BUNDLE} ${Q_R_REGION} ${Q_R_MARKET} ${Q_REGION} ${Q_MARKET} ${Q_PARTICIPANTNAME} ${Q_DRGCODE} ${Q_PHY_NPI} ${Q_Model} ;   </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">SNFDaysEC</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SNF Days Benchmark (EC)" enabled="true">
          <stringProp name="dataSource">MySQLQA</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select round(sum(fp.baseSNFDays)/sum(fp.baseEpiCounts),1) as SNFDaysBenchmarkEC 
from warehouse.factPatientEpisode fp  
left join warehouse.dimEpisodeInitiator de on fp.episodeInitiatorKey = de.episodeInitiatorSK 
left join warehouse.dimFacility df on fp.anchorAdmitFacilityKey = df.facilitySK 
left join warehouse.dimFacility pac on fp.anchorPostAcuteAdmitFacilityKey = pac.facilitySK 
left join warehouse.dimPatient dp on fp.patientKey = dp.patientSK 
left join warehouse.dimLookup dlk on dp.totalRiskScore = dlk.lookupName 
left join warehouse.dimDRG d on fp.currDrgKey = d.drgSK 
left join warehouse.dimRegionMarket rm on rm.rgSK = fp.rgRemKey 
left join warehouse.dimRegionMarket rmp on rmp.rgSK = fp.rgPartnerKey 
left join warehouse.dimPhysician dpy on fp.physicianKey = dpy.physicianSK 
where fp.bundleRisk = 1
-- and fp.totalSNFDays &gt; 0
-- and fp.NSOCType = &apos;SNF&apos;
-- and fp.dataQualityFlag not like &apos;%Invalid%&apos;
and fp.episodeCountReport = 1
and df.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;) and pac.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;)
and de.bpid not like &apos;%DEMO%&apos;
and dlk.lookupCategory = &apos;patientRisk&apos;
AND fp.anchorAdmitDateKey &gt; (SELECT CAST(lookupValue AS UNSIGNED) FROM warehouse.dimLookup WHERE lookupCategory = &apos;ClaimsCubeDate&apos;) 
and fp.anchorAdmitDateKey &lt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;BPCIAStartDate&apos;) 
${Q_BPID} ${Q_CCN} ${Q_BUNDLE} ${Q_R_REGION} ${Q_R_MARKET} ${Q_REGION} ${Q_MARKET} ${Q_PARTICIPANTNAME} ${Q_DRGCODE} ${Q_PHY_NPI} ${Q_Model} ;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">SNFDaysBenchmarkEC</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Episodes With Readmission (EC)" enabled="true">
          <stringProp name="dataSource">MySQLQA</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select round(sum(readmissionCounter)/sum(Episodes)*100, 1) as EpisodesWithReadmissionEC 
from ( select sum(if((fp.readmissionCounter) &gt;= 1 , 1, 0)) as readmissionCounter, sum(fp.episodeCountReport) as Episodes 
from warehouse.factPatientEpisode fp  
left join warehouse.dimEpisodeInitiator de on fp.episodeInitiatorKey = de.episodeInitiatorSK 
left join warehouse.dimFacility df on fp.anchorAdmitFacilityKey = df.facilitySK 
left join warehouse.dimFacility pac on fp.anchorPostAcuteAdmitFacilityKey = pac.facilitySK 
left join warehouse.dimPatient dp on fp.patientKey = dp.patientSK 
left join warehouse.dimLookup dlk on dp.totalRiskScore = dlk.lookupName 
left join warehouse.dimDRG d on fp.currDrgKey = d.drgSK 
left join warehouse.dimRegionMarket rm on rm.rgSK = fp.rgRemKey 
left join warehouse.dimRegionMarket rmp on rmp.rgSK = fp.rgPartnerKey 
left join warehouse.dimPhysician dpy on fp.physicianKey = dpy.physicianSK 
where fp.bundleRisk = 1  
and fp.episodeCountReport = 1 
and df.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;) 
and pac.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;) 
and de.bpid not like &apos;%DEMO%&apos; 
and dlk.lookupCategory = &apos;patientRisk&apos; 
and fp.anchorAdmitDateKey  &gt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;) 
and fp.anchorAdmitDateKey &lt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;BPCIAStartDate&apos;) ${Q_BPID} ${Q_CCN} ${Q_BUNDLE} ${Q_R_REGION} ${Q_R_MARKET} ${Q_REGION} ${Q_MARKET} ${Q_PARTICIPANTNAME} ${Q_DRGCODE} ${Q_PHY_NPI} ${Q_Model} )a;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">EpisodesWithReadmissionEC</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Episodes With Readmission Benchmark (EC)" enabled="true">
          <stringProp name="dataSource">MySQLQA</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select round((baseEpiReadmissions)/(baseEpiCounts)*100, 1) as EpisodesWithReadmissionBenchmarkEC 
from (select SUM(fp.baseEpiReadmissions) as baseEpiReadmissions, 
sum(fp.baseEpiCounts) as baseEpiCounts 
from warehouse.factPatientEpisode fp  
left join warehouse.dimEpisodeInitiator de on fp.episodeInitiatorKey = de.episodeInitiatorSK 
left join warehouse.dimFacility df on fp.anchorAdmitFacilityKey = df.facilitySK 
left join warehouse.dimFacility pac on fp.anchorPostAcuteAdmitFacilityKey = pac.facilitySK 
left join warehouse.dimPatient dp on fp.patientKey = dp.patientSK 
left join warehouse.dimLookup dlk on dp.totalRiskScore = dlk.lookupName 
left join warehouse.dimDRG d on fp.currDrgKey = d.drgSK 
left join warehouse.dimRegionMarket rm on rm.rgSK = fp.rgRemKey 
left join warehouse.dimRegionMarket rmp on rmp.rgSK = fp.rgPartnerKey 
left join warehouse.dimPhysician dpy on fp.physicianKey = dpy.physicianSK 
where fp.bundleRisk = 1  and fp.episodeCountReport = 1 
and df.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;) 
and pac.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;) 
and de.bpid not like &apos;%DEMO%&apos; 
and dlk.lookupCategory = &apos;patientRisk&apos; 
and fp.anchorAdmitDateKey  &gt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;) 
and fp.anchorAdmitDateKey &lt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;BPCIAStartDate&apos;) ${Q_BPID} ${Q_CCN} ${Q_BUNDLE} ${Q_R_REGION} ${Q_R_MARKET} ${Q_REGION} ${Q_MARKET} ${Q_PARTICIPANTNAME} ${Q_DRGCODE} ${Q_PHY_NPI} ${Q_Model} )a;    </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">EpisodesWithReadmissionBenchmarkEC</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="OS Process Sampler" enabled="true">
          <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
          <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
          <stringProp name="SystemSampler.command">cmd.exe</stringProp>
          <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">/c</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">echo Printed</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SystemSampler.directory">${__BeanShell(import org.apache.jmeter.services.FileServer; FileServer.getFileServer().getBaseDir();)}${__BeanShell(File.separator,)}</stringProp>
        </SystemSampler>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.services.FileServer;
//get current jmeter script&apos;s directory
String path = FileServer.getFileServer().getBaseDir();
 
//get the separator
String separator = File.separator;
 
log.info(&quot;Path: &quot; + path);
log.info(&quot;Path with separator: &quot; + path + separator);
System.out.print(path+separator);
System.out.println(${Flag});
if(vars.get(&quot;Flag&quot;).equals(&quot;(1)&quot;)){
	log.info(&quot;Path: 1&quot;);
	fA = new FileOutputStream(path+separator+&quot;ECMetricsOutput.txt&quot;);
	pA = new PrintStream(fA); 
	pA.print(&quot;&quot;);
	pA.close();
	fA.close();
	}
log.info(&quot;Path: 7&quot;);
f= new FileOutputStream(path + separator+&quot;ECMetricsOutput.txt&quot;,true);
	p = new PrintStream(f);
	String ECEpisodeCount_1=&quot;${ECEpisodeCount_1}&quot;;
	String savingRate_1=&quot;${savingRate_1}&quot;;
	String SNFDaysEC_1=&quot;${SNFDaysEC_1}&quot;;
	String SNFDaysBenchmarkEC_1=&quot;${SNFDaysBenchmarkEC_1}&quot;;
	String EpisodesWithReadmissionEC_1=&quot;${EpisodesWithReadmissionEC_1}&quot;;
	String EpisodesWithReadmissionBenchmarkEC_1=&quot;${EpisodesWithReadmissionBenchmarkEC_1}&quot;;
	String dischtoSNFBenchmarkEC_1=&quot;${dischtoSNFBenchmarkEC_1}&quot;;
     p.println(&quot;KPI_Episode_EC=&quot;+ECEpisodeCount_1+&quot;*% SNF Disch Current_EC=&quot;+dischargetoSNFEC_1+&quot;*SNF Days Current_EC=&quot;+SNFDaysEC_1+&quot;*SNF Days Benchmark Variance_EC=&quot;+SNFDaysBenchmarkEC_1+&quot;*Readmissions Current_EC=&quot;+EpisodesWithReadmissionEC_1+&quot;*Readmissions Benchmark Variance_EC=&quot;+EpisodesWithReadmissionBenchmarkEC_1+&quot;*% SNF Disch Benchmark Variance_EC=&quot;+dischtoSNFBenchmarkEC_1);
p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
