<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="4.0" jmeter="4.0 r1823414">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
        <stringProp name="dataSource">MySQLQA</stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="checkQuery">Select 1</stringProp>
        <stringProp name="dbUrl">jdbc:mysql://rds-qa.remedypartners.com:3306/warehouse</stringProp>
        <stringProp name="driver">com.mysql.jdbc.Driver</stringProp>
        <stringProp name="username">salam</stringProp>
        <stringProp name="password">1Welcome2</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Performace DashBoard" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1511452775000</longProp>
        <longProp name="ThreadGroup.end_time">1511452775000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
        <hashTree>
          <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="OS Process Sampler" enabled="false">
            <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
            <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
            <stringProp name="SystemSampler.command">cmd.exe</stringProp>
            <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="Argument">
                  <stringProp name="Argument.name"></stringProp>
                  <stringProp name="Argument.value">-c</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="" elementType="Argument">
                  <stringProp name="Argument.name"></stringProp>
                  <stringProp name="Argument.value">echo &quot;ECEpiosdeCount,claimsEpiosdeCount,savingRate,TotalNPRA, TotalProgram&quot; &gt;&gt; PerformanceDashboardResult.txt</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="SystemSampler.directory">C:\Users\sandeep.singh\Desktop\Tableautestpaln</stringProp>
          </SystemSampler>
          <hashTree/>
        </hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="NumberOfEppisode" enabled="true">
          <stringProp name="filename">ClaimsECMetricsInput.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">startdate,enddate,bpid,ccn,bundle,region,market,r_region,r_market,participantName,drgCode,npi,model</stringProp>
          <stringProp name="delimiter">|</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
        </CSVDataSet>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="No. of Episode (EC Claims)" enabled="true">
          <stringProp name="dataSource">MySQLQA</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">${Query}</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">Episode_EC_Claims</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">if(!vars.get(&quot;startdate&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;STARTDATE&quot;,&quot;${startdate}&quot;);	
} else {
	vars.put(&quot;STARTDATE&quot;,&quot;&quot;);
}

if(!vars.get(&quot;enddate&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;ENDDATE&quot;,&quot;${enddate}&quot;);	
} else {
	vars.put(&quot;ENDDATE&quot;,&quot;&quot;);
}

if(!vars.get(&quot;bpid&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_BPID&quot;,&quot;and e.bpid in  ${bpid}&quot;);	
} else {
	vars.put(&quot;C_BPID&quot;,&quot;&quot;);
}
if(!vars.get(&quot;ccn&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_CCN&quot;,&quot;and f.ccn in ${ccn}&quot;);	
} else{
	vars.put(&quot;C_CCN&quot;,&quot;&quot;);
}
if(!vars.get(&quot;bundle&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_BUNDLE&quot;,&quot;and drg.bundleName in ${bundle}&quot;);	
} else{
	vars.put(&quot;C_BUNDLE&quot;,&quot;&quot;);
}
if(!vars.get(&quot;r_region&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_R_REGION&quot;,&quot;and rm.region in  ${r_region}&quot;);	
} else {
	vars.put(&quot;C_R_REGION&quot;,&quot;&quot;);
}
if(!vars.get(&quot;r_market&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_R_MARKET&quot;,&quot;and rm.market in ${r_market}&quot;);	
} else{
	vars.put(&quot;C_R_MARKET&quot;,&quot;&quot;);
}
if(!vars.get(&quot;region&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_REGION&quot;,&quot;and rmp.region in  ${region}&quot;);	
} else {
	vars.put(&quot;C_REGION&quot;,&quot;&quot;);
}
if(!vars.get(&quot;market&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_MARKET&quot;,&quot;and rmp.market in ${market}&quot;);	
} else{
	vars.put(&quot;C_MARKET&quot;,&quot;&quot;);
}
if(!vars.get(&quot;participantName&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_PARTICIPANTNAME&quot;,&quot;and e.participantNameInitCap in ${participantName}&quot;);	
} else{
	vars.put(&quot;C_PARTICIPANTNAME&quot;,&quot;&quot;);
}
if(!vars.get(&quot;drgCode&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_DRGCODE&quot;,&quot;and drg.drgCode in ${drgCode}&quot;);	
} else{
	vars.put(&quot;C_DRGCODE&quot;,&quot;&quot;);
}
if(!vars.get(&quot;npi&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_PHY_NPI&quot;,&quot;and p.npi in ${npi}&quot;);	
} else{
	vars.put(&quot;C_PHY_NPI&quot;,&quot;&quot;);
}
if(!vars.get(&quot;model&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_Model&quot;,&quot;and c.Model in ${model}&quot;);	
} else{
	vars.put(&quot;C_Model&quot;,&quot;&quot;);
}
if(!vars.get(&quot;bpid&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_BPID&quot;,&quot;and fp.BPID in  ${bpid}&quot;);	
} else {
	vars.put(&quot;E_BPID&quot;,&quot;&quot;);
}
if(!vars.get(&quot;ccn&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_CCN&quot;,&quot;and df.ccn in ${ccn}&quot;);	
} else{
	vars.put(&quot;E_CCN&quot;,&quot;&quot;);
}
if(!vars.get(&quot;bundle&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_BUNDLE&quot;,&quot;and d.bundleName in ${bundle}&quot;);	
} else{
	vars.put(&quot;E_BUNDLE&quot;,&quot;&quot;);
}
if(!vars.get(&quot;r_region&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_R_REGION&quot;,&quot;and rm.region in  ${r_region}&quot;);	
} else {
	vars.put(&quot;E_R_REGION&quot;,&quot;&quot;);
}
if(!vars.get(&quot;r_market&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_R_MARKET&quot;,&quot;and rm.market in ${r_market}&quot;);	
} else{
	vars.put(&quot;E_R_MARKET&quot;,&quot;&quot;);
}
if(!vars.get(&quot;region&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_REGION&quot;,&quot;and rmp.region in  ${region}&quot;);	
} else {
	vars.put(&quot;E_REGION&quot;,&quot;&quot;);
}
if(!vars.get(&quot;market&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_MARKET&quot;,&quot;and rmp.market in ${market}&quot;);	
} else{
	vars.put(&quot;E_MARKET&quot;,&quot;&quot;);
}
if(!vars.get(&quot;participantName&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_PARTICIPANTNAME&quot;,&quot;and de.participantName in ${participantName}&quot;);	
} else{
	vars.put(&quot;E_PARTICIPANTNAME&quot;,&quot;&quot;);
}
if(!vars.get(&quot;drgCode&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_DRGCODE&quot;,&quot;and d.drgCode in ${drgCode}&quot;);	
} else{
	vars.put(&quot;E_DRGCODE&quot;,&quot;&quot;);
}
if(!vars.get(&quot;npi&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_PHY_NPI&quot;,&quot;and dpy.npi in ${npi}&quot;);	
} else{
	vars.put(&quot;E_PHY_NPI&quot;,&quot;&quot;);
}
if(!vars.get(&quot;model&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_Model&quot;,&quot;and fp.Model in ${model}&quot;);	
} else{
	vars.put(&quot;E_Model&quot;,&quot;&quot;);
}	
	</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="78391464">Query</stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-507744338">
                <stringProp name="368479959">select sum(Episode) as EpisodeEC_ClaimsUnion  from  ( select sum(c.currEpiCounts) as Episode  from warehouse.factClaims c  left join warehouse.dimFacility f ON c.anchorFacilityKey = f.facilitySK  left join warehouse.dimFacility pac ON c.postAcuteFacilityKey = pac.facilitySK  left join warehouse.dimEpisodeInitiator e ON c.episodeInitiatorKey = e.episodeInitiatorSK  left JOIN warehouse.dimDRG drg ON c.anchorDrgKey = drg.drgSK  left JOIN warehouse.dimPhysician p ON c.physicianKey = p.physicianSK    left JOIN warehouse.dimRegionMarket rm ON c.rgRemKey = rm.rgSK  left JOIN warehouse.dimRegionMarket rmp ON c.rgPartnerKey = rmp.rgSK   where f.dwhSource in (&apos;Claims&apos;, &apos;ZeroKey&apos;,&apos;emblemClaims&apos;)   and pac.dwhSource in (&apos;Claims&apos;, &apos;ZeroKey&apos;,&apos;emblemClaims&apos;)  and e.bpid not like &apos;%DEMO%&apos;  and c.atRisk=&apos;Y&apos;   and c.anchorBeginDateKey &gt;= ${STARTDATE}   and c.anchorBeginDateKey &lt;=(select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;)    ${C_BPID}  ${C_CCN} ${C_BUNDLE} ${C_R_REGION} ${C_R_MARKET}  ${C_REGION} ${C_MARKET} ${C_PARTICIPANTNAME}  ${C_DRGCODE} ${C_PHY_NPI} ${C_Model}  and c.targetPrice &lt;&gt; 0  union  select sum(fp.episodeCountReport) as Episode from warehouse.factPatientEpisode fp  left join warehouse.dimEpisodeInitiator de on fp.episodeInitiatorKey = de.episodeInitiatorSK left join warehouse.dimFacility df on fp.anchorAdmitFacilityKey = df.facilitySK left join warehouse.dimFacility pac on fp.anchorPostAcuteAdmitFacilityKey = pac.facilitySK left join warehouse.dimPatient dp on fp.patientKey = dp.patientSK left join warehouse.dimLookup dlk on dp.totalRiskScore = dlk.lookupName left join warehouse.dimDRG d on fp.currDrgKey = d.drgSK left join warehouse.dimRegionMarket rm on rm.rgSK = fp.rgRemKey left join warehouse.dimRegionMarket rmp on rmp.rgSK = fp.rgPartnerKey left join warehouse.dimPhysician dpy on fp.physicianKey = dpy.physicianSK where fp.bundleRisk = 1  and fp.episodeCountReport = 1 and df.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;) and pac.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;) and de.bpid not like &apos;%DEMO%&apos; and dlk.lookupCategory = &apos;patientRisk&apos; and fp.anchorAdmitDateKey  &gt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;) ${E_BPID}  ${E_CCN} ${E_BUNDLE} ${E_R_REGION} ${E_R_MARKET} ${E_REGION} ${E_MARKET} ${E_PARTICIPANTNAME}  ${E_DRGCODE} ${E_PHY_NPI} ${E_Model}  )a;</stringProp>
                <stringProp name="0"></stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
          </UserParameters>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Saving Rate " enabled="true">
          <stringProp name="dataSource">MySQLQA</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">${Query}</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">savingRate_EC_Claims</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">if(!vars.get(&quot;bpid&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;Q_BPID&quot;,&quot;and e.bpid in  ${bpid}&quot;);	
} else {
	vars.put(&quot;Q_BPID&quot;,&quot;&quot;);
}
if(!vars.get(&quot;ccn&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;Q_CCN&quot;,&quot;and f.ccn in ${ccn}&quot;);	
} else{
	vars.put(&quot;Q_CCN&quot;,&quot;&quot;);
}
if(!vars.get(&quot;bundle&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;Q_BUNDLE&quot;,&quot;and drg.bundleName in ${bundle}&quot;);	
} else{
	vars.put(&quot;Q_BUNDLE&quot;,&quot;&quot;);
}
if(!vars.get(&quot;r_region&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;Q_R_REGION&quot;,&quot;and rm.region in  ${r_region}&quot;);	
} else {
	vars.put(&quot;Q_R_REGION&quot;,&quot;&quot;);
}
if(!vars.get(&quot;r_market&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;Q_R_MARKET&quot;,&quot;and rm.market in ${r_market}&quot;);	
} else{
	vars.put(&quot;Q_R_MARKET&quot;,&quot;&quot;);
}
if(!vars.get(&quot;region&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;Q_REGION&quot;,&quot;and rmp.region in  ${region}&quot;);	
} else {
	vars.put(&quot;Q_REGION&quot;,&quot;&quot;);
}
if(!vars.get(&quot;market&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;Q_MARKET&quot;,&quot;and rmp.market in ${market}&quot;);	
} else{
	vars.put(&quot;Q_MARKET&quot;,&quot;&quot;);
}
if(!vars.get(&quot;participantName&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;Q_PARTICIPANTNAME&quot;,&quot;and de.participantNameInitCap in ${participantName}&quot;);	
} else{
	vars.put(&quot;Q_PARTICIPANTNAME&quot;,&quot;&quot;);
}
if(!vars.get(&quot;drgCode&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;Q_DRGCODE&quot;,&quot;and drg.drgCode in ${drgCode}&quot;);	
} else{
	vars.put(&quot;Q_DRGCODE&quot;,&quot;&quot;);
}
if(!vars.get(&quot;npi&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;Q_PHY_NPI&quot;,&quot;and p.npi in ${npi}&quot;);	
} else{
	vars.put(&quot;Q_PHY_NPI&quot;,&quot;&quot;);
}
if(!vars.get(&quot;model&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;Q_Model&quot;,&quot;and c.Model in ${model}&quot;);	
} else{
	vars.put(&quot;Q_Model&quot;,&quot;&quot;);
}	</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="78391464">Query</stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="1568020232">
                <stringProp name="44569016">select (round((sum(NPRA)/sum(Program_size))*100,1)) as Savings_Rate from (select e.bpid, sum(NPRA_completed) as NPRA, sum(epi_allowed_completed) as Program_size  from warehouse.factClaims c   left join warehouse.dimFacility f ON c.anchorFacilityKey = f.facilitySK  left join warehouse.dimFacility pac ON c.postAcuteFacilityKey = pac.facilitySK  left join warehouse.dimEpisodeInitiator e ON c.episodeInitiatorKey = e.episodeInitiatorSK  left JOIN warehouse.dimDRG drg ON c.anchorDrgKey = drg.drgSK  left JOIN warehouse.dimPhysician p ON c.physicianKey = p.physicianSK    left JOIN warehouse.dimRegionMarket rm ON c.rgRemKey = rm.rgSK  left JOIN warehouse.dimRegionMarket rmp ON c.rgPartnerKey = rmp.rgSK  where f.dwhSource in (&apos;Claims&apos;, &apos;ZeroKey&apos;,&apos;emblemClaims&apos;)   and pac.dwhSource in (&apos;Claims&apos;, &apos;ZeroKey&apos;,&apos;emblemClaims&apos;)  and e.bpid not like &apos;%DEMO%&apos;  and c.atRisk=&apos;Y&apos;   and c.anchorBeginDateKey &gt;= ${STARTDATE}   ${Q_BPID}  ${Q_CCN} ${Q_BUNDLE} ${Q_R_REGION} ${Q_R_MARKET}  ${Q_REGION} ${Q_MARKET}  ${Q_PARTICIPANTNAME}  ${Q_DRGCODE}  ${Q_PHY_NPI}  ${Q_Model} and c.targetPrice &lt;&gt; 0) a;</stringProp>
                <stringProp name="0"></stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
          </UserParameters>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="NPRA and PROGRAM SIZE (EC Claims)" enabled="true">
          <stringProp name="dataSource">MySQLQA</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">${Query}</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">TotalNPRA_EC_Claims, TotalProgram_EC_Claims</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">if(!vars.get(&quot;bpid&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;Q_BPID&quot;,&quot;and e.bpid in  ${bpid}&quot;);	
} else {
	vars.put(&quot;Q_BPID&quot;,&quot;&quot;);
}
if(!vars.get(&quot;ccn&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;Q_CCN&quot;,&quot;and f.ccn in ${ccn}&quot;);	
} else{
	vars.put(&quot;Q_CCN&quot;,&quot;&quot;);
}
if(!vars.get(&quot;bundle&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;Q_BUNDLE&quot;,&quot;and drg.bundleName in ${bundle}&quot;);	
} else{
	vars.put(&quot;Q_BUNDLE&quot;,&quot;&quot;);
}
if(!vars.get(&quot;r_region&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;Q_R_REGION&quot;,&quot;and rm.region in  ${r_region}&quot;);	
} else {
	vars.put(&quot;Q_R_REGION&quot;,&quot;&quot;);
}
if(!vars.get(&quot;r_market&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;Q_R_MARKET&quot;,&quot;and rm.market in ${r_market}&quot;);	
} else{
	vars.put(&quot;Q_R_MARKET&quot;,&quot;&quot;);
}
if(!vars.get(&quot;region&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;Q_REGION&quot;,&quot;and rmp.region in  ${region}&quot;);	
} else {
	vars.put(&quot;Q_REGION&quot;,&quot;&quot;);
}
if(!vars.get(&quot;market&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;Q_MARKET&quot;,&quot;and rmp.market in ${market}&quot;);	
} else{
	vars.put(&quot;Q_MARKET&quot;,&quot;&quot;);
}
if(!vars.get(&quot;participantName&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;Q_PARTICIPANTNAME&quot;,&quot;and de.participantNameInitCap in ${participantName}&quot;);	
} else{
	vars.put(&quot;Q_PARTICIPANTNAME&quot;,&quot;&quot;);
}
if(!vars.get(&quot;drgCode&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;Q_DRGCODE&quot;,&quot;and drg.drgCode in ${drgCode}&quot;);	
} else{
	vars.put(&quot;Q_DRGCODE&quot;,&quot;&quot;);
}
if(!vars.get(&quot;npi&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;Q_PHY_NPI&quot;,&quot;and p.npi in ${npi}&quot;);	
} else{
	vars.put(&quot;Q_PHY_NPI&quot;,&quot;&quot;);
}
if(!vars.get(&quot;model&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;Q_Model&quot;,&quot;and c.Model in ${model}&quot;);	
} else{
	vars.put(&quot;Q_Model&quot;,&quot;&quot;);
}	</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="78391464">Query</stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-1176354601">
                <stringProp name="1488556326">select round(sum(NPRA)) as Claims_NPRA, round(sum(Program_size)) as Claims_ProgramSize from (select e.bpid, sum(NPRA_completed) as NPRA, sum(epi_allowed_completed) as Program_size  from warehouse.factClaims c  left join warehouse.dimFacility f ON c.anchorFacilityKey = f.facilitySK  left join warehouse.dimFacility pac ON c.postAcuteFacilityKey = pac.facilitySK  left join warehouse.dimEpisodeInitiator e ON c.episodeInitiatorKey = e.episodeInitiatorSK  left JOIN warehouse.dimDRG drg ON c.anchorDrgKey = drg.drgSK  left JOIN warehouse.dimPhysician p ON c.physicianKey = p.physicianSK    left JOIN warehouse.dimRegionMarket rm ON c.rgRemKey = rm.rgSK  left JOIN warehouse.dimRegionMarket rmp ON c.rgPartnerKey = rmp.rgSK  where f.dwhSource in (&apos;Claims&apos;, &apos;ZeroKey&apos;,&apos;emblemClaims&apos;)   and pac.dwhSource in (&apos;Claims&apos;, &apos;ZeroKey&apos;,&apos;emblemClaims&apos;)  and e.bpid not like &apos;%DEMO%&apos;  and c.atRisk=&apos;Y&apos;   and c.anchorBeginDateKey &gt;= ${STARTDATE}  ${Q_BPID}  ${Q_CCN} ${Q_BUNDLE} ${Q_R_REGION} ${Q_R_MARKET}  ${Q_REGION} ${Q_MARKET} ${Q_PARTICIPANTNAME}  ${Q_DRGCODE} ${Q_PHY_NPI}  ${Q_Model}  and c.targetPrice &lt;&gt; 0) a;</stringProp>
                <stringProp name="0"></stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
          </UserParameters>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Start Date for Dashboard" enabled="false">
          <stringProp name="dataSource">MySQLQA</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select DATE_FORMAT(CAST(lookupValue AS UNSIGNED),&apos;%m/%d/%Y&apos;) as ClaimsCubeDate,
DATE_FORMAT(adddate(CAST(lookupValue AS UNSIGNED),1),&apos;%m/%d/%Y&apos;) as ECStartDate 
from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;;
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">ClaimsCubeDateDB,ECStartDateDB</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Discharge to SNF (EC Claims)" enabled="true">
          <stringProp name="dataSource">MySQLQA</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">${Query}</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">DischargeToSNF_EC_Claims</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">if(!vars.get(&quot;bpid&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_BPID&quot;,&quot;and e.bpid in  ${bpid}&quot;);	
} else {
	vars.put(&quot;C_BPID&quot;,&quot;&quot;);
}
if(!vars.get(&quot;ccn&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_CCN&quot;,&quot;and f.ccn in ${ccn}&quot;);	
} else{
	vars.put(&quot;C_CCN&quot;,&quot;&quot;);
}
if(!vars.get(&quot;bundle&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_BUNDLE&quot;,&quot;and drg.bundleName in ${bundle}&quot;);	
} else{
	vars.put(&quot;C_BUNDLE&quot;,&quot;&quot;);
}
if(!vars.get(&quot;r_region&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_R_REGION&quot;,&quot;and rm.region in  ${r_region}&quot;);	
} else {
	vars.put(&quot;C_R_REGION&quot;,&quot;&quot;);
}
if(!vars.get(&quot;r_market&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_R_MARKET&quot;,&quot;and rm.market in ${r_market}&quot;);	
} else{
	vars.put(&quot;C_R_MARKET&quot;,&quot;&quot;);
}
if(!vars.get(&quot;region&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_REGION&quot;,&quot;and rmp.region in  ${region}&quot;);	
} else {
	vars.put(&quot;C_REGION&quot;,&quot;&quot;);
}
if(!vars.get(&quot;market&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_MARKET&quot;,&quot;and rmp.market in ${market}&quot;);	
} else{
	vars.put(&quot;C_MARKET&quot;,&quot;&quot;);
}
if(!vars.get(&quot;participantName&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_PARTICIPANTNAME&quot;,&quot;and de.participantNameInitCap in ${participantName}&quot;);	
} else{
	vars.put(&quot;C_PARTICIPANTNAME&quot;,&quot;&quot;);
}
if(!vars.get(&quot;drgCode&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_DRGCODE&quot;,&quot;and drg.drgCode in ${drgCode}&quot;);	
} else{
	vars.put(&quot;C_DRGCODE&quot;,&quot;&quot;);
}
if(!vars.get(&quot;npi&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_PHY_NPI&quot;,&quot;and p.npi in ${npi}&quot;);	
} else{
	vars.put(&quot;C_PHY_NPI&quot;,&quot;&quot;);
}
if(!vars.get(&quot;model&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_Model&quot;,&quot;and c.Model in ${model}&quot;);	
} else{
	vars.put(&quot;C_Model&quot;,&quot;&quot;);
}
if(!vars.get(&quot;bpid&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_BPID&quot;,&quot;and fp.BPID in  ${bpid}&quot;);	
} else {
	vars.put(&quot;E_BPID&quot;,&quot;&quot;);
}
if(!vars.get(&quot;ccn&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_CCN&quot;,&quot;and df.ccn in ${ccn}&quot;);	
} else{
	vars.put(&quot;E_CCN&quot;,&quot;&quot;);
}
if(!vars.get(&quot;bundle&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_BUNDLE&quot;,&quot;and d.bundleName in ${bundle}&quot;);	
} else{
	vars.put(&quot;E_BUNDLE&quot;,&quot;&quot;);
}
if(!vars.get(&quot;r_region&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_R_REGION&quot;,&quot;and rm.region in  ${r_region}&quot;);	
} else {
	vars.put(&quot;E_R_REGION&quot;,&quot;&quot;);
}
if(!vars.get(&quot;r_market&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_R_MARKET&quot;,&quot;and rm.market in ${r_market}&quot;);	
} else{
	vars.put(&quot;E_R_MARKET&quot;,&quot;&quot;);
}
if(!vars.get(&quot;region&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_REGION&quot;,&quot;and rmp.region in  ${region}&quot;);	
} else {
	vars.put(&quot;E_REGION&quot;,&quot;&quot;);
}
if(!vars.get(&quot;market&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_MARKET&quot;,&quot;and rmp.market in ${market}&quot;);	
} else{
	vars.put(&quot;E_MARKET&quot;,&quot;&quot;);
}
if(!vars.get(&quot;participantName&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_PARTICIPANTNAME&quot;,&quot;and e.participantName in ${participantName}&quot;);	
} else{
	vars.put(&quot;E_PARTICIPANTNAME&quot;,&quot;&quot;);
}
if(!vars.get(&quot;drgCode&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_DRGCODE&quot;,&quot;and d.drgCode in ${drgCode}&quot;);	
} else{
	vars.put(&quot;E_DRGCODE&quot;,&quot;&quot;);
}
if(!vars.get(&quot;npi&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_PHY_NPI&quot;,&quot;and dpy.npi in ${npi}&quot;);	
} else{
	vars.put(&quot;E_PHY_NPI&quot;,&quot;&quot;);
}
if(!vars.get(&quot;model&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_Model&quot;,&quot;and fp.Model in ${model}&quot;);	
} else{
	vars.put(&quot;E_Model&quot;,&quot;&quot;);
}	
	</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="78391464">Query</stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-312861319">
                <stringProp name="-519838544">select round((sum(a.category)/sum(a.episodes)) * 100,1) as DischargeToSNFEC_ClaimsUnion from ( select e.bpid, SUM(if( (c.postAcuteCategory) = &quot;SNF&quot;, 1,0) ) as Category, sum(currEpiCounts) as Episodes from warehouse.factClaims c   left join warehouse.dimFacility f ON c.anchorFacilityKey = f.facilitySK   left join warehouse.dimFacility pac ON c.postAcuteFacilityKey = pac.facilitySK   left join warehouse.dimEpisodeInitiator e ON c.episodeInitiatorKey = e.episodeInitiatorSK   left JOIN warehouse.dimDRG drg ON c.anchorDrgKey = drg.drgSK   left JOIN warehouse.dimPhysician p ON c.physicianKey = p.physicianSK     left JOIN warehouse.dimRegionMarket rm ON c.rgRemKey = rm.rgSK   left JOIN warehouse.dimRegionMarket rmp ON c.rgPartnerKey = rmp.rgSK    where f.dwhSource in (&apos;Claims&apos;, &apos;ZeroKey&apos;,&apos;emblemClaims&apos;)    and pac.dwhSource in (&apos;Claims&apos;, &apos;ZeroKey&apos;,&apos;emblemClaims&apos;)   and e.bpid not like &apos;%DEMO%&apos;  and c.atRisk=&apos;Y&apos;    and c.anchorBeginDateKey &gt;= ${STARTDATE}    and c.anchorBeginDateKey &lt;= (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;)     ${C_BPID}  ${C_CCN} ${C_BUNDLE} ${C_R_REGION} ${C_R_MARKET}  ${C_REGION} ${C_MARKET} ${C_PARTICIPANTNAME}  ${C_DRGCODE} ${C_PHY_NPI} ${C_Model} and c.targetPrice &lt;&gt; 0  union  select fp.BPID, sum(if((fp.NSOCType) in (&apos;SNF&apos;), 1,0) ) as Category, sum(fp.episodeCountReport) as Episodes from warehouse.factPatientEpisode fp  left join warehouse.dimEpisodeInitiator de on fp.episodeInitiatorKey = de.episodeInitiatorSK  left join warehouse.dimFacility df on fp.anchorAdmitFacilityKey = df.facilitySK  left join warehouse.dimFacility pac on fp.anchorPostAcuteAdmitFacilityKey = pac.facilitySK  left join warehouse.dimPatient dp on fp.patientKey = dp.patientSK  left join warehouse.dimLookup dlk on dp.totalRiskScore = dlk.lookupName  left join warehouse.dimDRG d on fp.currDrgKey = d.drgSK  left join warehouse.dimRegionMarket rm on rm.rgSK = fp.rgRemKey  left join warehouse.dimRegionMarket rmp on rmp.rgSK = fp.rgPartnerKey  left join warehouse.dimPhysician dpy on fp.physicianKey = dpy.physicianSK  where fp.bundleRisk = 1  and fp.episodeCountReport = 1  and df.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;)  and pac.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;)  and de.bpid not like &apos;%DEMO%&apos;  and dlk.lookupCategory = &apos;patientRisk&apos;  and fp.anchorAdmitDateKey  &gt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup  where lookupCategory = &apos;ClaimsCubeDate&apos;)  and fp.NSOCType in (&apos;SNF&apos;,&apos;LTCH&apos;,&apos;OTHER&apos;,&apos;HHA&apos;,&apos;HOME&apos;,&apos;IRF&apos;)  ${E_BPID}  ${E_CCN} ${E_BUNDLE} ${E_R_REGION} ${E_R_MARKET} ${E_REGION} ${E_MARKET} ${E_PARTICIPANTNAME}  ${E_DRGCODE} ${E_PHY_NPI} ${E_Model}  )a; </stringProp>
                <stringProp name="0"></stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
          </UserParameters>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Discharge to SNF Benchmark (EC Claims)" enabled="true">
          <stringProp name="TestPlan.comments">	</stringProp>
          <stringProp name="dataSource">MySQLQA</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">${Query}</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">dischtoSNFBenchmark_EC_Claims</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">if(!vars.get(&quot;bpid&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_BPID&quot;,&quot;and e.bpid in  ${bpid}&quot;);	
} else {
	vars.put(&quot;C_BPID&quot;,&quot;&quot;);
}
if(!vars.get(&quot;ccn&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_CCN&quot;,&quot;and f.ccn in ${ccn}&quot;);	
} else{
	vars.put(&quot;C_CCN&quot;,&quot;&quot;);
}
if(!vars.get(&quot;bundle&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_BUNDLE&quot;,&quot;and drg.bundleName in ${bundle}&quot;);	
} else{
	vars.put(&quot;C_BUNDLE&quot;,&quot;&quot;);
}
if(!vars.get(&quot;r_region&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_R_REGION&quot;,&quot;and rm.region in  ${r_region}&quot;);	
} else {
	vars.put(&quot;C_R_REGION&quot;,&quot;&quot;);
}
if(!vars.get(&quot;r_market&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_R_MARKET&quot;,&quot;and rm.market in ${r_market}&quot;);	
} else{
	vars.put(&quot;C_R_MARKET&quot;,&quot;&quot;);
}
if(!vars.get(&quot;region&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_REGION&quot;,&quot;and rmp.region in  ${region}&quot;);	
} else {
	vars.put(&quot;C_REGION&quot;,&quot;&quot;);
}
if(!vars.get(&quot;market&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_MARKET&quot;,&quot;and rmp.market in ${market}&quot;);	
} else{
	vars.put(&quot;C_MARKET&quot;,&quot;&quot;);
}
if(!vars.get(&quot;participantName&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_PARTICIPANTNAME&quot;,&quot;and de.participantNameInitCap in ${participantName}&quot;);	
} else{
	vars.put(&quot;C_PARTICIPANTNAME&quot;,&quot;&quot;);
}
if(!vars.get(&quot;drgCode&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_DRGCODE&quot;,&quot;and drg.drgCode in ${drgCode}&quot;);	
} else{
	vars.put(&quot;C_DRGCODE&quot;,&quot;&quot;);
}
if(!vars.get(&quot;npi&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_PHY_NPI&quot;,&quot;and p.npi in ${npi}&quot;);	
} else{
	vars.put(&quot;C_PHY_NPI&quot;,&quot;&quot;);
}
if(!vars.get(&quot;model&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_Model&quot;,&quot;and c.Model in ${model}&quot;);	
} else{
	vars.put(&quot;C_Model&quot;,&quot;&quot;);
}
if(!vars.get(&quot;bpid&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_BPID&quot;,&quot;and fp.BPID in  ${bpid}&quot;);	
} else {
	vars.put(&quot;E_BPID&quot;,&quot;&quot;);
}
if(!vars.get(&quot;ccn&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_CCN&quot;,&quot;and df.ccn in ${ccn}&quot;);	
} else{
	vars.put(&quot;E_CCN&quot;,&quot;&quot;);
}
if(!vars.get(&quot;bundle&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_BUNDLE&quot;,&quot;and d.bundleName in ${bundle}&quot;);	
} else{
	vars.put(&quot;E_BUNDLE&quot;,&quot;&quot;);
}
if(!vars.get(&quot;r_region&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_R_REGION&quot;,&quot;and rm.region in  ${r_region}&quot;);	
} else {
	vars.put(&quot;E_R_REGION&quot;,&quot;&quot;);
}
if(!vars.get(&quot;r_market&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_R_MARKET&quot;,&quot;and rm.market in ${r_market}&quot;);	
} else{
	vars.put(&quot;E_R_MARKET&quot;,&quot;&quot;);
}
if(!vars.get(&quot;region&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_REGION&quot;,&quot;and rmp.region in  ${region}&quot;);	
} else {
	vars.put(&quot;E_REGION&quot;,&quot;&quot;);
}
if(!vars.get(&quot;market&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_MARKET&quot;,&quot;and rmp.market in ${market}&quot;);	
} else{
	vars.put(&quot;E_MARKET&quot;,&quot;&quot;);
}
if(!vars.get(&quot;participantName&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_PARTICIPANTNAME&quot;,&quot;and e.participantName in ${participantName}&quot;);	
} else{
	vars.put(&quot;E_PARTICIPANTNAME&quot;,&quot;&quot;);
}
if(!vars.get(&quot;drgCode&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_DRGCODE&quot;,&quot;and d.drgCode in ${drgCode}&quot;);	
} else{
	vars.put(&quot;E_DRGCODE&quot;,&quot;&quot;);
}
if(!vars.get(&quot;npi&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_PHY_NPI&quot;,&quot;and dpy.npi in ${npi}&quot;);	
} else{
	vars.put(&quot;E_PHY_NPI&quot;,&quot;&quot;);
}
if(!vars.get(&quot;model&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_Model&quot;,&quot;and fp.Model in ${model}&quot;);	
} else{
	vars.put(&quot;E_Model&quot;,&quot;&quot;);
}	
	</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="78391464">Query</stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="444820623">
                <stringProp name="-48018626">select round((sum(a.baseSNF)/sum(a.baseEpicounts))*100, 1) as dischtoSNFBenchmarkEC_ClaimsUnion  from ( select e.bpid, SUM(baseSNF) as baseSNF, sum(baseEpicounts) as baseEpicounts  from warehouse.factClaims c   left join warehouse.dimFacility f ON c.anchorFacilityKey = f.facilitySK   left join warehouse.dimFacility pac ON c.postAcuteFacilityKey = pac.facilitySK   left join warehouse.dimEpisodeInitiator e ON c.episodeInitiatorKey = e.episodeInitiatorSK   left JOIN warehouse.dimDRG drg ON c.anchorDrgKey = drg.drgSK   left JOIN warehouse.dimPhysician p ON c.physicianKey = p.physicianSK     left JOIN warehouse.dimRegionMarket rm ON c.rgRemKey = rm.rgSK   left JOIN warehouse.dimRegionMarket rmp ON c.rgPartnerKey = rmp.rgSK    where f.dwhSource in (&apos;Claims&apos;, &apos;ZeroKey&apos;,&apos;emblemClaims&apos;)    and pac.dwhSource in (&apos;Claims&apos;, &apos;ZeroKey&apos;,&apos;emblemClaims&apos;)   and e.bpid not like &apos;%DEMO%&apos;  and c.atRisk=&apos;Y&apos;    and c.anchorBeginDateKey &gt;= ${STARTDATE}    and c.anchorBeginDateKey &lt;= (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup  where lookupCategory = &apos;ClaimsCubeDate&apos;) ${C_BPID}  ${C_CCN} ${C_BUNDLE} ${C_R_REGION} ${C_R_MARKET}  ${C_REGION} ${C_MARKET} ${C_PARTICIPANTNAME}  ${C_DRGCODE} ${C_PHY_NPI} ${C_Model} and c.targetPrice &lt;&gt; 0  union  select fp.BPID, sum(fp.baseSNF) as baseSNF, sum(fp.baseEpiCounts) as baseEpicounts  from warehouse.factPatientEpisode fp   left join warehouse.dimEpisodeInitiator de on fp.episodeInitiatorKey = de.episodeInitiatorSK  left join warehouse.dimFacility df on fp.anchorAdmitFacilityKey = df.facilitySK  left join warehouse.dimFacility pac on fp.anchorPostAcuteAdmitFacilityKey = pac.facilitySK  left join warehouse.dimPatient dp on fp.patientKey = dp.patientSK  left join warehouse.dimLookup dlk on dp.totalRiskScore = dlk.lookupName  left join warehouse.dimDRG d on fp.currDrgKey = d.drgSK  left join warehouse.dimRegionMarket rm on rm.rgSK = fp.rgRemKey  left join warehouse.dimRegionMarket rmp on rmp.rgSK = fp.rgPartnerKey  left join warehouse.dimPhysician dpy on fp.physicianKey = dpy.physicianSK  where fp.bundleRisk = 1  and fp.episodeCountReport = 1  and df.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;)  and pac.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;)  and de.bpid not like &apos;%DEMO%&apos;  and dlk.lookupCategory = &apos;patientRisk&apos;  and fp.anchorAdmitDateKey  &gt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;)  and fp.NSOCType in (&apos;SNF&apos;,&apos;LTCH&apos;,&apos;OTHER&apos;,&apos;HHA&apos;,&apos;HOME&apos;,&apos;IRF&apos;)  ${E_BPID}  ${E_CCN} ${E_BUNDLE} ${E_R_REGION} ${E_R_MARKET} ${E_REGION} ${E_MARKET} ${E_PARTICIPANTNAME}  ${E_DRGCODE} ${E_PHY_NPI} ${E_Model}  )a;  </stringProp>
                <stringProp name="0"></stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
          </UserParameters>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SNF Days (EC Claims)" enabled="true">
          <stringProp name="dataSource">MySQLQA</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">${Query}</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">SNFDays_EC_Claims</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">if(!vars.get(&quot;bpid&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_BPID&quot;,&quot;and e.bpid in  ${bpid}&quot;);	
} else {
	vars.put(&quot;C_BPID&quot;,&quot;&quot;);
}
if(!vars.get(&quot;ccn&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_CCN&quot;,&quot;and f.ccn in ${ccn}&quot;);	
} else{
	vars.put(&quot;C_CCN&quot;,&quot;&quot;);
}
if(!vars.get(&quot;bundle&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_BUNDLE&quot;,&quot;and drg.bundleName in ${bundle}&quot;);	
} else{
	vars.put(&quot;C_BUNDLE&quot;,&quot;&quot;);
}
if(!vars.get(&quot;r_region&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_R_REGION&quot;,&quot;and rm.region in  ${r_region}&quot;);	
} else {
	vars.put(&quot;C_R_REGION&quot;,&quot;&quot;);
}
if(!vars.get(&quot;r_market&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_R_MARKET&quot;,&quot;and rm.market in ${r_market}&quot;);	
} else{
	vars.put(&quot;C_R_MARKET&quot;,&quot;&quot;);
}
if(!vars.get(&quot;region&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_REGION&quot;,&quot;and rmp.region in  ${region}&quot;);	
} else {
	vars.put(&quot;C_REGION&quot;,&quot;&quot;);
}
if(!vars.get(&quot;market&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_MARKET&quot;,&quot;and rmp.market in ${market}&quot;);	
} else{
	vars.put(&quot;C_MARKET&quot;,&quot;&quot;);
}
if(!vars.get(&quot;participantName&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_PARTICIPANTNAME&quot;,&quot;and de.participantNameInitCap in ${participantName}&quot;);	
} else{
	vars.put(&quot;C_PARTICIPANTNAME&quot;,&quot;&quot;);
}
if(!vars.get(&quot;drgCode&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_DRGCODE&quot;,&quot;and drg.drgCode in ${drgCode}&quot;);	
} else{
	vars.put(&quot;C_DRGCODE&quot;,&quot;&quot;);
}
if(!vars.get(&quot;npi&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_PHY_NPI&quot;,&quot;and p.npi in ${npi}&quot;);	
} else{
	vars.put(&quot;C_PHY_NPI&quot;,&quot;&quot;);
}
if(!vars.get(&quot;model&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_Model&quot;,&quot;and c.Model in ${model}&quot;);	
} else{
	vars.put(&quot;C_Model&quot;,&quot;&quot;);
}
if(!vars.get(&quot;bpid&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_BPID&quot;,&quot;and fp.BPID in  ${bpid}&quot;);	
} else {
	vars.put(&quot;E_BPID&quot;,&quot;&quot;);
}
if(!vars.get(&quot;ccn&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_CCN&quot;,&quot;and df.ccn in ${ccn}&quot;);	
} else{
	vars.put(&quot;E_CCN&quot;,&quot;&quot;);
}
if(!vars.get(&quot;bundle&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_BUNDLE&quot;,&quot;and d.bundleName in ${bundle}&quot;);	
} else{
	vars.put(&quot;E_BUNDLE&quot;,&quot;&quot;);
}
if(!vars.get(&quot;r_region&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_R_REGION&quot;,&quot;and rm.region in  ${r_region}&quot;);	
} else {
	vars.put(&quot;E_R_REGION&quot;,&quot;&quot;);
}
if(!vars.get(&quot;r_market&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_R_MARKET&quot;,&quot;and rm.market in ${r_market}&quot;);	
} else{
	vars.put(&quot;E_R_MARKET&quot;,&quot;&quot;);
}
if(!vars.get(&quot;region&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_REGION&quot;,&quot;and rmp.region in  ${region}&quot;);	
} else {
	vars.put(&quot;E_REGION&quot;,&quot;&quot;);
}
if(!vars.get(&quot;market&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_MARKET&quot;,&quot;and rmp.market in ${market}&quot;);	
} else{
	vars.put(&quot;E_MARKET&quot;,&quot;&quot;);
}
if(!vars.get(&quot;participantName&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_PARTICIPANTNAME&quot;,&quot;and e.participantName in ${participantName}&quot;);	
} else{
	vars.put(&quot;E_PARTICIPANTNAME&quot;,&quot;&quot;);
}
if(!vars.get(&quot;drgCode&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_DRGCODE&quot;,&quot;and d.drgCode in ${drgCode}&quot;);	
} else{
	vars.put(&quot;E_DRGCODE&quot;,&quot;&quot;);
}
if(!vars.get(&quot;npi&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_PHY_NPI&quot;,&quot;and dpy.npi in ${npi}&quot;);	
} else{
	vars.put(&quot;E_PHY_NPI&quot;,&quot;&quot;);
}
if(!vars.get(&quot;model&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_Model&quot;,&quot;and fp.Model in ${model}&quot;);	
} else{
	vars.put(&quot;E_Model&quot;,&quot;&quot;);
}	
	</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="78391464">Query</stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="456116648">
                <stringProp name="-240870818">select round(sum(a.snfDaysTrimmed)/sum(a.Episodes),1) as SNFDaysEC_ClaimsUnion from ( select sum(c.snfDaysTrimmed) as snfDaysTrimmed , sum(if(c.snfDaysTrimmed,1,0)) as Episodes from warehouse.factClaims c   left join warehouse.dimFacility f ON c.anchorFacilityKey = f.facilitySK   left join warehouse.dimFacility pac ON c.postAcuteFacilityKey = pac.facilitySK   left join warehouse.dimEpisodeInitiator e ON c.episodeInitiatorKey = e.episodeInitiatorSK   left JOIN warehouse.dimDRG drg ON c.anchorDrgKey = drg.drgSK   left JOIN warehouse.dimPhysician p ON c.physicianKey = p.physicianSK     left JOIN warehouse.dimRegionMarket rm ON c.rgRemKey = rm.rgSK   left JOIN warehouse.dimRegionMarket rmp ON c.rgPartnerKey = rmp.rgSK    where f.dwhSource in (&apos;Claims&apos;, &apos;ZeroKey&apos;,&apos;emblemClaims&apos;)    and pac.dwhSource in (&apos;Claims&apos;, &apos;ZeroKey&apos;,&apos;emblemClaims&apos;)   and e.bpid not like &apos;%DEMO%&apos;  and c.atRisk=&apos;Y&apos;     and c.anchorBeginDateKey &gt;= ${STARTDATE}   and c.anchorBeginDateKey &lt;= (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;)  ${C_BPID}  ${C_CCN} ${C_BUNDLE} ${C_R_REGION} ${C_R_MARKET}  ${C_REGION} ${C_MARKET} ${C_PARTICIPANTNAME}  ${C_DRGCODE} ${C_PHY_NPI} ${C_Model}   and c.postAcuteCategory in (&apos;SNF&apos;,&apos;LTCH&apos;,&apos;IRF&apos;,&apos;Other&apos;,&apos;HHA&apos;,&apos;Home&apos;) and c.targetPrice &lt;&gt; 0    union  select sum(case when (fp.dataQualityFlag not like &apos;%Invalid%&apos; and fp.totalSNFDays &gt;= 90) then 90 when (fp.dataQualityFlag not like &apos;%Invalid%&apos; ) then fp.totalSNFDays else 0 end ) as snfDaysTrimmed, sum(if((fp.totalSNFDays &gt; 0 and fp.dataQualityFlag not like &apos;Invalid%&apos;),fp.currEpiCounts,0)) as Episodes     from warehouse.factPatientEpisode fp   left join warehouse.dimEpisodeInitiator de on fp.episodeInitiatorKey = de.episodeInitiatorSK  left join warehouse.dimFacility df on fp.anchorAdmitFacilityKey = df.facilitySK  left join warehouse.dimFacility pac on fp.anchorPostAcuteAdmitFacilityKey = pac.facilitySK  left join warehouse.dimPatient dp on fp.patientKey = dp.patientSK  left join warehouse.dimLookup dlk on dp.totalRiskScore = dlk.lookupName  left join warehouse.dimDRG d on fp.currDrgKey = d.drgSK  left join warehouse.dimRegionMarket rm on rm.rgSK = fp.rgRemKey  left join warehouse.dimRegionMarket rmp on rmp.rgSK = fp.rgPartnerKey  left join warehouse.dimPhysician dpy on fp.physicianKey = dpy.physicianSK  where fp.bundleRisk = 1   and fp.totalSNFDays &gt; 0  and fp.dataQualityFlag not like &apos;%Invalid%&apos;  and fp.episodeCountReport = 1  and df.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;)  and pac.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;)  and de.bpid not like &apos;%DEMO%&apos;  and dlk.lookupCategory = &apos;patientRisk&apos;  and fp.anchorAdmitDateKey  &gt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;)  ${E_BPID}  ${E_CCN} ${E_BUNDLE} ${E_R_REGION} ${E_R_MARKET} ${E_REGION} ${E_MARKET} ${E_PARTICIPANTNAME}  ${E_DRGCODE} ${E_PHY_NPI} ${E_Model} )a;</stringProp>
                <stringProp name="0"></stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
          </UserParameters>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SNF Days Benchmark (EC Claims)" enabled="true">
          <stringProp name="dataSource">MySQLQA</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">${Query}</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">SNFDaysBenchmark_EC_Claims</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">if(!vars.get(&quot;bpid&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_BPID&quot;,&quot;and e.bpid in  ${bpid}&quot;);	
} else {
	vars.put(&quot;C_BPID&quot;,&quot;&quot;);
}
if(!vars.get(&quot;ccn&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_CCN&quot;,&quot;and f.ccn in ${ccn}&quot;);	
} else{
	vars.put(&quot;C_CCN&quot;,&quot;&quot;);
}
if(!vars.get(&quot;bundle&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_BUNDLE&quot;,&quot;and drg.bundleName in ${bundle}&quot;);	
} else{
	vars.put(&quot;C_BUNDLE&quot;,&quot;&quot;);
}
if(!vars.get(&quot;r_region&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_R_REGION&quot;,&quot;and rm.region in  ${r_region}&quot;);	
} else {
	vars.put(&quot;C_R_REGION&quot;,&quot;&quot;);
}
if(!vars.get(&quot;r_market&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_R_MARKET&quot;,&quot;and rm.market in ${r_market}&quot;);	
} else{
	vars.put(&quot;C_R_MARKET&quot;,&quot;&quot;);
}
if(!vars.get(&quot;region&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_REGION&quot;,&quot;and rmp.region in  ${region}&quot;);	
} else {
	vars.put(&quot;C_REGION&quot;,&quot;&quot;);
}
if(!vars.get(&quot;market&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_MARKET&quot;,&quot;and rmp.market in ${market}&quot;);	
} else{
	vars.put(&quot;C_MARKET&quot;,&quot;&quot;);
}
if(!vars.get(&quot;participantName&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_PARTICIPANTNAME&quot;,&quot;and de.participantNameInitCap in ${participantName}&quot;);	
} else{
	vars.put(&quot;C_PARTICIPANTNAME&quot;,&quot;&quot;);
}
if(!vars.get(&quot;drgCode&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_DRGCODE&quot;,&quot;and drg.drgCode in ${drgCode}&quot;);	
} else{
	vars.put(&quot;C_DRGCODE&quot;,&quot;&quot;);
}
if(!vars.get(&quot;npi&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_PHY_NPI&quot;,&quot;and p.npi in ${npi}&quot;);	
} else{
	vars.put(&quot;C_PHY_NPI&quot;,&quot;&quot;);
}
if(!vars.get(&quot;model&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_Model&quot;,&quot;and c.Model in ${model}&quot;);	
} else{
	vars.put(&quot;C_Model&quot;,&quot;&quot;);
}
if(!vars.get(&quot;bpid&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_BPID&quot;,&quot;and fp.BPID in  ${bpid}&quot;);	
} else {
	vars.put(&quot;E_BPID&quot;,&quot;&quot;);
}
if(!vars.get(&quot;ccn&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_CCN&quot;,&quot;and df.ccn in ${ccn}&quot;);	
} else{
	vars.put(&quot;E_CCN&quot;,&quot;&quot;);
}
if(!vars.get(&quot;bundle&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_BUNDLE&quot;,&quot;and d.bundleName in ${bundle}&quot;);	
} else{
	vars.put(&quot;E_BUNDLE&quot;,&quot;&quot;);
}
if(!vars.get(&quot;r_region&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_R_REGION&quot;,&quot;and rm.region in  ${r_region}&quot;);	
} else {
	vars.put(&quot;E_R_REGION&quot;,&quot;&quot;);
}
if(!vars.get(&quot;r_market&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_R_MARKET&quot;,&quot;and rm.market in ${r_market}&quot;);	
} else{
	vars.put(&quot;E_R_MARKET&quot;,&quot;&quot;);
}
if(!vars.get(&quot;region&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_REGION&quot;,&quot;and rmp.region in  ${region}&quot;);	
} else {
	vars.put(&quot;E_REGION&quot;,&quot;&quot;);
}
if(!vars.get(&quot;market&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_MARKET&quot;,&quot;and rmp.market in ${market}&quot;);	
} else{
	vars.put(&quot;E_MARKET&quot;,&quot;&quot;);
}
if(!vars.get(&quot;participantName&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_PARTICIPANTNAME&quot;,&quot;and e.participantName in ${participantName}&quot;);	
} else{
	vars.put(&quot;E_PARTICIPANTNAME&quot;,&quot;&quot;);
}
if(!vars.get(&quot;drgCode&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_DRGCODE&quot;,&quot;and d.drgCode in ${drgCode}&quot;);	
} else{
	vars.put(&quot;E_DRGCODE&quot;,&quot;&quot;);
}
if(!vars.get(&quot;npi&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_PHY_NPI&quot;,&quot;and dpy.npi in ${npi}&quot;);	
} else{
	vars.put(&quot;E_PHY_NPI&quot;,&quot;&quot;);
}
if(!vars.get(&quot;model&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_Model&quot;,&quot;and fp.Model in ${model}&quot;);	
} else{
	vars.put(&quot;E_Model&quot;,&quot;&quot;);
}	
	</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="78391464">Query</stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-1152361119">
                <stringProp name="410642906">select round(sum(a.baseSNFDays)/sum(a.baseSNFCount),1) as SNFDaysBenchmarkEC_Claims  from ( select sum(c.baseSNFDays) as baseSNFDays, sum(c.baseSNFCount) as baseSNFCount  from warehouse.factClaims c   left join warehouse.dimFacility f ON c.anchorFacilityKey = f.facilitySK   left join warehouse.dimFacility pac ON c.postAcuteFacilityKey = pac.facilitySK   left join warehouse.dimEpisodeInitiator e ON c.episodeInitiatorKey = e.episodeInitiatorSK   left JOIN warehouse.dimDRG drg ON c.anchorDrgKey = drg.drgSK   left JOIN warehouse.dimPhysician p ON c.physicianKey = p.physicianSK     left JOIN warehouse.dimRegionMarket rm ON c.rgRemKey = rm.rgSK   left JOIN warehouse.dimRegionMarket rmp ON c.rgPartnerKey = rmp.rgSK    where f.dwhSource in (&apos;Claims&apos;, &apos;ZeroKey&apos;,&apos;emblemClaims&apos;)    and pac.dwhSource in (&apos;Claims&apos;, &apos;ZeroKey&apos;,&apos;emblemClaims&apos;)   and e.bpid not like &apos;%DEMO%&apos;  and c.atRisk=&apos;Y&apos;     and c.anchorBeginDateKey &gt;= ${STARTDATE}   and c.anchorBeginDateKey &lt;= (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;)  and c.postAcuteCategory in (&apos;SNF&apos;,&apos;LTCH&apos;,&apos;IRF&apos;,&apos;Other&apos;,&apos;HHA&apos;,&apos;Home&apos;)   ${C_BPID}  ${C_CCN} ${C_BUNDLE} ${C_R_REGION} ${C_R_MARKET}  ${C_REGION} ${C_MARKET} ${C_PARTICIPANTNAME}  ${C_DRGCODE} ${C_PHY_NPI} ${C_Model}   and c.targetPrice &lt;&gt; 0  and c.snfDaysTrimmed &gt; 0  union  select sum(fp.baseSNFDays) as baseSNFDays, sum(fp.baseEpiCounts) as baseEpiCounts  from warehouse.factPatientEpisode fp   left join warehouse.dimEpisodeInitiator de on fp.episodeInitiatorKey = de.episodeInitiatorSK  left join warehouse.dimFacility df on fp.anchorAdmitFacilityKey = df.facilitySK  left join warehouse.dimFacility pac on fp.anchorPostAcuteAdmitFacilityKey = pac.facilitySK  left join warehouse.dimPatient dp on fp.patientKey = dp.patientSK  left join warehouse.dimLookup dlk on dp.totalRiskScore = dlk.lookupName  left join warehouse.dimDRG d on fp.currDrgKey = d.drgSK  left join warehouse.dimRegionMarket rm on rm.rgSK = fp.rgRemKey  left join warehouse.dimRegionMarket rmp on rmp.rgSK = fp.rgPartnerKey  left join warehouse.dimPhysician dpy on fp.physicianKey = dpy.physicianSK  where fp.bundleRisk = 1  and fp.totalSNFDays &gt; 0   and fp.dataQualityFlag not like &apos;%Invalid%&apos; and fp.episodeCountReport = 1  and df.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;)  and pac.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;)  and de.bpid not like &apos;%DEMO%&apos; and dlk.lookupCategory = &apos;patientRisk&apos;  and fp.anchorAdmitDateKey  &gt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;)  ${E_BPID}  ${E_CCN} ${E_BUNDLE} ${E_R_REGION} ${E_R_MARKET} ${E_REGION} ${E_MARKET} ${E_PARTICIPANTNAME}  ${E_DRGCODE} ${E_PHY_NPI} ${E_Model}  )a;</stringProp>
                <stringProp name="0"></stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
          </UserParameters>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Episodes With Readmission (EC Claims)" enabled="true">
          <stringProp name="dataSource">MySQLQA</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">${Query}</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">EpisodesWithReadmission_EC_Claims</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">if(!vars.get(&quot;bpid&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_BPID&quot;,&quot;and e.bpid in  ${bpid}&quot;);	
} else {
	vars.put(&quot;C_BPID&quot;,&quot;&quot;);
}
if(!vars.get(&quot;ccn&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_CCN&quot;,&quot;and f.ccn in ${ccn}&quot;);	
} else{
	vars.put(&quot;C_CCN&quot;,&quot;&quot;);
}
if(!vars.get(&quot;bundle&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_BUNDLE&quot;,&quot;and drg.bundleName in ${bundle}&quot;);	
} else{
	vars.put(&quot;C_BUNDLE&quot;,&quot;&quot;);
}
if(!vars.get(&quot;r_region&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_R_REGION&quot;,&quot;and rm.region in  ${r_region}&quot;);	
} else {
	vars.put(&quot;C_R_REGION&quot;,&quot;&quot;);
}
if(!vars.get(&quot;r_market&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_R_MARKET&quot;,&quot;and rm.market in ${r_market}&quot;);	
} else{
	vars.put(&quot;C_R_MARKET&quot;,&quot;&quot;);
}
if(!vars.get(&quot;region&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_REGION&quot;,&quot;and rmp.region in  ${region}&quot;);	
} else {
	vars.put(&quot;C_REGION&quot;,&quot;&quot;);
}
if(!vars.get(&quot;market&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_MARKET&quot;,&quot;and rmp.market in ${market}&quot;);	
} else{
	vars.put(&quot;C_MARKET&quot;,&quot;&quot;);
}
if(!vars.get(&quot;participantName&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_PARTICIPANTNAME&quot;,&quot;and de.participantNameInitCap in ${participantName}&quot;);	
} else{
	vars.put(&quot;C_PARTICIPANTNAME&quot;,&quot;&quot;);
}
if(!vars.get(&quot;drgCode&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_DRGCODE&quot;,&quot;and drg.drgCode in ${drgCode}&quot;);	
} else{
	vars.put(&quot;C_DRGCODE&quot;,&quot;&quot;);
}
if(!vars.get(&quot;npi&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_PHY_NPI&quot;,&quot;and p.npi in ${npi}&quot;);	
} else{
	vars.put(&quot;C_PHY_NPI&quot;,&quot;&quot;);
}
if(!vars.get(&quot;model&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_Model&quot;,&quot;and c.Model in ${model}&quot;);	
} else{
	vars.put(&quot;C_Model&quot;,&quot;&quot;);
}
if(!vars.get(&quot;bpid&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_BPID&quot;,&quot;and fp.BPID in  ${bpid}&quot;);	
} else {
	vars.put(&quot;E_BPID&quot;,&quot;&quot;);
}
if(!vars.get(&quot;ccn&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_CCN&quot;,&quot;and df.ccn in ${ccn}&quot;);	
} else{
	vars.put(&quot;E_CCN&quot;,&quot;&quot;);
}
if(!vars.get(&quot;bundle&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_BUNDLE&quot;,&quot;and d.bundleName in ${bundle}&quot;);	
} else{
	vars.put(&quot;E_BUNDLE&quot;,&quot;&quot;);
}
if(!vars.get(&quot;r_region&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_R_REGION&quot;,&quot;and rm.region in  ${r_region}&quot;);	
} else {
	vars.put(&quot;E_R_REGION&quot;,&quot;&quot;);
}
if(!vars.get(&quot;r_market&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_R_MARKET&quot;,&quot;and rm.market in ${r_market}&quot;);	
} else{
	vars.put(&quot;E_R_MARKET&quot;,&quot;&quot;);
}
if(!vars.get(&quot;region&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_REGION&quot;,&quot;and rmp.region in  ${region}&quot;);	
} else {
	vars.put(&quot;E_REGION&quot;,&quot;&quot;);
}
if(!vars.get(&quot;market&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_MARKET&quot;,&quot;and rmp.market in ${market}&quot;);	
} else{
	vars.put(&quot;E_MARKET&quot;,&quot;&quot;);
}
if(!vars.get(&quot;participantName&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_PARTICIPANTNAME&quot;,&quot;and e.participantName in ${participantName}&quot;);	
} else{
	vars.put(&quot;E_PARTICIPANTNAME&quot;,&quot;&quot;);
}
if(!vars.get(&quot;drgCode&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_DRGCODE&quot;,&quot;and d.drgCode in ${drgCode}&quot;);	
} else{
	vars.put(&quot;E_DRGCODE&quot;,&quot;&quot;);
}
if(!vars.get(&quot;npi&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_PHY_NPI&quot;,&quot;and dpy.npi in ${npi}&quot;);	
} else{
	vars.put(&quot;E_PHY_NPI&quot;,&quot;&quot;);
}
if(!vars.get(&quot;model&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_Model&quot;,&quot;and fp.Model in ${model}&quot;);	
} else{
	vars.put(&quot;E_Model&quot;,&quot;&quot;);
}	
	</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="78391464">Query</stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="262924703">
                <stringProp name="-1235505046">select round((sum(a.readmissionCounter)/sum(a.Episodes))*100, 1) as EpisodesWithReadmissionEC_ClaimsUnion   from ( select sum(if((c.readmission_flag) = 1,1,0)) as readmissionCounter, sum(c.currEpiCounts) as Episodes from warehouse.factClaims c   left join warehouse.dimFacility f ON c.anchorFacilityKey = f.facilitySK   left join warehouse.dimFacility pac ON c.postAcuteFacilityKey = pac.facilitySK   left join warehouse.dimEpisodeInitiator e ON c.episodeInitiatorKey = e.episodeInitiatorSK   left JOIN warehouse.dimDRG drg ON c.anchorDrgKey = drg.drgSK   left JOIN warehouse.dimPhysician p ON c.physicianKey = p.physicianSK     left JOIN warehouse.dimRegionMarket rm ON c.rgRemKey = rm.rgSK   left JOIN warehouse.dimRegionMarket rmp ON c.rgPartnerKey = rmp.rgSK    where f.dwhSource in (&apos;Claims&apos;, &apos;ZeroKey&apos;,&apos;emblemClaims&apos;)    and pac.dwhSource in (&apos;Claims&apos;, &apos;ZeroKey&apos;,&apos;emblemClaims&apos;)   and e.bpid not like &apos;%DEMO%&apos;  and c.atRisk=&apos;Y&apos;  and c.anchorBeginDateKey &gt;= ${STARTDATE}    and c.anchorBeginDateKey &lt;= (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;) ${C_BPID}  ${C_CCN} ${C_BUNDLE} ${C_R_REGION} ${C_R_MARKET}  ${C_REGION} ${C_MARKET} ${C_PARTICIPANTNAME}  ${C_DRGCODE} ${C_PHY_NPI} ${C_Model} and c.targetPrice &lt;&gt; 0  union  select sum(if((fp.readmissionCounter) &gt;= 1 , 1, 0)) as readmissionCounter, sum(fp.episodeCountReport) as Episodes  from warehouse.factPatientEpisode fp   left join warehouse.dimEpisodeInitiator de on fp.episodeInitiatorKey = de.episodeInitiatorSK  left join warehouse.dimFacility df on fp.anchorAdmitFacilityKey = df.facilitySK  left join warehouse.dimFacility pac on fp.anchorPostAcuteAdmitFacilityKey = pac.facilitySK  left join warehouse.dimPatient dp on fp.patientKey = dp.patientSK  left join warehouse.dimLookup dlk on dp.totalRiskScore = dlk.lookupName  left join warehouse.dimDRG d on fp.currDrgKey = d.drgSK  left join warehouse.dimRegionMarket rm on rm.rgSK = fp.rgRemKey  left join warehouse.dimRegionMarket rmp on rmp.rgSK = fp.rgPartnerKey  left join warehouse.dimPhysician dpy on fp.physicianKey = dpy.physicianSK  where fp.bundleRisk = 1  and fp.episodeCountReport = 1  and df.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;)  and pac.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;)  and de.bpid not like &apos;%DEMO%&apos;  and dlk.lookupCategory = &apos;patientRisk&apos;  and fp.anchorAdmitDateKey  &gt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;) ${E_BPID}  ${E_CCN} ${E_BUNDLE} ${E_R_REGION} ${E_R_MARKET} ${E_REGION} ${E_MARKET} ${E_PARTICIPANTNAME}  ${E_DRGCODE} ${E_PHY_NPI} ${E_Model}  )a;</stringProp>
                <stringProp name="0"></stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
          </UserParameters>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Episodes With Readmission Benchmark (EC Claims)" enabled="true">
          <stringProp name="dataSource">MySQLQA</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">${Query}</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">EpisodesWithReadmissionBenchmark_EC_Claims</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">if(!vars.get(&quot;bpid&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_BPID&quot;,&quot;and e.bpid in  ${bpid}&quot;);	
} else {
	vars.put(&quot;C_BPID&quot;,&quot;&quot;);
}
if(!vars.get(&quot;ccn&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_CCN&quot;,&quot;and f.ccn in ${ccn}&quot;);	
} else{
	vars.put(&quot;C_CCN&quot;,&quot;&quot;);
}
if(!vars.get(&quot;bundle&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_BUNDLE&quot;,&quot;and drg.bundleName in ${bundle}&quot;);	
} else{
	vars.put(&quot;C_BUNDLE&quot;,&quot;&quot;);
}
if(!vars.get(&quot;r_region&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_R_REGION&quot;,&quot;and rm.region in  ${r_region}&quot;);	
} else {
	vars.put(&quot;C_R_REGION&quot;,&quot;&quot;);
}
if(!vars.get(&quot;r_market&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_R_MARKET&quot;,&quot;and rm.market in ${r_market}&quot;);	
} else{
	vars.put(&quot;C_R_MARKET&quot;,&quot;&quot;);
}
if(!vars.get(&quot;region&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_REGION&quot;,&quot;and rmp.region in  ${region}&quot;);	
} else {
	vars.put(&quot;C_REGION&quot;,&quot;&quot;);
}
if(!vars.get(&quot;market&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_MARKET&quot;,&quot;and rmp.market in ${market}&quot;);	
} else{
	vars.put(&quot;C_MARKET&quot;,&quot;&quot;);
}
if(!vars.get(&quot;participantName&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_PARTICIPANTNAME&quot;,&quot;and de.participantNameInitCap in ${participantName}&quot;);	
} else{
	vars.put(&quot;C_PARTICIPANTNAME&quot;,&quot;&quot;);
}
if(!vars.get(&quot;drgCode&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_DRGCODE&quot;,&quot;and drg.drgCode in ${drgCode}&quot;);	
} else{
	vars.put(&quot;C_DRGCODE&quot;,&quot;&quot;);
}
if(!vars.get(&quot;npi&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_PHY_NPI&quot;,&quot;and p.npi in ${npi}&quot;);	
} else{
	vars.put(&quot;C_PHY_NPI&quot;,&quot;&quot;);
}
if(!vars.get(&quot;model&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_Model&quot;,&quot;and c.Model in ${model}&quot;);	
} else{
	vars.put(&quot;C_Model&quot;,&quot;&quot;);
}
if(!vars.get(&quot;bpid&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_BPID&quot;,&quot;and fp.BPID in  ${bpid}&quot;);	
} else {
	vars.put(&quot;E_BPID&quot;,&quot;&quot;);
}
if(!vars.get(&quot;ccn&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_CCN&quot;,&quot;and df.ccn in ${ccn}&quot;);	
} else{
	vars.put(&quot;E_CCN&quot;,&quot;&quot;);
}
if(!vars.get(&quot;bundle&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_BUNDLE&quot;,&quot;and d.bundleName in ${bundle}&quot;);	
} else{
	vars.put(&quot;E_BUNDLE&quot;,&quot;&quot;);
}
if(!vars.get(&quot;r_region&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_R_REGION&quot;,&quot;and rm.region in  ${r_region}&quot;);	
} else {
	vars.put(&quot;E_R_REGION&quot;,&quot;&quot;);
}
if(!vars.get(&quot;r_market&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_R_MARKET&quot;,&quot;and rm.market in ${r_market}&quot;);	
} else{
	vars.put(&quot;E_R_MARKET&quot;,&quot;&quot;);
}
if(!vars.get(&quot;region&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_REGION&quot;,&quot;and rmp.region in  ${region}&quot;);	
} else {
	vars.put(&quot;E_REGION&quot;,&quot;&quot;);
}
if(!vars.get(&quot;market&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_MARKET&quot;,&quot;and rmp.market in ${market}&quot;);	
} else{
	vars.put(&quot;E_MARKET&quot;,&quot;&quot;);
}
if(!vars.get(&quot;participantName&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_PARTICIPANTNAME&quot;,&quot;and e.participantName in ${participantName}&quot;);	
} else{
	vars.put(&quot;E_PARTICIPANTNAME&quot;,&quot;&quot;);
}
if(!vars.get(&quot;drgCode&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_DRGCODE&quot;,&quot;and d.drgCode in ${drgCode}&quot;);	
} else{
	vars.put(&quot;E_DRGCODE&quot;,&quot;&quot;);
}
if(!vars.get(&quot;npi&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_PHY_NPI&quot;,&quot;and dpy.npi in ${npi}&quot;);	
} else{
	vars.put(&quot;E_PHY_NPI&quot;,&quot;&quot;);
}
if(!vars.get(&quot;model&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;E_Model&quot;,&quot;and fp.Model in ${model}&quot;);	
} else{
	vars.put(&quot;E_Model&quot;,&quot;&quot;);
}	
	</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="78391464">Query</stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-115906693">
                <stringProp name="-1388713313">select round((sum(a.baseEpiReadmissions)/sum(a.baseEpicounts))*100, 1) as EpisodesWithReadmissionBenchmarkEC_ClaimsUnion  from (select SUM(c.baseEpiReadmissions) as baseEpiReadmissions, sum(c.baseEpiCounts) as baseEpicounts  from warehouse.factClaims c   left join warehouse.dimFacility f ON c.anchorFacilityKey = f.facilitySK    left join warehouse.dimFacility pac ON c.postAcuteFacilityKey = pac.facilitySK    left join warehouse.dimEpisodeInitiator e ON c.episodeInitiatorKey = e.episodeInitiatorSK    left JOIN warehouse.dimDRG drg ON c.anchorDrgKey = drg.drgSK    left JOIN warehouse.dimPhysician p ON c.physicianKey = p.physicianSK      left JOIN warehouse.dimRegionMarket rm ON c.rgRemKey = rm.rgSK    left JOIN warehouse.dimRegionMarket rmp ON c.rgPartnerKey = rmp.rgSK     where f.dwhSource in (&apos;Claims&apos;, &apos;ZeroKey&apos;,&apos;emblemClaims&apos;)     and pac.dwhSource in (&apos;Claims&apos;, &apos;ZeroKey&apos;,&apos;emblemClaims&apos;)   and e.bpid not like &apos;%DEMO%&apos;  and c.atRisk=&apos;Y&apos;     and c.anchorBeginDateKey &gt;= ${STARTDATE}     and c.anchorBeginDateKey &lt;= (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;)  ${C_BPID}  ${C_CCN} ${C_BUNDLE} ${C_R_REGION} ${C_R_MARKET}  ${C_REGION} ${C_MARKET} ${C_PARTICIPANTNAME}  ${C_DRGCODE} ${C_PHY_NPI} ${C_Model}  and c.targetPrice &lt;&gt; 0    union    select SUM(fp.baseEpiReadmissions) as baseEpiReadmissions, sum(fp.baseEpiCounts) as baseEpiCounts   from warehouse.factPatientEpisode fp    left join warehouse.dimEpisodeInitiator de on fp.episodeInitiatorKey = de.episodeInitiatorSK   left join warehouse.dimFacility df on fp.anchorAdmitFacilityKey = df.facilitySK   left join warehouse.dimFacility pac on fp.anchorPostAcuteAdmitFacilityKey = pac.facilitySK   left join warehouse.dimPatient dp on fp.patientKey = dp.patientSK   left join warehouse.dimLookup dlk on dp.totalRiskScore = dlk.lookupName   left join warehouse.dimDRG d on fp.currDrgKey = d.drgSK   left join warehouse.dimRegionMarket rm on rm.rgSK = fp.rgRemKey   left join warehouse.dimRegionMarket rmp on rmp.rgSK = fp.rgPartnerKey   left join warehouse.dimPhysician dpy on fp.physicianKey = dpy.physicianSK   where fp.bundleRisk = 1  and fp.episodeCountReport = 1   and df.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;) and pac.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;)   and de.bpid not like &apos;%DEMO%&apos;   and dlk.lookupCategory = &apos;patientRisk&apos;   and fp.anchorAdmitDateKey  &gt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;)  ${E_BPID}  ${E_CCN} ${E_BUNDLE} ${E_R_REGION} ${E_R_MARKET} ${E_REGION} ${E_MARKET} ${E_PARTICIPANTNAME}  ${E_DRGCODE} ${E_PHY_NPI} ${E_Model}   )a;</stringProp>
                <stringProp name="0"></stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
          </UserParameters>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="OS Process Sampler" enabled="true">
          <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
          <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
          <stringProp name="SystemSampler.command">cmd.exe</stringProp>
          <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">/c</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">echo KPI_Episode_EC_Claims=${Episode_EC_Claims_1}*Savings Rate_EC_Claims=${savingRate_EC_Claims_1}*KPI_NPRA_EC_Claims=${TotalNPRA_EC_Claims_1}*KPI_Program_size_EC_Claims=${TotalProgram_EC_Claims_1}*% SNF Disch Current_EC_Claims=${DischargeToSNF_EC_Claims_1}*SNF Days Current_EC_Claims=${SNFDays_EC_Claims_1}*SNF Days Benchmark Variance_EC_Claims=${SNFDaysBenchmark_EC_Claims_1}*Readmissions Current_EC_Claims=${EpisodesWithReadmission_EC_Claims_1}*Readmissions Benchmark Variance_EC_Claims=${EpisodesWithReadmissionBenchmark_EC_Claims_1}*% SNF Disch Benchmark Variance_EC_Claims=${dischtoSNFBenchmark_EC_Claims_1}&gt;&gt;ClaimsECMetricsOuput.txt</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SystemSampler.directory">${__BeanShell(import org.apache.jmeter.services.FileServer; FileServer.getFileServer().getBaseDir();)}${__BeanShell(File.separator,)}</stringProp>
        </SystemSampler>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
