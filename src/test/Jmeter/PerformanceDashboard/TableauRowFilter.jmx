<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="4.0" jmeter="4.0 r1823414">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
        <stringProp name="dataSource">MySQLQA</stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="checkQuery">Select 1</stringProp>
        <stringProp name="dbUrl">jdbc:mysql://rds-qa.remedypartners.com:3306/warehouse</stringProp>
        <stringProp name="driver">com.mysql.jdbc.Driver</stringProp>
        <stringProp name="username">salam</stringProp>
        <stringProp name="password">1Welcome2</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Performace DashBoard" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1511452775000</longProp>
        <longProp name="ThreadGroup.end_time">1511452775000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
        <hashTree>
          <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="OS Process Sampler" enabled="false">
            <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
            <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
            <stringProp name="SystemSampler.command">cmd.exe</stringProp>
            <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="Argument">
                  <stringProp name="Argument.name"></stringProp>
                  <stringProp name="Argument.value">-c</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="" elementType="Argument">
                  <stringProp name="Argument.name"></stringProp>
                  <stringProp name="Argument.value">echo &quot;ECEpiosdeCount,claimsEpiosdeCount,savingRate,TotalNPRA, TotalProgram&quot; &gt;&gt; PerformanceDashboardResult.txt</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="SystemSampler.directory">C:\Users\sandeep.singh\Desktop\Tableautestpaln</stringProp>
          </SystemSampler>
          <hashTree/>
        </hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="NumberOfEppisode" enabled="true">
          <stringProp name="filename">RowFilterInputs.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">userName,startdate,enddate,bpid,ccn</stringProp>
          <stringProp name="delimiter">|</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
        </CSVDataSet>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="BPID Filter " enabled="true">
          <stringProp name="dataSource">MySQLQA</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select distinct a.episodeInitiatorNameInitCap, a.bpid from 
(select
distinct de.episodeInitiatorNameInitCap, de.bpid
from warehouse.factPatientEpisode fp 
inner join warehouse.dimEpisodeInitiator de on fp.episodeInitiatorKey = de.episodeInitiatorSK
inner join warehouse.dimFacility df on fp.anchorAdmitFacilityKey = df.facilitySK
inner join warehouse.dimFacility pac on fp.anchorPostAcuteAdmitFacilityKey = pac.facilitySK
inner join warehouse.dimPatient dp on fp.patientKey = dp.patientSK
inner join warehouse.dimLookup dlk on dp.totalRiskScore = dlk.lookupName
Inner JOIN 
    (
 SELECT tabUserSecurityBPID.bpid, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityBPID where username = ${userName}
       GROUP BY bpid
       )tbsBPID ON de.BPID = tbsBPID.bpid
Inner JOIN 
     (       
        SELECT tabUserSecurityCCN.ccn, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityCCN where username = ${userName}
       GROUP BY ccn
        )tbsCCN on df.ccn=tbsCCN.ccn
Inner JOIN 
     (       
        SELECT tabUserSecurityFacilityKey.facilitykey, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityFacilityKey where username = ${userName}
       GROUP BY facilitykey
        )tbsFacilityKey on df.sourceFacilityKey=tbsFacilityKey.facilitykey      
where fp.bundleRisk = 1 
and fp.episodeCountReport = 1
and df.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;) and pac.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;)
and de.bpid not like &apos;%DEMO%&apos;
and dlk.lookupCategory = &apos;patientRisk&apos;
and fp.anchorAdmitDateKey  &gt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;)
and fp.anchorAdmitDateKey &lt;= ${enddate}
union
select distinct 
e.episodeInitiatorNameInitCap, e.bpid
from warehouse.factClaims c
    LEFT JOIN warehouse.dimFacility f ON c.anchorFacilityKey = f.facilitySK
    LEFT JOIN warehouse.dimFacility pac ON c.postAcuteFacilityKey = pac.facilitySK       
    LEFT JOIN warehouse.dimEpisodeInitiator e ON c.episodeInitiatorKey = e.episodeInitiatorSK        
    inner JOIN 
    (
 SELECT tabUserSecurityBPID.bpid, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityBPID  where ${userName}
       GROUP BY bpid
       )tbsBPID ON e.BPID = tbsBPID.bpid
WHERE c.atRisk=&apos;Y&apos; 
 and f.dwhSource in (&apos;Claims&apos;, &apos;ZeroKey&apos;,&apos;emblemClaims&apos;) 
 and pac.dwhSource in (&apos;Claims&apos;, &apos;ZeroKey&apos;,&apos;emblemClaims&apos;)
and tbsBPID.username  like ${userName}
and c.anchorBeginDateKey &gt;= ${startdate}
and c.anchorBeginDateKey &lt;=  (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;)
)
a
order by a.episodeInitiatorNameInitCap, a.bpid;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">episodeInitiatorNameInitCap, q_bpid</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">System.out.println(&quot;Started BeanShell-------------------&gt;&gt;&gt;&gt;&quot;);

</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import java.util.ArrayList;

System.out.println(&quot;Post Started---Inner&quot;);
String var = vars.get(&quot;bpid_1&quot;);
int var1 = Integer.parseInt(vars.get(&quot;bpid_#&quot;));
ArrayList al = new ArrayList();
for(int i=1;i&lt;=var1;i++){
al.add(vars.get(&quot;bpid1_&quot;+i));
}
vars.put(&quot;value&quot;,al.toString());
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Facility Name CCN" enabled="true">
          <stringProp name="dataSource">MySQLQA</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select distinct a.facilityName, a.ccn from 
(select
distinct df.facilityName, df.ccn
from warehouse.factPatientEpisode fp 
inner join warehouse.dimEpisodeInitiator de on fp.episodeInitiatorKey = de.episodeInitiatorSK
inner join warehouse.dimFacility df on fp.anchorAdmitFacilityKey = df.facilitySK
inner join warehouse.dimFacility pac on fp.anchorPostAcuteAdmitFacilityKey = pac.facilitySK
inner join warehouse.dimPatient dp on fp.patientKey = dp.patientSK
inner join warehouse.dimLookup dlk on dp.totalRiskScore = dlk.lookupName
Inner JOIN 
    (
 SELECT tabUserSecurityBPID.bpid, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityBPID where username = ${userName}
       GROUP BY bpid
       )tbsBPID ON de.BPID = tbsBPID.bpid
Inner JOIN 
     (       
        SELECT tabUserSecurityCCN.ccn, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityCCN where username = ${userName}
       GROUP BY ccn
        )tbsCCN on df.ccn=tbsCCN.ccn
Inner JOIN 
     (       
        SELECT tabUserSecurityFacilityKey.facilitykey, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityFacilityKey where username = ${userName}
       GROUP BY facilitykey
        )tbsFacilityKey on df.sourceFacilityKey=tbsFacilityKey.facilitykey      
where fp.bundleRisk = 1 
and fp.episodeCountReport = 1
and df.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;) and pac.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;)
and de.bpid not like &apos;%DEMO%&apos;
and dlk.lookupCategory = &apos;patientRisk&apos;
and fp.anchorAdmitDateKey  &gt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;)
and fp.anchorAdmitDateKey &lt;= ${enddate}
and de.bpid in ${bpid}
union
select distinct 
f.facilityName, f.ccn
from warehouse.factClaims c
    LEFT JOIN warehouse.dimFacility f ON c.anchorFacilityKey = f.facilitySK
    LEFT JOIN warehouse.dimFacility pac ON c.postAcuteFacilityKey = pac.facilitySK       
    LEFT JOIN warehouse.dimEpisodeInitiator e ON c.episodeInitiatorKey = e.episodeInitiatorSK        
    inner JOIN 
    (
 SELECT tabUserSecurityBPID.bpid, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityBPID  where username = ${userName}
       GROUP BY bpid
       )tbsBPID ON e.BPID = tbsBPID.bpid
inner JOIN 
     (       
        SELECT tabUserSecurityCCN.ccn, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityCCN  where username = ${userName}
       GROUP BY ccn
        )tbsCCN on f.ccn=tbsCCN.ccn
WHERE c.atRisk=&apos;Y&apos; 
and f.dwhSource in (&apos;Claims&apos;, &apos;ZeroKey&apos;,&apos;emblemClaims&apos;) 
and pac.dwhSource in (&apos;Claims&apos;, &apos;ZeroKey&apos;,&apos;emblemClaims&apos;)
and c.anchorBeginDateKey &gt;= ${startdate}
-- and c.anchorBeginDateKey &lt;=  (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;)
and e.bpid in ${bpid})
a order by facilityName;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">facilityName, ccn</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="BundleName" enabled="false">
          <stringProp name="dataSource">MySQLQA</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select distinct a.bundleName from
(select
distinct d.bundleName
from warehouse.factPatientEpisode fp
inner join warehouse.dimEpisodeInitiator de on fp.episodeInitiatorKey = de.episodeInitiatorSK
inner join warehouse.dimFacility df on fp.anchorAdmitFacilityKey = df.facilitySK
inner join warehouse.dimFacility pac on fp.anchorPostAcuteAdmitFacilityKey = pac.facilitySK
inner join warehouse.dimPatient dp on fp.patientKey = dp.patientSK
inner join warehouse.dimLookup dlk on dp.totalRiskScore = dlk.lookupName
inner join warehouse.dimDRG d on fp.currDrgKey = d.drgSK
Inner JOIN
    (
 SELECT tabUserSecurityBPID.bpid, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityBPID where username = ${userName}
       GROUP BY bpid
       )tbsBPID ON de.BPID = tbsBPID.bpid
Inner JOIN
     (       
        SELECT tabUserSecurityCCN.ccn, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityCCN where username = ${userName}
       GROUP BY ccn
        )tbsCCN on df.ccn=tbsCCN.ccn
Inner JOIN
     (       
        SELECT tabUserSecurityFacilityKey.facilitykey, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityFacilityKey where username = ${userName}
       GROUP BY facilitykey
        )tbsFacilityKey on df.sourceFacilityKey=tbsFacilityKey.facilitykey      
where fp.bundleRisk = 1
and fp.episodeCountReport = 1
and df.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;) and pac.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;)
and de.bpid not like &apos;%DEMO%&apos;
and dlk.lookupCategory = &apos;patientRisk&apos;
and fp.anchorAdmitDateKey  &gt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;)
and fp.anchorAdmitDateKey &lt;= 20180820
and de.bpid in ${bpid}
and df.ccn in ${ccn}
union
select distinct
drg.bundleName
from warehouse.factClaims c
    LEFT JOIN
warehouse.dimFacility f ON c.anchorFacilityKey = f.facilitySK
    LEFT JOIN
warehouse.dimFacility pac ON c.postAcuteFacilityKey = pac.facilitySK       
    LEFT JOIN
warehouse.dimEpisodeInitiator e ON c.episodeInitiatorKey = e.episodeInitiatorSK
    LEFT JOIN
warehouse.dimPhysician p ON c.physicianKey = p.physicianSK    
    LEFT JOIN
warehouse.dimDRG drg ON c.anchorDrgKey = drg.drgSK
    inner JOIN
    (
 SELECT tabUserSecurityBPID.bpid, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityBPID  where username = ${userName}
       GROUP BY bpid
       )tbsBPID ON e.BPID = tbsBPID.bpid
inner JOIN
     (       
        SELECT tabUserSecurityCCN.ccn, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityCCN  where username = ${userName}
       GROUP BY ccn
        )tbsCCN on f.ccn=tbsCCN.ccn

WHERE c.atRisk=&apos;Y&apos;
and f.dwhSource in (&apos;Claims&apos;, &apos;ZeroKey&apos;,&apos;emblemClaims&apos;)
and pac.dwhSource in (&apos;Claims&apos;, &apos;ZeroKey&apos;,&apos;emblemClaims&apos;)
and c.anchorBeginDateKey &gt;= 20160101
-- and c.anchorBeginDateKey &lt;=  (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;)
and e.bpid in ${bpid}
and f.ccn in ${ccn}
-- and p.npi = @test_physician_npi -- Use this parameter when validating the filters on Physician dashboard
) a
order by a.bundleName;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">bundleName</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Remedy Region Market " enabled="false">
          <stringProp name="dataSource">MySQLQA</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select distinct region, market
from
(select
distinct rm.region, rm.market
from warehouse.factPatientEpisode fp 
inner join warehouse.dimEpisodeInitiator de on fp.episodeInitiatorKey = de.episodeInitiatorSK
inner join warehouse.dimFacility df on fp.anchorAdmitFacilityKey = df.facilitySK
inner join warehouse.dimFacility pac on fp.anchorPostAcuteAdmitFacilityKey = pac.facilitySK
inner join warehouse.dimRegionMarket rm on rm.rgSK = fp.rgRemKey
inner join warehouse.dimPatient dp on fp.patientKey = dp.patientSK
inner join warehouse.dimLookup dlk on dp.totalRiskScore = dlk.lookupName
inner join warehouse.dimDRG d on fp.currDrgKey = d.drgSK
Inner JOIN 
    (
 SELECT tabUserSecurityBPID.bpid, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityBPID where username = ${userName}
       GROUP BY bpid
       )tbsBPID ON de.BPID = tbsBPID.bpid
Inner JOIN 
     (       
        SELECT tabUserSecurityCCN.ccn, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityCCN where username = ${userName}
       GROUP BY ccn
        )tbsCCN on df.ccn=tbsCCN.ccn
Inner JOIN 
     (       
        SELECT tabUserSecurityFacilityKey.facilitykey, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityFacilityKey where username = ${userName}
       GROUP BY facilitykey
        )tbsFacilityKey on df.sourceFacilityKey=tbsFacilityKey.facilitykey      
where fp.bundleRisk = 1 
and fp.episodeCountReport = 1
and df.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;) and pac.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;)
and de.bpid not like &apos;%DEMO%&apos;
and dlk.lookupCategory = &apos;patientRisk&apos;
and fp.anchorAdmitDateKey  &gt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;)
and de.bpid in ${bpid}
union
select distinct 
rm.region, rm.market
from warehouse.factClaims c
	LEFT JOIN
warehouse.dimFacility f ON c.anchorFacilityKey = f.facilitySK
    LEFT JOIN
warehouse.dimFacility pac ON c.postAcuteFacilityKey = pac.facilitySK       
	LEFT JOIN 
warehouse.dimEpisodeInitiator e ON c.episodeInitiatorKey = e.episodeInitiatorSK
    LEFT JOIN
warehouse.dimPhysician p ON c.physicianKey = p.physicianSK    
	LEFT JOIN
warehouse.dimDRG drg ON c.anchorDrgKey = drg.drgSK
	LEFT JOIN
warehouse.dimRegionMarket rm ON c.rgRemKey = rm.rgSK
	inner JOIN 
    (
 SELECT tabUserSecurityBPID.bpid, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityBPID  where username = ${userName}
       GROUP BY bpid
       )tbsBPID ON e.BPID = tbsBPID.bpid
inner JOIN 
     (       
        SELECT tabUserSecurityCCN.ccn, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityCCN  where username = ${userName}
       GROUP BY ccn
        )tbsCCN on f.ccn=tbsCCN.ccn

WHERE c.atRisk=&apos;Y&apos; 
and f.dwhSource in (&apos;Claims&apos;, &apos;ZeroKey&apos;,&apos;emblemClaims&apos;) 
and pac.dwhSource in (&apos;Claims&apos;, &apos;ZeroKey&apos;,&apos;emblemClaims&apos;)
and c.anchorBeginDateKey &gt;= 20170101

and c.anchorBeginDateKey &lt;=  (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;)
and e.bpid in ${bpid}
-- and f.ccn = @test_ccn
-- and p.npi = @test_physician_npi -- Use this parameter when validating the filters on Physician dashboard
)a
order by region, market;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">remedyRegion, remedyMarket</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Partner Region Market" enabled="false">
          <stringProp name="dataSource">MySQLQA</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select distinct regionPartner, marketPartner
from
(select
distinct rm.region as regionPartner, rm.market as marketPartner
from warehouse.factPatientEpisode fp 
inner join warehouse.dimEpisodeInitiator de on fp.episodeInitiatorKey = de.episodeInitiatorSK
inner join warehouse.dimFacility df on fp.anchorAdmitFacilityKey = df.facilitySK
inner join warehouse.dimFacility pac on fp.anchorPostAcuteAdmitFacilityKey = pac.facilitySK
inner join warehouse.dimRegionMarket rm on rm.rgSK = fp.rgPartnerKey
inner join warehouse.dimPatient dp on fp.patientKey = dp.patientSK
inner join warehouse.dimLookup dlk on dp.totalRiskScore = dlk.lookupName
inner join warehouse.dimDRG d on fp.currDrgKey = d.drgSK
Inner JOIN 
    (
 SELECT tabUserSecurityBPID.bpid, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityBPID where username = ${userName}
       GROUP BY bpid
       )tbsBPID ON de.BPID = tbsBPID.bpid
Inner JOIN 
     (       
        SELECT tabUserSecurityCCN.ccn, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityCCN where username = ${userName}
       GROUP BY ccn
        )tbsCCN on df.ccn=tbsCCN.ccn
Inner JOIN 
     (       
        SELECT tabUserSecurityFacilityKey.facilitykey, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityFacilityKey where username = ${userName}
       GROUP BY facilitykey
        )tbsFacilityKey on df.sourceFacilityKey=tbsFacilityKey.facilitykey      
where fp.bundleRisk = 1 
and fp.episodeCountReport = 1
and df.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;) and pac.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;)
and de.bpid not like &apos;%DEMO%&apos;
and dlk.lookupCategory = &apos;patientRisk&apos;
and fp.anchorAdmitDateKey  &gt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;)
and de.bpid in ${bpid}
union
select distinct 
rmp.region, rmp.market
from warehouse.factClaims c
	LEFT JOIN
warehouse.dimFacility f ON c.anchorFacilityKey = f.facilitySK
    LEFT JOIN
warehouse.dimFacility pac ON c.postAcuteFacilityKey = pac.facilitySK       
	LEFT JOIN 
warehouse.dimEpisodeInitiator e ON c.episodeInitiatorKey = e.episodeInitiatorSK
    LEFT JOIN
warehouse.dimPhysician p ON c.physicianKey = p.physicianSK    
	LEFT JOIN
warehouse.dimDRG drg ON c.anchorDrgKey = drg.drgSK
	LEFT JOIN
warehouse.dimRegionMarket rm ON c.rgRemKey = rm.rgSK
	LEFT JOIN
warehouse.dimRegionMarket rmp ON c.rgPartnerKey = rmp.rgSK
	inner JOIN 
    (
 SELECT tabUserSecurityBPID.bpid, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityBPID  where username = ${userName}
       GROUP BY bpid
       )tbsBPID ON e.BPID = tbsBPID.bpid
inner JOIN 
     (       
        SELECT tabUserSecurityCCN.ccn, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityCCN  where username = ${userName}
       GROUP BY ccn
        )tbsCCN on f.ccn=tbsCCN.ccn
WHERE c.atRisk=&apos;Y&apos; 
and f.dwhSource in (&apos;Claims&apos;, &apos;ZeroKey&apos;,&apos;emblemClaims&apos;) 
and pac.dwhSource in (&apos;Claims&apos;, &apos;ZeroKey&apos;,&apos;emblemClaims&apos;)
and e.bpid  not like &apos;%DEMO%&apos; 
and c.anchorBeginDateKey &gt;= 20170101
and c.anchorBeginDateKey &lt;=  (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;)
and e.bpid in ${bpid}
-- and f.ccn = @test_ccn
-- and p.npi = @test_physician_npi
-- and rm.region = @test_region
-- and rm.market = @test_market
) a
order by regionPartner, marketPartner;
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">partnerRegion, partnerMarket</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Participant" enabled="false">
          <stringProp name="dataSource">MySQLQA</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select distinct a.participantName from 
(select
distinct de.participantName
from warehouse.factPatientEpisode fp 
inner join warehouse.dimEpisodeInitiator de on fp.episodeInitiatorKey = de.episodeInitiatorSK
inner join warehouse.dimFacility df on fp.anchorAdmitFacilityKey = df.facilitySK
inner join warehouse.dimFacility pac on fp.anchorPostAcuteAdmitFacilityKey = pac.facilitySK
inner join warehouse.dimRegionMarket rm on rm.rgSK = fp.rgPartnerKey
inner join warehouse.dimPatient dp on fp.patientKey = dp.patientSK
inner join warehouse.dimLookup dlk on dp.totalRiskScore = dlk.lookupName
inner join warehouse.dimDRG d on fp.currDrgKey = d.drgSK
Inner JOIN 
    (
 SELECT tabUserSecurityBPID.bpid, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityBPID where username = ${userName}
       GROUP BY bpid
       )tbsBPID ON de.BPID = tbsBPID.bpid
Inner JOIN 
     (       
        SELECT tabUserSecurityCCN.ccn, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityCCN where username = ${userName}
       GROUP BY ccn
        )tbsCCN on df.ccn=tbsCCN.ccn
Inner JOIN 
     (       
        SELECT tabUserSecurityFacilityKey.facilitykey, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityFacilityKey where username = ${userName}
       GROUP BY facilitykey
        )tbsFacilityKey on df.sourceFacilityKey=tbsFacilityKey.facilitykey      
where fp.bundleRisk = 1 
and fp.episodeCountReport = 1
and df.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;) and pac.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;)
and de.bpid not like &apos;%DEMO%&apos;
and dlk.lookupCategory = &apos;patientRisk&apos;
and fp.anchorAdmitDateKey  &gt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;)
and de.bpid in ${bpid}
union
select distinct 
e.participantNameInitCap
from warehouse.factClaims c
	LEFT JOIN
warehouse.dimFacility f ON c.anchorFacilityKey = f.facilitySK
    LEFT JOIN
warehouse.dimFacility pac ON c.postAcuteFacilityKey = pac.facilitySK       
	LEFT JOIN 
warehouse.dimEpisodeInitiator e ON c.episodeInitiatorKey = e.episodeInitiatorSK
    LEFT JOIN
warehouse.dimPhysician p ON c.physicianKey = p.physicianSK    
	LEFT JOIN
warehouse.dimDRG drg ON c.anchorDrgKey = drg.drgSK
	LEFT JOIN
warehouse.dimRegionMarket rm ON c.rgRemKey = rm.rgSK
	LEFT JOIN
warehouse.dimRegionMarket rmp ON c.rgPartnerKey = rmp.rgSK
	inner JOIN 
    (
 SELECT tabUserSecurityBPID.bpid, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityBPID  where username = ${userName}
       GROUP BY bpid
       )tbsBPID ON e.BPID = tbsBPID.bpid
inner JOIN 
     (       
        SELECT tabUserSecurityCCN.ccn, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityCCN  where username = ${userName}
       GROUP BY ccn
        )tbsCCN on f.ccn=tbsCCN.ccn
WHERE c.atRisk=&apos;Y&apos; 
and f.dwhSource in (&apos;Claims&apos;, &apos;ZeroKey&apos;,&apos;emblemClaims&apos;) 
and pac.dwhSource in (&apos;Claims&apos;, &apos;ZeroKey&apos;,&apos;emblemClaims&apos;)
and e.bpid  not like &apos;%DEMO%&apos; 
and c.anchorBeginDateKey &gt;= 20170101
and c.anchorBeginDateKey &lt;=  (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;)
and e.bpid in ${bpid}
-- and f.ccn = @test_ccn
-- and p.npi = @test_physician_npi -- Use this parameter when validating the filters on Physician dashboard
-- and rm.region = @test_region
-- and rm.market = @test_market
-- and rmp.region = @test_partner_region
-- and rmp.market = @test_partner_market
) a
order by participantName;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">participantName</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DRG - Fracture" enabled="false">
          <stringProp name="dataSource">MySQLQA</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select distinct a.DRG_Fracture from 
(select
distinct case when d.drgCode is null then null else d.drgCode end as drgCode,
     CONCAT(d.drgName ,&apos; (&apos;,d.drgCode,&apos;)&apos;) as &apos;DRG_Fracture&apos;
from warehouse.factPatientEpisode fp 
inner join warehouse.dimEpisodeInitiator de on fp.episodeInitiatorKey = de.episodeInitiatorSK
inner join warehouse.dimFacility df on fp.anchorAdmitFacilityKey = df.facilitySK
inner join warehouse.dimFacility pac on fp.anchorPostAcuteAdmitFacilityKey = pac.facilitySK
inner join warehouse.dimDRG d on fp.currDrgKey = d.drgSK
inner join warehouse.dimRegionMarket rm on rm.rgSK = fp.rgPartnerKey
inner join warehouse.dimPatient dp on fp.patientKey = dp.patientSK
inner join warehouse.dimLookup dlk on dp.totalRiskScore = dlk.lookupName
Inner JOIN 
    (
 SELECT tabUserSecurityBPID.bpid, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityBPID where username = ${userName}
       GROUP BY bpid
       )tbsBPID ON de.BPID = tbsBPID.bpid
Inner JOIN 
     (       
        SELECT tabUserSecurityCCN.ccn, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityCCN where username = ${userName}
       GROUP BY ccn
        )tbsCCN on df.ccn=tbsCCN.ccn
Inner JOIN 
     (       
        SELECT tabUserSecurityFacilityKey.facilitykey, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityFacilityKey where username = ${userName}
       GROUP BY facilitykey
        )tbsFacilityKey on df.sourceFacilityKey=tbsFacilityKey.facilitykey      
where fp.bundleRisk = 1 
and fp.episodeCountReport = 1
and df.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;) and pac.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;)
and de.bpid not like &apos;%DEMO%&apos;
and dlk.lookupCategory = &apos;patientRisk&apos;
and fp.anchorAdmitDateKey  &gt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;)
and de.bpid in ${bpid}
and df.ccn in ${ccn}
union
select distinct 
    case when drg.drgCode is null then null else drg.drgCode end as drgCode, 
     case when drg.drgcode in (469,470) and drg.drgsubcode=0 then CONCAT(drg.drgName, &apos; - &apos;, drg.drgsubname,&apos; (&apos;,drg.drgcode ,&apos; - NF)&apos;)
     when drg.drgcode in (469,470) and drg.drgsubcode=1 then CONCAT(drg.drgName, &apos; - &apos;, drg.drgsubname,&apos; (&apos;,drg.drgcode ,&apos; - F)&apos;)
     when drg.drgcode in (469,470) and drg.drgsubcode=-99 then CONCAT( drg.drgName, &apos; - &apos;, drg.drgsubname,&apos; (&apos;, drg.drgcode ,&apos; - U)&apos;)
     else CONCAT(drg.drgName,&apos; (&apos;,drg.drgcode ,&apos;)&apos;)
    end as &apos;DRG_Fracture&apos;
from warehouse.factClaims c
	LEFT JOIN
warehouse.dimFacility f ON c.anchorFacilityKey = f.facilitySK
    LEFT JOIN
warehouse.dimFacility pac ON c.postAcuteFacilityKey = pac.facilitySK       
	LEFT JOIN 
warehouse.dimEpisodeInitiator e ON c.episodeInitiatorKey = e.episodeInitiatorSK
    LEFT JOIN
warehouse.dimPhysician p ON c.physicianKey = p.physicianSK    
	LEFT JOIN
warehouse.dimDRG drg ON c.anchorDrgKey = drg.drgSK
	LEFT JOIN
warehouse.dimRegionMarket rm ON c.rgRemKey = rm.rgSK
	LEFT JOIN
warehouse.dimRegionMarket rmp ON c.rgPartnerKey = rmp.rgSK
	inner JOIN 
    (
 SELECT tabUserSecurityBPID.bpid, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityBPID  where username = ${userName}
       GROUP BY bpid
       )tbsBPID ON e.BPID = tbsBPID.bpid
inner JOIN 
     (       
        SELECT tabUserSecurityCCN.ccn, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityCCN  where username = ${userName}
       GROUP BY ccn
        )tbsCCN on f.ccn=tbsCCN.ccn
WHERE c.atRisk=&apos;Y&apos; 
and f.dwhSource in (&apos;Claims&apos;, &apos;ZeroKey&apos;,&apos;emblemClaims&apos;) 
and pac.dwhSource in (&apos;Claims&apos;, &apos;ZeroKey&apos;,&apos;emblemClaims&apos;)
and e.bpid  not like &apos;%DEMO%&apos; 
and c.anchorBeginDateKey &gt;= 20170101

and c.anchorBeginDateKey &lt;=  (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;)
and e.bpid in ${bpid}
and f.ccn in ${ccn}
-- and p.npi = @test_physician_npi
-- and rm.region = @test_region
-- and rm.market = @test_market
-- and rmp.region = @test_partner_region
-- and rmp.market = @test_partner_market
-- and e.participantNameInitCap = @test_parrticipant
) a
order by a.DRG_Fracture;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">DRG_Fracture</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Physician - NPI Filter Validation" enabled="false">
          <stringProp name="dataSource">MySQLQA</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select distinct a.Physician_NPI
from
(select dpy.physicianNameInitCap, dpy.npi,
CONCAT(dpy.physicianNameInitCap,&apos; - &apos;, dpy.npi) as &apos;Physician_NPI&apos;
from warehouse.factPatientEpisode fp 
inner join warehouse.dimEpisodeInitiator de on fp.episodeInitiatorKey = de.episodeInitiatorSK
inner join warehouse.dimFacility df on fp.anchorAdmitFacilityKey = df.facilitySK
inner join warehouse.dimFacility pac on fp.anchorPostAcuteAdmitFacilityKey = pac.facilitySK
inner join warehouse.dimPhysician dpy on fp.physicianKey = dpy.physicianSK
inner join warehouse.dimDRG d on fp.currDrgKey = d.drgSK
inner join warehouse.dimRegionMarket rm on rm.rgSK = fp.rgPartnerKey
inner join warehouse.dimPatient dp on fp.patientKey = dp.patientSK
inner join warehouse.dimLookup dlk on dp.totalRiskScore = dlk.lookupName
Inner JOIN 
    (
 SELECT tabUserSecurityBPID.bpid, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityBPID where username = (&apos;Qafivedashtest@yopmail.com&apos;)
       GROUP BY bpid
       )tbsBPID ON de.BPID = tbsBPID.bpid
Inner JOIN 
     (       
        SELECT tabUserSecurityCCN.ccn, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityCCN where username = (&apos;Qafivedashtest@yopmail.com&apos;)
       GROUP BY ccn
        )tbsCCN on df.ccn=tbsCCN.ccn
Inner JOIN 
     (       
        SELECT tabUserSecurityFacilityKey.facilitykey, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityFacilityKey where username = (&apos;Qafivedashtest@yopmail.com&apos;)
       GROUP BY facilitykey
        )tbsFacilityKey on df.sourceFacilityKey=tbsFacilityKey.facilitykey      
where fp.bundleRisk = 1 
and fp.episodeCountReport = 1
and df.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;) and pac.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;)
and de.bpid not like &apos;%DEMO%&apos;
and dlk.lookupCategory = &apos;patientRisk&apos;
and fp.anchorAdmitDateKey  &gt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;)
and de.bpid in (&apos;2070-b72&apos;,&apos;2070-f10&apos;,&apos;2070-021&apos;,&apos;2070-f11&apos;)
and df.ccn in (&apos;340020&apos;,&apos;420101&apos;,&apos;420089&apos;,&apos;420080&apos;,&apos;220010&apos;,&apos;390223&apos;)
union
select distinct 
p.physicianNameInitCap, p.npi, 
CONCAT(p.physicianNameInitCap,&apos; - &apos;, p.npi) as &apos;Physician_NPI&apos;
from warehouse.factClaims c
	LEFT JOIN
warehouse.dimFacility f ON c.anchorFacilityKey = f.facilitySK
    LEFT JOIN
warehouse.dimFacility pac ON c.postAcuteFacilityKey = pac.facilitySK       
	LEFT JOIN 
warehouse.dimEpisodeInitiator e ON c.episodeInitiatorKey = e.episodeInitiatorSK
    LEFT JOIN
warehouse.dimPhysician p ON c.physicianKey = p.physicianSK        
inner JOIN 
    (
 SELECT tabUserSecurityBPID.bpid, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityBPID  where username = (&apos;Qafivedashtest@yopmail.com&apos;)
       GROUP BY bpid
       )tbsBPID ON e.BPID = tbsBPID.bpid
inner JOIN 
     (       
        SELECT tabUserSecurityCCN.ccn, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityCCN  where username = (&apos;Qafivedashtest@yopmail.com&apos;)
       GROUP BY ccn
        )tbsCCN on f.ccn=tbsCCN.ccn

WHERE c.atRisk=&apos;Y&apos; 
and f.dwhSource in (&apos;Claims&apos;, &apos;ZeroKey&apos;,&apos;emblemClaims&apos;) 
and pac.dwhSource in (&apos;Claims&apos;, &apos;ZeroKey&apos;,&apos;emblemClaims&apos;)
and c.anchorBeginDateKey &gt;= 20170101
and c.anchorBeginDateKey &lt;=  (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;)
and e.bpid in (&apos;2070-b72&apos;,&apos;2070-f10&apos;,&apos;2070-021&apos;,&apos;2070-f11&apos;)
and f.ccn in (&apos;340020&apos;,&apos;420101&apos;,&apos;420089&apos;,&apos;420080&apos;,&apos;220010&apos;,&apos;390223&apos;)
) a
order by a.Physician_NPI;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">Physician_NPI</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="MODEL Filter Validation" enabled="false">
          <stringProp name="dataSource">MySQLQA</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select distinct a.model
from
(select fp.model
from warehouse.factPatientEpisode fp 
inner join warehouse.dimEpisodeInitiator de on fp.episodeInitiatorKey = de.episodeInitiatorSK
inner join warehouse.dimFacility df on fp.anchorAdmitFacilityKey = df.facilitySK
inner join warehouse.dimFacility pac on fp.anchorPostAcuteAdmitFacilityKey = pac.facilitySK
inner join warehouse.dimPhysician dpy on fp.physicianKey = dpy.physicianSK
inner join warehouse.dimDRG d on fp.currDrgKey = d.drgSK
inner join warehouse.dimRegionMarket rm on rm.rgSK = fp.rgPartnerKey
inner join warehouse.dimPatient dp on fp.patientKey = dp.patientSK
inner join warehouse.dimLookup dlk on dp.totalRiskScore = dlk.lookupName
Inner JOIN 
    (
 SELECT tabUserSecurityBPID.bpid, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityBPID where username = ${userName}
       GROUP BY bpid
       )tbsBPID ON de.BPID = tbsBPID.bpid
Inner JOIN 
     (       
        SELECT tabUserSecurityCCN.ccn, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityCCN where username = ${userName}
       GROUP BY ccn
        )tbsCCN on df.ccn=tbsCCN.ccn
Inner JOIN 
     (       
        SELECT tabUserSecurityFacilityKey.facilitykey, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityFacilityKey where username = ${userName}
       GROUP BY facilitykey
        )tbsFacilityKey on df.sourceFacilityKey=tbsFacilityKey.facilitykey      
where fp.bundleRisk = 1 
and fp.episodeCountReport = 1
and df.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;) and pac.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;)
and de.bpid not like &apos;%DEMO%&apos;
and dlk.lookupCategory = &apos;patientRisk&apos;
and fp.anchorAdmitDateKey  &gt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;)
and de.bpid in ${bpid}
and df.ccn in ${ccn}
union
select distinct c.model
from warehouse.factClaims c
	LEFT JOIN
warehouse.dimFacility f ON c.anchorFacilityKey = f.facilitySK
    LEFT JOIN
warehouse.dimFacility pac ON c.postAcuteFacilityKey = pac.facilitySK       
	LEFT JOIN 
warehouse.dimEpisodeInitiator e ON c.episodeInitiatorKey = e.episodeInitiatorSK
    LEFT JOIN
warehouse.dimPhysician p ON c.physicianKey = p.physicianSK        
inner JOIN 
    (
 SELECT tabUserSecurityBPID.bpid, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityBPID  where username = ${userName}
       GROUP BY bpid
       )tbsBPID ON e.BPID = tbsBPID.bpid
inner JOIN 
     (       
        SELECT tabUserSecurityCCN.ccn, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityCCN  where username = ${userName}
       GROUP BY ccn
        )tbsCCN on f.ccn=tbsCCN.ccn

WHERE c.atRisk=&apos;Y&apos; 
and f.dwhSource in (&apos;Claims&apos;, &apos;ZeroKey&apos;,&apos;emblemClaims&apos;) 
and pac.dwhSource in (&apos;Claims&apos;, &apos;ZeroKey&apos;,&apos;emblemClaims&apos;)
and c.anchorBeginDateKey &gt;= 20170101
and c.anchorBeginDateKey &lt;=  (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;)
and e.bpid in ${bpid}
and f.ccn in ${ccn}
)
a;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">model</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Anchor Facility Details Filter Validation" enabled="false">
          <stringProp name="dataSource">MySQLQA</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select distinct a.facilityName, a.facilityNameInitCap, a.facilitySK
from
(select df.facilityName, df.facilityNameInitCap, df.facilitySK
from warehouse.factPatientEpisode fp 
inner join warehouse.dimEpisodeInitiator de on fp.episodeInitiatorKey = de.episodeInitiatorSK
inner join warehouse.dimFacility df on fp.anchorAdmitFacilityKey = df.facilitySK
inner join warehouse.dimFacility pac on fp.anchorPostAcuteAdmitFacilityKey = pac.facilitySK
inner join warehouse.dimPhysician dpy on fp.physicianKey = dpy.physicianSK
inner join warehouse.dimDRG d on fp.currDrgKey = d.drgSK
inner join warehouse.dimRegionMarket rm on rm.rgSK = fp.rgPartnerKey
inner join warehouse.dimPatient dp on fp.patientKey = dp.patientSK
inner join warehouse.dimLookup dlk on dp.totalRiskScore = dlk.lookupName
Inner JOIN 
    (
 SELECT tabUserSecurityBPID.bpid, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityBPID where username = ${userName}
       GROUP BY bpid
       )tbsBPID ON de.BPID = tbsBPID.bpid
Inner JOIN 
     (       
        SELECT tabUserSecurityCCN.ccn, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityCCN where username = ${userName}
       GROUP BY ccn
        )tbsCCN on df.ccn=tbsCCN.ccn
Inner JOIN 
     (       
        SELECT tabUserSecurityFacilityKey.facilitykey, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityFacilityKey where username = ${userName}
       GROUP BY facilitykey
        )tbsFacilityKey on df.sourceFacilityKey=tbsFacilityKey.facilitykey      
where fp.bundleRisk = 1 
and fp.episodeCountReport = 1
and df.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;) and pac.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;)
and de.bpid not like &apos;%DEMO%&apos;
and dlk.lookupCategory = &apos;patientRisk&apos;
and fp.anchorAdmitDateKey  &gt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;)
and de.bpid in ${bpid})
a;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">facilityNameInitCap</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Post Acute Facility CCN Validation" enabled="false">
          <stringProp name="dataSource">MySQLQA</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select distinct facilityName  as &apos;Post Acute Facility&apos;, ccn as &apos;pac_CCN&apos;  from 
(select
distinct pac.facilityName , pac.CCN
from warehouse.factPatientEpisode fp 
inner join warehouse.dimEpisodeInitiator de on fp.episodeInitiatorKey = de.episodeInitiatorSK
inner join warehouse.dimFacility df on fp.anchorAdmitFacilityKey = df.facilitySK
inner join warehouse.dimFacility pac on fp.anchorPostAcuteAdmitFacilityKey = pac.facilitySK
inner join warehouse.dimPatient dp on fp.patientKey = dp.patientSK
inner join warehouse.dimLookup dlk on dp.totalRiskScore = dlk.lookupName

-- inner join warehouse.dimFacility dfpac ON fp.postAcuteFacilityKey = dfpac.facilitySK
Inner JOIN 
    (
 SELECT tabUserSecurityBPID.bpid, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityBPID where username = ${userName}
       GROUP BY bpid
       )tbsBPID ON de.BPID = tbsBPID.bpid
Inner JOIN 
     (       
        SELECT tabUserSecurityCCN.ccn, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityCCN where username = ${userName}
       GROUP BY ccn
        )tbsCCN on df.ccn=tbsCCN.ccn
Inner JOIN 
     (       
        SELECT tabUserSecurityFacilityKey.facilitykey, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityFacilityKey where username = ${userName}
       GROUP BY facilitykey
        )tbsFacilityKey on df.sourceFacilityKey=tbsFacilityKey.facilitykey      
where fp.bundleRisk = 1 
and fp.episodeCountReport = 1
and df.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;) and pac.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;)
and de.bpid not like &apos;%DEMO%&apos;
and dlk.lookupCategory = &apos;patientRisk&apos;
and fp.anchorAdmitDateKey  &gt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;)
-- and fp.anchorAdmitDateKey &lt;= &apos;20180827&apos;
and de.bpid = ${bpid}
and df.ccn = &apos;390223&apos;
union
select distinct 
pac.facilityName , pac.CCN
from warehouse.factClaims c
 LEFT JOIN
warehouse.dimFacility f ON c.anchorFacilityKey = f.facilitySK
    LEFT JOIN
warehouse.dimFacility pac ON c.postAcuteFacilityKey = pac.facilitySK       
 LEFT JOIN 
warehouse.dimEpisodeInitiator e ON c.episodeInitiatorKey = e.episodeInitiatorSK 
 
-- left join warehouse.dimFacility dfpac ON c.postAcuteFacilityKey = dfpac.facilitySK     
 inner JOIN 
    (
 SELECT tabUserSecurityBPID.bpid, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityBPID  where username = ${userName}
       GROUP BY bpid
       )tbsBPID ON e.BPID = tbsBPID.bpid
inner JOIN 
     (       
        SELECT tabUserSecurityCCN.ccn, GROUP_CONCAT(username) AS username
        from warehouse.tabUserSecurityCCN  where username = ${userName}
       GROUP BY ccn
        )tbsCCN on f.ccn=tbsCCN.ccn
WHERE c.atRisk=&apos;Y&apos; 
and f.dwhSource in (&apos;Claims&apos;, &apos;ZeroKey&apos;,&apos;emblemClaims&apos;) 
and pac.dwhSource in (&apos;Claims&apos;, &apos;ZeroKey&apos;,&apos;emblemClaims&apos;)
and c.anchorBeginDateKey &gt;= &apos;20170101&apos;
-- and c.anchorBeginDateKey &lt;=  @test_end_date
and c.anchorBeginDateKey &lt;=  (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;)
and e.bpid = ${bpid}
and f.ccn =  &apos;390223&apos;
) a;
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">Post Acute Facility,pac_CCN</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="OS Process Sampler" enabled="true">
          <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
          <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
          <stringProp name="SystemSampler.command">cmd.exe</stringProp>
          <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">/c</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">echo episodeInitiatorNameInitCap=${value2}*bpid=${value1}*facilityName=${value3}*ccn=${value4}&gt;&gt; RowFilterOutput.txt</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SystemSampler.directory">${__BeanShell(import org.apache.jmeter.services.FileServer; FileServer.getFileServer().getBaseDir();)}${__BeanShell(File.separator,)}</stringProp>
        </SystemSampler>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import java.util.ArrayList;

ArrayList al_bpid = new ArrayList();
for(int i=1;i&lt;=Integer.parseInt(vars.get(&quot;q_bpid_#&quot;));i++){
al_bpid.add(vars.get(&quot;q_bpid_&quot;+i));
}
vars.put(&quot;value1&quot;,&quot;\&quot;&quot;+al_bpid.toString()+&quot;\&quot;&quot;);
System.out.println(&quot;BPID:&quot;+al_bpid.toString());

ArrayList al_EINameInit = new ArrayList();
for(int i=1;i&lt;=Integer.parseInt(vars.get(&quot;episodeInitiatorNameInitCap_#&quot;));i++){
al_EINameInit.add(vars.get(&quot;episodeInitiatorNameInitCap_&quot;+i));
}
vars.put(&quot;value2&quot;,&quot;\&quot;&quot;+al_EINameInit.toString()+&quot;\&quot;&quot;);
System.out.println(&quot;EINameInit:&quot;+al_EINameInit);

ArrayList al_facilityName = new ArrayList();
for(int i=1;i&lt;=Integer.parseInt(vars.get(&quot;facilityName_#&quot;));i++){
al_facilityName.add(vars.get(&quot;facilityName_&quot;+i));
}
vars.put(&quot;value3&quot;,&quot;\&quot;&quot;+al_facilityName.toString()+&quot;\&quot;&quot;);
System.out.println(&quot;facilityName:&quot;+al_facilityName);

ArrayList al_ccn = new ArrayList();
for(int i=1;i&lt;=Integer.parseInt(vars.get(&quot;ccn_#&quot;));i++){
al_ccn.add(vars.get(&quot;ccn_&quot;+i));
}
vars.put(&quot;value4&quot;,&quot;\&quot;&quot;+al_ccn.toString()+&quot;\&quot;&quot;);
System.out.println(&quot;CCN:&quot;+al_ccn.toString());

ArrayList al_bundleName = new ArrayList();
for(int i=1;i&lt;=Integer.parseInt(vars.get(&quot;bundleName_#&quot;));i++){
al_bundleName.add(vars.get(&quot;bundleName_&quot;+i));
}
vars.put(&quot;value5&quot;,&quot;\&quot;&quot;+al_bundleName.toString()+&quot;\&quot;&quot;);
System.out.println(&quot;bundleName:&quot;+al_bundleName.toString());
ArrayList al_remedyRegion = new ArrayList();

for(int i=1;i&lt;=Integer.parseInt(vars.get(&quot;remedyRegion_#&quot;));i++){
al_remedyRegion.add(vars.get(&quot;remedyRegion_&quot;+i));
}
vars.put(&quot;value6&quot;,&quot;\&quot;&quot;+al_remedyRegion.toString()+&quot;\&quot;&quot;);
System.out.println(&quot;Remedy region:&quot;+al_remedyRegion.toString());

ArrayList al_remedyMarket = new ArrayList();

for(int i=1;i&lt;=Integer.parseInt(vars.get(&quot;remedyMarket_#&quot;));i++){
al_remedyMarket.add(vars.get(&quot;remedyMarket_&quot;+i));
}
vars.put(&quot;value7&quot;,&quot;\&quot;&quot;+al_remedyMarket.toString()+&quot;\&quot;&quot;);
System.out.println(&quot;Remedy Market:&quot;+al_remedyMarket.toString());

ArrayList al_partRegion = new ArrayList();
for(int i=1;i&lt;=Integer.parseInt(vars.get(&quot;partnerRegion_#&quot;));i++){
al_partRegion.add(vars.get(&quot;partnerRegion_&quot;+i));
}
vars.put(&quot;value8&quot;,&quot;\&quot;&quot;+al_partRegion.toString()+&quot;\&quot;&quot;);
System.out.println(&quot;Partner region:&quot;+al_partRegion.toString());

ArrayList al_partMarket = new ArrayList();
for(int i=1;i&lt;=Integer.parseInt(vars.get(&quot;partnerMarket_#&quot;));i++){
al_partMarket.add(vars.get(&quot;partnerMarket_&quot;+i));
}
vars.put(&quot;value9&quot;,&quot;\&quot;&quot;+al_partMarket.toString()+&quot;\&quot;&quot;);
System.out.println(&quot;Partner Market:&quot;+al_partMarket.toString());

ArrayList al_participant = new ArrayList();
for(int i=1;i&lt;=Integer.parseInt(vars.get(&quot;participantName_#&quot;));i++){
al_participant.add(vars.get(&quot;participantName_&quot;+i));
}
vars.put(&quot;value10&quot;,&quot;\&quot;&quot;+al_participant.toString()+&quot;\&quot;&quot;);
System.out.println(&quot;Participant:&quot;+al_participant.toString());

ArrayList al_DRG_Fracture = new ArrayList();
for(int i=1;i&lt;=Integer.parseInt(vars.get(&quot;DRG_Fracture_#&quot;));i++){
al_DRG_Fracture.add(vars.get(&quot;DRG_Fracture_&quot;+i));
}
vars.put(&quot;value11&quot;,&quot;\&quot;&quot;+al_DRG_Fracture.toString()+&quot;\&quot;&quot;);
System.out.println(&quot;DRG_Fracture:&quot;+al_DRG_Fracture.toString());

//////////////////////
ArrayList al_Physician_NPI = new ArrayList();
for(int i=1;i&lt;=Integer.parseInt(vars.get(&quot;Physician_NPI_#&quot;));i++){
al_Physician_NPI.add(&quot;\&quot;&quot;+vars.get(&quot;Physician_NPI_&quot;+i)+&quot;\&quot;&quot;);
}
vars.put(&quot;value12&quot;,&quot;\&quot;&quot;+al_Physician_NPI.toString()+&quot;\&quot;&quot;);
System.out.println(&quot;Physician_NPI:&quot;+al_Physician_NPI.toString());

ArrayList al_model = new ArrayList();
for(int i=1;i&lt;=Integer.parseInt(vars.get(&quot;model_#&quot;));i++){
al_model.add(vars.get(&quot;model_&quot;+i));
}
vars.put(&quot;value13&quot;,&quot;\&quot;&quot;+al_model.toString()+&quot;\&quot;&quot;);
System.out.println(&quot;model:&quot;+al_model.toString());

ArrayList al_facilityNameInitCap = new ArrayList();
for(int i=1;i&lt;=Integer.parseInt(vars.get(&quot;facilityNameInitCap_#&quot;));i++){
al_facilityNameInitCap.add(&quot;\&quot;&quot;+vars.get(&quot;facilityNameInitCap_&quot;+i)+&quot;\&quot;&quot;);
}
vars.put(&quot;value14&quot;,&quot;\&quot;&quot;+al_facilityNameInitCap.toString()+&quot;\&quot;&quot;);
System.out.println(&quot;facilityNameInitCap:&quot;+al_facilityNameInitCap.toString());
</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
