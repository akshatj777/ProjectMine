<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="4.0" jmeter="4.0 r1823414">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
        <stringProp name="dataSource">MySQLQA</stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="checkQuery">Select 1</stringProp>
        <stringProp name="dbUrl">jdbc:mysql://rds-qa.remedypartners.com:3306/warehouse</stringProp>
        <stringProp name="driver">com.mysql.jdbc.Driver</stringProp>
        <stringProp name="username">salam</stringProp>
        <stringProp name="password">1Welcome2</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Performace DashBoard" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1511452775000</longProp>
        <longProp name="ThreadGroup.end_time">1511452775000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
        <hashTree>
          <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="OS Process Sampler" enabled="false">
            <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
            <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
            <stringProp name="SystemSampler.command">cmd.exe</stringProp>
            <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="Argument">
                  <stringProp name="Argument.name"></stringProp>
                  <stringProp name="Argument.value">-c</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="" elementType="Argument">
                  <stringProp name="Argument.name"></stringProp>
                  <stringProp name="Argument.value">echo &quot;ECEpiosdeCount,claimsEpiosdeCount,savingRate,TotalNPRA, TotalProgram&quot; &gt;&gt; PerformanceDashboardResult.txt</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="SystemSampler.directory">C:\Users\sandeep.singh\Desktop\Tableautestpaln</stringProp>
          </SystemSampler>
          <hashTree/>
        </hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="NumberOfEppisode" enabled="true">
          <stringProp name="filename">RowFilterInput.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">Flag,userName,bpid,anchorFacility,ccn,bundle,dummyregion,dummymarket,r_region,r_market,participantName,postAcuteFacility,region,market</stringProp>
          <stringProp name="delimiter">|</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">if(!vars.get(&quot;bpid&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;EC_BPID&quot;,&quot;AND fp.bpid in ${bpid}&quot;);
	vars.put(&quot;C_BPID&quot;,&quot;AND e.bpid in ${bpid}&quot;);	
} else {
	vars.put(&quot;EC_BPID&quot;,&quot;&quot;);
	vars.put(&quot;C_BPID&quot;,&quot;&quot;);
}
if(!vars.get(&quot;anchorFacility&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;EC_AnchorFacility&quot;,&quot;AND anc.facilityNameInitCap in ${anchorFacility}&quot;);	
	vars.put(&quot;C_AnchorFacility&quot;,&quot;AND f.facilityNameInitCap in ${anchorFacility}&quot;);	
} else {
	vars.put(&quot;EC_AnchorFacility&quot;,&quot;&quot;);
	vars.put(&quot;C_AnchorFacility&quot;,&quot;&quot;);
}
if(!vars.get(&quot;ccn&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;EC_CCN&quot;,&quot;AND anc.ccn in ${ccn}&quot;);
	vars.put(&quot;C_CCN&quot;,&quot;AND f.ccn in ${ccn}&quot;);	
} else {
	vars.put(&quot;EC_CCN&quot;,&quot;&quot;);
	vars.put(&quot;C_CCN&quot;,&quot;&quot;);
}

if(!vars.get(&quot;bundle&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;EC_BUNDLE&quot;,&quot;and drg.bundleName in ${bundle}&quot;);	
	vars.put(&quot;C_BUNDLE&quot;,&quot;and drg.bundleName in ${bundle}&quot;);
} else{
	vars.put(&quot;EC_BUNDLE&quot;,&quot;&quot;);
	vars.put(&quot;C_BUNDLE&quot;,&quot;&quot;);
}
if(!vars.get(&quot;r_region&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;EC_R_REGION&quot;,&quot;and rm.region in  ${r_region}&quot;);
	vars.put(&quot;C_R_REGION&quot;,&quot;and rm.region in  ${r_region}&quot;);	
} else {
	vars.put(&quot;EC_R_REGION&quot;,&quot;&quot;);
	vars.put(&quot;C_R_REGION&quot;,&quot;&quot;);
}
if(!vars.get(&quot;r_market&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;EC_R_MARKET&quot;,&quot;and rm.market in ${r_market}&quot;);
	vars.put(&quot;C_R_MARKET&quot;,&quot;and rm.market in ${r_market}&quot;);		
} else{
	vars.put(&quot;EC_R_MARKET&quot;,&quot;&quot;);
	vars.put(&quot;C_R_MARKET&quot;,&quot;&quot;);
}
if(!vars.get(&quot;region&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;EC_REGION&quot;,&quot;and rmp.region in  ${region}&quot;);
	vars.put(&quot;C_REGION&quot;,&quot;and rmp.region in  ${region}&quot;);		
} else {
	vars.put(&quot;EC_REGION&quot;,&quot;&quot;);
	vars.put(&quot;C_REGION&quot;,&quot;&quot;);
}
if(!vars.get(&quot;market&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;EC_MARKET&quot;,&quot;and rmp.market in ${market}&quot;);	
	vars.put(&quot;C_MARKET&quot;,&quot;and rmp.market in ${market}&quot;);
} else{
	vars.put(&quot;EC_MARKET&quot;,&quot;&quot;);
	vars.put(&quot;C_MARKET&quot;,&quot;&quot;);
}
if(!vars.get(&quot;participantName&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;EC_PARTICIPANTNAME&quot;,&quot;and ei.participantName in ${participantName}&quot;);
	vars.put(&quot;C_PARTICIPANTNAME&quot;,&quot;and e.participantNameInitCap in ${participantName}&quot;);	
} else{
	vars.put(&quot;EC_PARTICIPANTNAME&quot;,&quot;&quot;);
	vars.put(&quot;C_PARTICIPANTNAME&quot;,&quot;&quot;);
}
if(!vars.get(&quot;postAcuteFacility&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;EC_PAF&quot;,&quot;and post_acute_df.facilityNameInitCap in ${postAcuteFacility}&quot;);	
	vars.put(&quot;C_PAF&quot;,&quot;and pac.facilityNameInitCap in ${postAcuteFacility}&quot;);
} else{
	vars.put(&quot;C_PAF&quot;,&quot;&quot;);
	vars.put(&quot;C_PAF&quot;,&quot;&quot;);
}
</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="BPID Filter " enabled="true">
          <stringProp name="dataSource">MySQLQA</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select concat( `Episode Initiator`, &apos; - &apos;, BPID)
from
( 
-- EC Data
select 
distinct fp.BPID,
ei.episodeInitiatorNameInitCap  AS &apos;Episode Initiator&apos;
FROM
warehouse.factPatientEpisode fp
LEFT JOIN (select f.facilitySK,f.ccn,f.facilityName,
case when df_claims.facilityNameInitCap is null then f.facilityNameInitCap
else df_claims.facilityNameInitCap end facilityNameInitCap,
f.facilityType,f.facilitySubtype,f.address1,f.address2,f.city,f.state,f.zip,f.contactName,f.contactEmail,
f.contactPhone1,f.contactPhone2,f.contactRole,f.lat,f.lon,f.fips,f.confirmed,f.dataSource,f.description,
f.excludedFromRiskScore,f.sourceFacilityKey,f.fgroup,f.id,f.isFeatured,f.medicareId,f.mongoId,f.outboundBpciParticipant,
f.participantId,f.participating,f.bpid,f.careType,f.categorySpecificFields,f.dwhIsActive,f.dwhIsDeleted,f.dwhSource,
f.dwhVersion,f.dwhStartDate,f.dwhEndDate,f.dwhMD5Checksum
from warehouse.dimFacility f
left outer join (select * from warehouse.dimFacility where dwhSource=&apos;Claims&apos;) as df_claims
on f.ccn = df_claims.ccn and f.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;) 
) anc ON fp.anchorAdmitFacilityKey=anc.facilitySK 
LEFT JOIN warehouse.dimFacility afdetail ON anc.sourceFacilityKey = afdetail.facilitySK and afdetail.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;)
LEFT JOIN warehouse.dimEpisodeInitiator ei ON fp.episodeInitiatorKey=ei.episodeInitiatorSK
LEFT JOIN warehouse.dimFacility post_acute_df ON fp.anchorDischargeFacilityKey=post_acute_df.facilitySK
LEFT JOIN warehouse.dimPatient dp ON fp.patientKey = dp.patientSK
LEFT JOIN warehouse.dimPhysician p on fp.physicianKey=p.physicianSK
LEFT JOIN warehouse.dimRegionMarket rm ON fp.rgRemKey = rm.rgSK
 LEFT JOIN warehouse.dimRegionMarket rmp ON fp.rgPartnerKey = rmp.rgSK
LEFT JOIN warehouse.dimDRG drg on fp.currDrgKey = drg.drgSK
LEFT JOIN warehouse.dimDate dt ON fp.anchorAdmitDateKey = dt.dateSK
LEFT JOIN (select distinct ad.provider_ccn, ophha.bpid,max(ophha.network_publication) &apos;HHA Network_Publication Date&apos; from warehouse.ops_anchor_detail  ad 
LEFT JOIN warehouse.ops_hha_pn_program_status ophha on ad.facilityID = ophha.facilityID group by ad.provider_ccn) opshha
on anc.ccn = opshha.provider_ccn and fp.BPID = opshha.bpid
INNER JOIN 
	(
		SELECT  tabUserSecurityBPID.bpid 
        FROM  warehouse.tabUserSecurityBPID
		WHERE  username = ${userName} GROUP BY bpid) tbsBPID ON ei.BPID = tbsBPID.bpid
INNER JOIN 
     (       
        SELECT tabUserSecurityCCN.ccn
        from warehouse.tabUserSecurityCCN where username = ${userName}
       GROUP BY ccn )tbsCCN on anc.ccn=tbsCCN.ccn
INNER JOIN 
     (       
        SELECT tabUserSecurityFacilityKey.facilitykey
        from warehouse.tabUserSecurityFacilityKey where username = ${userName}
       GROUP BY facilitykey )tbsFacilityKey on fp.sourceFacilityKey=tbsFacilityKey.facilitykey
WHERE 
fp.bundleRisk=1 and
dt.calendarDate &lt;= now() and
fp.anchorAdmitDateKey &gt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;) 
and fp.episodeCountReport=1
and anc.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;) and post_acute_df.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;)
and ei.bpid not like &apos;%DEMO%&apos; and fp.NSOCType  = &apos;HHA&apos;
and fp.anchorAdmitDateKey &lt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;BPCIAStartDate&apos;)

 
 -- And anc.facilityNameInitCap in (&apos;&apos;)
 ${EC_AnchorFacility}
 ${EC_CCN}
 ${EC_BUNDLE} 
 ${EC_R_REGION} 
 ${EC_R_MARKET} 
 ${EC_REGION} 
 ${EC_MARKET} 
 ${EC_PARTICIPANTNAME}  
 ${EC_PAF}

union

-- Query to find out BPID&apos;s with Claims data
 
select
distinct  e.BPID,
case when e.episodeInitiatorNameInitCap is null then null else e.episodeInitiatorNameInitCap end AS &apos;Episode Initiator&apos;
FROM
    warehouse.factClaims c LEFT JOIN
    warehouse.dimFacility f ON c.anchorFacilityKey = f.facilitySK LEFT JOIN
    warehouse.dimEpisodeInitiator e ON c.episodeInitiatorKey = e.episodeInitiatorSK LEFT JOIN
    warehouse.dimFacility pac ON c.postAcuteFacilityKey = pac.facilitySK LEFT JOIN
    warehouse.dimDRG drg ON c.anchorDrgKey = drg.drgSK LEFT JOIN
    warehouse.dimPatient dpc ON c.patientKey = dpc.patientSK LEFT JOIN
    warehouse.dimSNFNetwork snf ON c.SNFNetworkKey = snf.SNFNeworkSK LEFT JOIN
    warehouse.dimPhysician p ON c.physicianKey = p.physicianSK LEFT JOIN
    warehouse.dimRegionMarket rm ON c.rgRemKey = rm.rgSK LEFT JOIN
    warehouse.dimRegionMarket rmp ON c.rgPartnerKey = rmp.rgSK LEFT JOIN 
    warehouse.dimDate dt ON c.anchorBeginDateKey = dt.dateSK
LEFT JOIN (select distinct cad.provider_ccn, cophha.bpid,max(cophha.network_publication) &apos;HHA Network_Publication Date&apos; from warehouse.ops_anchor_detail  cad 
LEFT JOIN warehouse.ops_hha_pn_program_status cophha on cad.facilityID = cophha.facilityID group by cad.provider_ccn) copshha
on f.ccn = copshha.provider_ccn and e.BPID = copshha.bpid 
LEFT JOIN warehouse.dimFacility SSOC ON c.SSOC_CCN_Key = SSOC.facilitySK
INNER JOIN 
		(SELECT bpid,  username FROM warehouse.tabUserSecurityBPID
		WHERE username = ${userName}
        GROUP BY bpid
        ) tbsBPID ON e.BPID = tbsBPID.bpid
        
INNER JOIN 
     (       
        SELECT ccn, username AS username
        from warehouse.tabUserSecurityCCN where username = ${userName}
       GROUP BY ccn
        )tbsCCN on f.ccn=tbsCCN.ccn
WHERE c.atRisk=&apos;Y&apos; and f.dwhSource in (&apos;Claims&apos;, &apos;ZeroKey&apos;,&apos;emblemClaims&apos;) 
and pac.dwhSource in (&apos;Claims&apos;, &apos;ZeroKey&apos;,&apos;emblemClaims&apos;)
and e.bpid  not like &apos;%DEMO%&apos;
and c.anchorBeginDateKey &gt;= 20160101 
and c.anchorBeginDateKey &lt;= (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;)
and c.postAcuteCategory = &apos;HHA&apos; and c.targetPrice &lt;&gt; 0

-- AND f.facilityNameInitCap in (&apos;&apos;)
${C_AnchorFacility}
${C_CCN}
${C_BUNDLE} 
${C_R_REGION} 
${C_R_MARKET} 
${C_REGION} 
${C_MARKET} 
${C_PARTICIPANTNAME}  
${C_PAF}

)  a
order by concat(`Episode Initiator`,&apos; - &apos;, BPID); </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">EpisodeInitiator_BPID</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">System.out.println(&quot;Started BeanShell-------------------&gt;&gt;&gt;&gt;&quot;);

</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import java.util.ArrayList;

System.out.println(&quot;Post Started---Inner&quot;);
String var = vars.get(&quot;bpid_1&quot;);
int var1 = Integer.parseInt(vars.get(&quot;bpid_#&quot;));
ArrayList al = new ArrayList();
for(int i=1;i&lt;=var1;i++){
al.add(vars.get(&quot;bpid1_&quot;+i));
}
vars.put(&quot;value&quot;,al.toString());
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Facility Name CCN" enabled="true">
          <stringProp name="dataSource">MySQLQA</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select  concat(`Anchor Facility`, &apos; - &apos;, CCN)
from
( 
-- EC Data
select 
distinct anc.facilityNameInitCap AS &apos;Anchor Facility&apos;, anc.ccn AS CCN
FROM
warehouse.factPatientEpisode fp
LEFT JOIN (select f.facilitySK,f.ccn,f.facilityName,
case when df_claims.facilityNameInitCap is null then f.facilityNameInitCap
else df_claims.facilityNameInitCap end facilityNameInitCap,
f.facilityType,f.facilitySubtype,f.address1,f.address2,f.city,f.state,f.zip,f.contactName,f.contactEmail,
f.contactPhone1,f.contactPhone2,f.contactRole,f.lat,f.lon,f.fips,f.confirmed,f.dataSource,f.description,
f.excludedFromRiskScore,f.sourceFacilityKey,f.fgroup,f.id,f.isFeatured,f.medicareId,f.mongoId,f.outboundBpciParticipant,
f.participantId,f.participating,f.bpid,f.careType,f.categorySpecificFields,f.dwhIsActive,f.dwhIsDeleted,f.dwhSource,
f.dwhVersion,f.dwhStartDate,f.dwhEndDate,f.dwhMD5Checksum
from warehouse.dimFacility f
left outer join (select * from warehouse.dimFacility where dwhSource=&apos;Claims&apos;) as df_claims
on f.ccn = df_claims.ccn and f.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;) 
) anc ON fp.anchorAdmitFacilityKey=anc.facilitySK 
LEFT JOIN warehouse.dimFacility afdetail ON anc.sourceFacilityKey = afdetail.facilitySK and afdetail.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;)
LEFT JOIN warehouse.dimEpisodeInitiator ei ON fp.episodeInitiatorKey=ei.episodeInitiatorSK
LEFT JOIN warehouse.dimFacility post_acute_df ON fp.anchorDischargeFacilityKey=post_acute_df.facilitySK
LEFT JOIN warehouse.dimPatient dp ON fp.patientKey = dp.patientSK
LEFT JOIN warehouse.dimPhysician p on fp.physicianKey=p.physicianSK
LEFT JOIN warehouse.dimRegionMarket rm ON fp.rgRemKey = rm.rgSK
 LEFT JOIN warehouse.dimRegionMarket rmp ON fp.rgPartnerKey = rmp.rgSK
LEFT JOIN warehouse.dimDRG drg on fp.currDrgKey = drg.drgSK
LEFT JOIN warehouse.dimDate dt ON fp.anchorAdmitDateKey = dt.dateSK
LEFT JOIN (select distinct ad.provider_ccn, ophha.bpid,max(ophha.network_publication) &apos;HHA Network_Publication Date&apos; from warehouse.ops_anchor_detail  ad 
LEFT JOIN warehouse.ops_hha_pn_program_status ophha on ad.facilityID = ophha.facilityID group by ad.provider_ccn) opshha
on anc.ccn = opshha.provider_ccn and fp.BPID = opshha.bpid
INNER JOIN 
	(
		SELECT  tabUserSecurityBPID.bpid 
        FROM  warehouse.tabUserSecurityBPID
		WHERE  username = ${userName} GROUP BY bpid) tbsBPID ON ei.BPID = tbsBPID.bpid
INNER JOIN 
     (       
        SELECT tabUserSecurityCCN.ccn
        from warehouse.tabUserSecurityCCN where username = ${userName}
       GROUP BY ccn )tbsCCN on anc.ccn=tbsCCN.ccn
INNER JOIN 
     (       
        SELECT tabUserSecurityFacilityKey.facilitykey
        from warehouse.tabUserSecurityFacilityKey where username = ${userName}
       GROUP BY facilitykey )tbsFacilityKey on fp.sourceFacilityKey=tbsFacilityKey.facilitykey
WHERE 
fp.bundleRisk=1 and
dt.calendarDate &lt;= now() and
fp.anchorAdmitDateKey &gt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;) 
and fp.episodeCountReport=1
and anc.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;) and post_acute_df.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;)
and ei.bpid not like &apos;%DEMO%&apos; and fp.NSOCType  = &apos;HHA&apos;
and fp.anchorAdmitDateKey &lt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;BPCIAStartDate&apos;)
  
-- And anc.facilityNameInitCap in (&apos;&apos;)
 ${EC_BPID}
 ${EC_BUNDLE} 
 ${EC_R_REGION} 
 ${EC_R_MARKET} 
 ${EC_REGION} 
 ${EC_MARKET} 
 ${EC_PARTICIPANTNAME}  
 ${EC_PAF}
  

union

-- Claims Data
select
distinct  f.facilityNameInitCap as &apos;Anchor Facility&apos;, f.ccn  AS CCN
FROM
    warehouse.factClaims c LEFT JOIN
    warehouse.dimFacility f ON c.anchorFacilityKey = f.facilitySK LEFT JOIN
    warehouse.dimEpisodeInitiator e ON c.episodeInitiatorKey = e.episodeInitiatorSK LEFT JOIN
    warehouse.dimFacility pac ON c.postAcuteFacilityKey = pac.facilitySK LEFT JOIN
    warehouse.dimDRG drg ON c.anchorDrgKey = drg.drgSK LEFT JOIN
    warehouse.dimPatient dpc ON c.patientKey = dpc.patientSK LEFT JOIN
    warehouse.dimSNFNetwork snf ON c.SNFNetworkKey = snf.SNFNeworkSK LEFT JOIN
    warehouse.dimPhysician p ON c.physicianKey = p.physicianSK LEFT JOIN
    warehouse.dimRegionMarket rm ON c.rgRemKey = rm.rgSK LEFT JOIN
    warehouse.dimRegionMarket rmp ON c.rgPartnerKey = rmp.rgSK LEFT JOIN 
    warehouse.dimDate dt ON c.anchorBeginDateKey = dt.dateSK
LEFT JOIN (select distinct cad.provider_ccn, cophha.bpid,max(cophha.network_publication) &apos;HHA Network_Publication Date&apos; from warehouse.ops_anchor_detail  cad 
LEFT JOIN warehouse.ops_hha_pn_program_status cophha on cad.facilityID = cophha.facilityID group by cad.provider_ccn) copshha
on f.ccn = copshha.provider_ccn and e.BPID = copshha.bpid 
LEFT JOIN warehouse.dimFacility SSOC ON c.SSOC_CCN_Key = SSOC.facilitySK
INNER JOIN 
		(SELECT bpid,  username FROM warehouse.tabUserSecurityBPID
		WHERE username = ${userName}
        GROUP BY bpid
        ) tbsBPID ON e.BPID = tbsBPID.bpid
        
INNER JOIN 
     (       
        SELECT ccn, username AS username
        from warehouse.tabUserSecurityCCN where username = ${userName}
       GROUP BY ccn
        )tbsCCN on f.ccn=tbsCCN.ccn
WHERE c.atRisk=&apos;Y&apos; and f.dwhSource in (&apos;Claims&apos;, &apos;ZeroKey&apos;,&apos;emblemClaims&apos;) 
and pac.dwhSource in (&apos;Claims&apos;, &apos;ZeroKey&apos;,&apos;emblemClaims&apos;)
and e.bpid  not like &apos;%DEMO%&apos;
and c.anchorBeginDateKey &gt;= 20160101 
and c.anchorBeginDateKey &lt;= (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;)
and c.postAcuteCategory = &apos;HHA&apos; and c.targetPrice &lt;&gt; 0

AND e.BPID in (&apos;&apos;)
AND f.facilityNameInitCap in (&apos;&apos;)
AND drg.bundleName(&apos;&apos;)
AND rmp.region in (&apos;&apos;)
AND rmp.market in (&apos;&apos;)
AND rm.region in (&apos;&apos;)
AND rm.market in (&apos;&apos;)
AND e.participantNameInitCap in (&apos;&apos;)
AND pac.facilityNameInitCap in (&apos;&apos;)


)a
 order by concat(`Anchor Facility`, &apos; - &apos;, CCN) ;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">AnchorFacility_CCN</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="BundleName" enabled="true">
          <stringProp name="dataSource">MySQLQA</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select distinct a.Bundle  from
( 
-- EC Data
select 
distinct drg.bundleName as Bundle
FROM
warehouse.factPatientEpisode fp
LEFT JOIN (select f.facilitySK,f.ccn,f.facilityName,
case when df_claims.facilityNameInitCap is null then f.facilityNameInitCap
else df_claims.facilityNameInitCap end facilityNameInitCap,
f.facilityType,f.facilitySubtype,f.address1,f.address2,f.city,f.state,f.zip,f.contactName,f.contactEmail,
f.contactPhone1,f.contactPhone2,f.contactRole,f.lat,f.lon,f.fips,f.confirmed,f.dataSource,f.description,
f.excludedFromRiskScore,f.sourceFacilityKey,f.fgroup,f.id,f.isFeatured,f.medicareId,f.mongoId,f.outboundBpciParticipant,
f.participantId,f.participating,f.bpid,f.careType,f.categorySpecificFields,f.dwhIsActive,f.dwhIsDeleted,f.dwhSource,
f.dwhVersion,f.dwhStartDate,f.dwhEndDate,f.dwhMD5Checksum
from warehouse.dimFacility f
left outer join (select * from warehouse.dimFacility where dwhSource=&apos;Claims&apos;) as df_claims
on f.ccn = df_claims.ccn and f.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;) 
) anc ON fp.anchorAdmitFacilityKey=anc.facilitySK 
LEFT JOIN warehouse.dimFacility afdetail ON anc.sourceFacilityKey = afdetail.facilitySK and afdetail.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;)
LEFT JOIN warehouse.dimEpisodeInitiator ei ON fp.episodeInitiatorKey=ei.episodeInitiatorSK
LEFT JOIN warehouse.dimFacility post_acute_df ON fp.anchorDischargeFacilityKey=post_acute_df.facilitySK
LEFT JOIN warehouse.dimPatient dp ON fp.patientKey = dp.patientSK
LEFT JOIN warehouse.dimPhysician p on fp.physicianKey=p.physicianSK
LEFT JOIN warehouse.dimRegionMarket rm ON fp.rgRemKey = rm.rgSK
 LEFT JOIN warehouse.dimRegionMarket rmp ON fp.rgPartnerKey = rmp.rgSK
LEFT JOIN warehouse.dimDRG drg on fp.currDrgKey = drg.drgSK
LEFT JOIN warehouse.dimDate dt ON fp.anchorAdmitDateKey = dt.dateSK
LEFT JOIN (select distinct ad.provider_ccn, ophha.bpid,max(ophha.network_publication) &apos;HHA Network_Publication Date&apos; from warehouse.ops_anchor_detail  ad 
LEFT JOIN warehouse.ops_hha_pn_program_status ophha on ad.facilityID = ophha.facilityID group by ad.provider_ccn) opshha
on anc.ccn = opshha.provider_ccn and fp.BPID = opshha.bpid
INNER JOIN 
	(
		SELECT  tabUserSecurityBPID.bpid 
        FROM  warehouse.tabUserSecurityBPID
		WHERE  username = ${userName} GROUP BY bpid) tbsBPID ON ei.BPID = tbsBPID.bpid
INNER JOIN 
     (       
        SELECT tabUserSecurityCCN.ccn
        from warehouse.tabUserSecurityCCN where username = ${userName}
       GROUP BY ccn )tbsCCN on anc.ccn=tbsCCN.ccn
INNER JOIN 
     (       
        SELECT tabUserSecurityFacilityKey.facilitykey
        from warehouse.tabUserSecurityFacilityKey where username = ${userName}
       GROUP BY facilitykey )tbsFacilityKey on fp.sourceFacilityKey=tbsFacilityKey.facilitykey
WHERE 
fp.bundleRisk=1 and
dt.calendarDate &lt;= now() and
fp.anchorAdmitDateKey &gt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;) 
and fp.episodeCountReport=1
and anc.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;) and post_acute_df.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;)
and ei.bpid not like &apos;%DEMO%&apos; and fp.NSOCType  = &apos;HHA&apos;
and fp.anchorAdmitDateKey &lt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;BPCIAStartDate&apos;)

-- And anc.facilityNameInitCap in (&apos;&apos;)
 ${EC_BPID}
 ${EC_CCN}
 ${EC_R_REGION} 
 ${EC_R_MARKET} 
 ${EC_REGION} 
 ${EC_MARKET} 
 ${EC_PARTICIPANTNAME}  
 ${EC_PAF}

union
 
-- Claims data
select 
distinct  drg.bundleName AS Bundle
FROM
    warehouse.factClaims c LEFT JOIN
    warehouse.dimFacility f ON c.anchorFacilityKey = f.facilitySK LEFT JOIN
    warehouse.dimEpisodeInitiator e ON c.episodeInitiatorKey = e.episodeInitiatorSK LEFT JOIN
    warehouse.dimFacility pac ON c.postAcuteFacilityKey = pac.facilitySK LEFT JOIN
    warehouse.dimDRG drg ON c.anchorDrgKey = drg.drgSK LEFT JOIN
    warehouse.dimPatient dpc ON c.patientKey = dpc.patientSK LEFT JOIN
    warehouse.dimSNFNetwork snf ON c.SNFNetworkKey = snf.SNFNeworkSK LEFT JOIN
    warehouse.dimPhysician p ON c.physicianKey = p.physicianSK LEFT JOIN
    warehouse.dimRegionMarket rm ON c.rgRemKey = rm.rgSK LEFT JOIN
    warehouse.dimRegionMarket rmp ON c.rgPartnerKey = rmp.rgSK LEFT JOIN 
    warehouse.dimDate dt ON c.anchorBeginDateKey = dt.dateSK
LEFT JOIN (select distinct cad.provider_ccn, cophha.bpid,max(cophha.network_publication) &apos;HHA Network_Publication Date&apos; from warehouse.ops_anchor_detail  cad 
LEFT JOIN warehouse.ops_hha_pn_program_status cophha on cad.facilityID = cophha.facilityID group by cad.provider_ccn) copshha
on f.ccn = copshha.provider_ccn and e.BPID = copshha.bpid 
LEFT JOIN warehouse.dimFacility SSOC ON c.SSOC_CCN_Key = SSOC.facilitySK
INNER JOIN 
		(SELECT bpid,  username FROM warehouse.tabUserSecurityBPID
		WHERE username = ${userName}
        GROUP BY bpid
        ) tbsBPID ON e.BPID = tbsBPID.bpid
        
INNER JOIN 
     (       
        SELECT ccn, username AS username
        from warehouse.tabUserSecurityCCN where username = ${userName}
       GROUP BY ccn
        )tbsCCN on f.ccn=tbsCCN.ccn
WHERE c.atRisk=&apos;Y&apos; and f.dwhSource in (&apos;Claims&apos;, &apos;ZeroKey&apos;,&apos;emblemClaims&apos;) 
and pac.dwhSource in (&apos;Claims&apos;, &apos;ZeroKey&apos;,&apos;emblemClaims&apos;)
and e.bpid  not like &apos;%DEMO%&apos;
and c.anchorBeginDateKey &gt;= 20160101 
and c.anchorBeginDateKey &lt;= (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;)
and c.postAcuteCategory = &apos;HHA&apos; and c.targetPrice &lt;&gt; 0


AND e.BPID in (&apos;&apos;)
AND f.facilityNameInitCap in (&apos;&apos;)
AND f.ccn in (&apos;&apos;)
AND drg.bundleName(&apos;&apos;)
AND rmp.region in (&apos;&apos;)
AND rmp.market in (&apos;&apos;)
AND rm.region in (&apos;&apos;)
AND rm.market in (&apos;&apos;)
AND e.participantNameInitCap in (&apos;&apos;)
AND pac.facilityNameInitCap in (&apos;&apos;)

)a  order by a.Bundle ; </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">bundleName</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Remedy Region Market " enabled="true">
          <stringProp name="dataSource">MySQLQA</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select distinct CONCAT( &apos;Remedy-&apos;, a.region, &apos; &apos;,  a.market ) AS &apos;Remedy Region Market&apos; from
( 
-- EC Data
select 
distinct  rm.region, rm.market
FROM
warehouse.factPatientEpisode fp
LEFT JOIN (select f.facilitySK,f.ccn,f.facilityName,
case when df_claims.facilityNameInitCap is null then f.facilityNameInitCap
else df_claims.facilityNameInitCap end facilityNameInitCap,
f.facilityType,f.facilitySubtype,f.address1,f.address2,f.city,f.state,f.zip,f.contactName,f.contactEmail,
f.contactPhone1,f.contactPhone2,f.contactRole,f.lat,f.lon,f.fips,f.confirmed,f.dataSource,f.description,
f.excludedFromRiskScore,f.sourceFacilityKey,f.fgroup,f.id,f.isFeatured,f.medicareId,f.mongoId,f.outboundBpciParticipant,
f.participantId,f.participating,f.bpid,f.careType,f.categorySpecificFields,f.dwhIsActive,f.dwhIsDeleted,f.dwhSource,
f.dwhVersion,f.dwhStartDate,f.dwhEndDate,f.dwhMD5Checksum
from warehouse.dimFacility f
left outer join (select * from warehouse.dimFacility where dwhSource=&apos;Claims&apos;) as df_claims
on f.ccn = df_claims.ccn and f.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;) 
) anc ON fp.anchorAdmitFacilityKey=anc.facilitySK 
LEFT JOIN warehouse.dimFacility afdetail ON anc.sourceFacilityKey = afdetail.facilitySK and afdetail.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;)
LEFT JOIN warehouse.dimEpisodeInitiator ei ON fp.episodeInitiatorKey=ei.episodeInitiatorSK
LEFT JOIN warehouse.dimFacility post_acute_df ON fp.anchorDischargeFacilityKey=post_acute_df.facilitySK
LEFT JOIN warehouse.dimPatient dp ON fp.patientKey = dp.patientSK
LEFT JOIN warehouse.dimPhysician p on fp.physicianKey=p.physicianSK
LEFT JOIN warehouse.dimRegionMarket rm ON fp.rgRemKey = rm.rgSK
 LEFT JOIN warehouse.dimRegionMarket rmp ON fp.rgPartnerKey = rmp.rgSK
LEFT JOIN warehouse.dimDRG drg on fp.currDrgKey = drg.drgSK
LEFT JOIN warehouse.dimDate dt ON fp.anchorAdmitDateKey = dt.dateSK
LEFT JOIN (select distinct ad.provider_ccn, ophha.bpid,max(ophha.network_publication) &apos;HHA Network_Publication Date&apos; from warehouse.ops_anchor_detail  ad 
LEFT JOIN warehouse.ops_hha_pn_program_status ophha on ad.facilityID = ophha.facilityID group by ad.provider_ccn) opshha
on anc.ccn = opshha.provider_ccn and fp.BPID = opshha.bpid
INNER JOIN 
	(
		SELECT  tabUserSecurityBPID.bpid 
        FROM  warehouse.tabUserSecurityBPID
		WHERE  username = ${userName} GROUP BY bpid) tbsBPID ON ei.BPID = tbsBPID.bpid
INNER JOIN 
     (       
        SELECT tabUserSecurityCCN.ccn
        from warehouse.tabUserSecurityCCN where username = ${userName}
       GROUP BY ccn )tbsCCN on anc.ccn=tbsCCN.ccn
INNER JOIN 
     (       
        SELECT tabUserSecurityFacilityKey.facilitykey
        from warehouse.tabUserSecurityFacilityKey where username = ${userName}
       GROUP BY facilitykey )tbsFacilityKey on fp.sourceFacilityKey=tbsFacilityKey.facilitykey
WHERE 
fp.bundleRisk=1 and
dt.calendarDate &lt;= now() and
fp.anchorAdmitDateKey &gt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;) 
and fp.episodeCountReport=1
and anc.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;) and post_acute_df.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;)
and ei.bpid not like &apos;%DEMO%&apos; and fp.NSOCType  = &apos;HHA&apos;
and fp.anchorAdmitDateKey &lt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;BPCIAStartDate&apos;)

-- And anc.facilityNameInitCap in (&apos;&apos;)
 ${EC_BPID}
 ${EC_CCN}
 ${EC_BUNDLE} 
 ${EC_R_REGION} 
 ${EC_R_MARKET} 
 ${EC_REGION} 
 ${EC_MARKET} 
 ${EC_PARTICIPANTNAME}  
 ${EC_PAF}

union

-- Claims Data
select 
distinct  rm.region, rm.market
FROM
    warehouse.factClaims c LEFT JOIN
    warehouse.dimFacility f ON c.anchorFacilityKey = f.facilitySK LEFT JOIN
    warehouse.dimEpisodeInitiator e ON c.episodeInitiatorKey = e.episodeInitiatorSK LEFT JOIN
    warehouse.dimFacility pac ON c.postAcuteFacilityKey = pac.facilitySK LEFT JOIN
    warehouse.dimDRG drg ON c.anchorDrgKey = drg.drgSK LEFT JOIN
    warehouse.dimPatient dpc ON c.patientKey = dpc.patientSK LEFT JOIN
    warehouse.dimSNFNetwork snf ON c.SNFNetworkKey = snf.SNFNeworkSK LEFT JOIN
    warehouse.dimPhysician p ON c.physicianKey = p.physicianSK LEFT JOIN
    warehouse.dimRegionMarket rm ON c.rgRemKey = rm.rgSK LEFT JOIN
    warehouse.dimRegionMarket rmp ON c.rgPartnerKey = rmp.rgSK LEFT JOIN 
    warehouse.dimDate dt ON c.anchorBeginDateKey = dt.dateSK
LEFT JOIN (select distinct cad.provider_ccn, cophha.bpid,max(cophha.network_publication) &apos;HHA Network_Publication Date&apos; from warehouse.ops_anchor_detail  cad 
LEFT JOIN warehouse.ops_hha_pn_program_status cophha on cad.facilityID = cophha.facilityID group by cad.provider_ccn) copshha
on f.ccn = copshha.provider_ccn and e.BPID = copshha.bpid 
LEFT JOIN warehouse.dimFacility SSOC ON c.SSOC_CCN_Key = SSOC.facilitySK
INNER JOIN 
		(SELECT bpid,  username FROM warehouse.tabUserSecurityBPID
		WHERE username = ${userName}
        GROUP BY bpid
        ) tbsBPID ON e.BPID = tbsBPID.bpid
        
INNER JOIN 
     (       
        SELECT ccn, username AS username
        from warehouse.tabUserSecurityCCN where username = ${userName}
       GROUP BY ccn
        )tbsCCN on f.ccn=tbsCCN.ccn
WHERE c.atRisk=&apos;Y&apos; and f.dwhSource in (&apos;Claims&apos;, &apos;ZeroKey&apos;,&apos;emblemClaims&apos;) 
and pac.dwhSource in (&apos;Claims&apos;, &apos;ZeroKey&apos;,&apos;emblemClaims&apos;)
and e.bpid  not like &apos;%DEMO%&apos;
and c.anchorBeginDateKey &gt;= 20160101 
and c.anchorBeginDateKey &lt;= (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;)
and c.postAcuteCategory = &apos;HHA&apos; and c.targetPrice &lt;&gt; 0


AND e.BPID in (&apos;&apos;)
AND f.facilityNameInitCap in (&apos;&apos;)
AND f.ccn in (&apos;&apos;)
AND drg.bundleName(&apos;&apos;)
AND rmp.region in (&apos;&apos;)
AND rmp.market in (&apos;&apos;)
AND rm.region in (&apos;&apos;)
AND rm.market in (&apos;&apos;)
AND e.participantNameInitCap in (&apos;&apos;)
AND pac.facilityNameInitCap in (&apos;&apos;)

)a  order by CONCAT( &apos;Remedy-&apos;, a.region, &apos; &apos;,  a.market ); 
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">RRegionMarket</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Partner Region Market" enabled="true">
          <stringProp name="dataSource">MySQLQA</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select distinct CONCAT( a.participantShortName, a.region, &apos; &apos;,  a.market ) AS &apos;Partner Region Market&apos; from
( 
-- EC Data
select 
distinct  ei.participantShortName, rmp.region, rmp.market
FROM
warehouse.factPatientEpisode fp
LEFT JOIN (select f.facilitySK,f.ccn,f.facilityName,
case when df_claims.facilityNameInitCap is null then f.facilityNameInitCap
else df_claims.facilityNameInitCap end facilityNameInitCap,
f.facilityType,f.facilitySubtype,f.address1,f.address2,f.city,f.state,f.zip,f.contactName,f.contactEmail,
f.contactPhone1,f.contactPhone2,f.contactRole,f.lat,f.lon,f.fips,f.confirmed,f.dataSource,f.description,
f.excludedFromRiskScore,f.sourceFacilityKey,f.fgroup,f.id,f.isFeatured,f.medicareId,f.mongoId,f.outboundBpciParticipant,
f.participantId,f.participating,f.bpid,f.careType,f.categorySpecificFields,f.dwhIsActive,f.dwhIsDeleted,f.dwhSource,
f.dwhVersion,f.dwhStartDate,f.dwhEndDate,f.dwhMD5Checksum
from warehouse.dimFacility f
left outer join (select * from warehouse.dimFacility where dwhSource=&apos;Claims&apos;) as df_claims
on f.ccn = df_claims.ccn and f.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;) 
) anc ON fp.anchorAdmitFacilityKey=anc.facilitySK 
LEFT JOIN warehouse.dimFacility afdetail ON anc.sourceFacilityKey = afdetail.facilitySK and afdetail.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;)
LEFT JOIN warehouse.dimEpisodeInitiator ei ON fp.episodeInitiatorKey=ei.episodeInitiatorSK
LEFT JOIN warehouse.dimFacility post_acute_df ON fp.anchorDischargeFacilityKey=post_acute_df.facilitySK
LEFT JOIN warehouse.dimPatient dp ON fp.patientKey = dp.patientSK
LEFT JOIN warehouse.dimPhysician p on fp.physicianKey=p.physicianSK
LEFT JOIN warehouse.dimRegionMarket rm ON fp.rgRemKey = rm.rgSK
 LEFT JOIN warehouse.dimRegionMarket rmp ON fp.rgPartnerKey = rmp.rgSK
LEFT JOIN warehouse.dimDRG drg on fp.currDrgKey = drg.drgSK
LEFT JOIN warehouse.dimDate dt ON fp.anchorAdmitDateKey = dt.dateSK
LEFT JOIN (select distinct ad.provider_ccn, ophha.bpid,max(ophha.network_publication) &apos;HHA Network_Publication Date&apos; from warehouse.ops_anchor_detail  ad 
LEFT JOIN warehouse.ops_hha_pn_program_status ophha on ad.facilityID = ophha.facilityID group by ad.provider_ccn) opshha
on anc.ccn = opshha.provider_ccn and fp.BPID = opshha.bpid
INNER JOIN 
	(
		SELECT  tabUserSecurityBPID.bpid 
        FROM  warehouse.tabUserSecurityBPID
		WHERE  username = ${userName} GROUP BY bpid) tbsBPID ON ei.BPID = tbsBPID.bpid
INNER JOIN 
     (       
        SELECT tabUserSecurityCCN.ccn
        from warehouse.tabUserSecurityCCN where username = ${userName}
       GROUP BY ccn )tbsCCN on anc.ccn=tbsCCN.ccn
INNER JOIN 
     (       
        SELECT tabUserSecurityFacilityKey.facilitykey
        from warehouse.tabUserSecurityFacilityKey where username = ${userName}
       GROUP BY facilitykey )tbsFacilityKey on fp.sourceFacilityKey=tbsFacilityKey.facilitykey
WHERE 
fp.bundleRisk=1 and
dt.calendarDate &lt;= now() and
fp.anchorAdmitDateKey &gt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;) 
and fp.episodeCountReport=1
and anc.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;) and post_acute_df.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;)
and ei.bpid not like &apos;%DEMO%&apos; and fp.NSOCType  = &apos;HHA&apos;
and fp.anchorAdmitDateKey &lt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;BPCIAStartDate&apos;)

-- And anc.facilityNameInitCap in (&apos;&apos;)
 ${EC_BPID}
 ${EC_CCN}
 ${EC_BUNDLE} 
 ${EC_R_REGION} 
 ${EC_R_MARKET} 
 ${EC_REGION} 
 ${EC_MARKET} 
 ${EC_PARTICIPANTNAME}  
 ${EC_PAF}

union

-- Claims data
select 
distinct  e.participantShortName, rmp.region, rmp.market
FROM
    warehouse.factClaims c LEFT JOIN
    warehouse.dimFacility f ON c.anchorFacilityKey = f.facilitySK LEFT JOIN
    warehouse.dimEpisodeInitiator e ON c.episodeInitiatorKey = e.episodeInitiatorSK LEFT JOIN
    warehouse.dimFacility pac ON c.postAcuteFacilityKey = pac.facilitySK LEFT JOIN
    warehouse.dimDRG drg ON c.anchorDrgKey = drg.drgSK LEFT JOIN
    warehouse.dimPatient dpc ON c.patientKey = dpc.patientSK LEFT JOIN
    warehouse.dimSNFNetwork snf ON c.SNFNetworkKey = snf.SNFNeworkSK LEFT JOIN
    warehouse.dimPhysician p ON c.physicianKey = p.physicianSK LEFT JOIN
    warehouse.dimRegionMarket rm ON c.rgRemKey = rm.rgSK LEFT JOIN
    warehouse.dimRegionMarket rmp ON c.rgPartnerKey = rmp.rgSK LEFT JOIN 
    warehouse.dimDate dt ON c.anchorBeginDateKey = dt.dateSK
LEFT JOIN (select distinct cad.provider_ccn, cophha.bpid,max(cophha.network_publication) &apos;HHA Network_Publication Date&apos; from warehouse.ops_anchor_detail  cad 
LEFT JOIN warehouse.ops_hha_pn_program_status cophha on cad.facilityID = cophha.facilityID group by cad.provider_ccn) copshha
on f.ccn = copshha.provider_ccn and e.BPID = copshha.bpid 
LEFT JOIN warehouse.dimFacility SSOC ON c.SSOC_CCN_Key = SSOC.facilitySK
INNER JOIN 
		(SELECT bpid,  username FROM warehouse.tabUserSecurityBPID
		WHERE username = ${userName}
        GROUP BY bpid
        ) tbsBPID ON e.BPID = tbsBPID.bpid
        
INNER JOIN 
     (       
        SELECT ccn, username AS username
        from warehouse.tabUserSecurityCCN where username = ${userName}
       GROUP BY ccn
        )tbsCCN on f.ccn=tbsCCN.ccn
WHERE c.atRisk=&apos;Y&apos; and f.dwhSource in (&apos;Claims&apos;, &apos;ZeroKey&apos;,&apos;emblemClaims&apos;) 
and pac.dwhSource in (&apos;Claims&apos;, &apos;ZeroKey&apos;,&apos;emblemClaims&apos;)
and e.bpid  not like &apos;%DEMO%&apos;
and c.anchorBeginDateKey &gt;= 20160101 
and c.anchorBeginDateKey &lt;= (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;)
and c.postAcuteCategory = &apos;HHA&apos; and c.targetPrice &lt;&gt; 0

AND e.BPID in (&apos;&apos;)
AND f.facilityNameInitCap in (&apos;&apos;)
AND f.ccn in (&apos;&apos;)
AND drg.bundleName(&apos;&apos;)
AND rmp.region in (&apos;&apos;)
AND rmp.market in (&apos;&apos;)
AND rm.region in (&apos;&apos;)
AND rm.market in (&apos;&apos;)
AND e.participantNameInitCap in (&apos;&apos;)
AND pac.facilityNameInitCap in (&apos;&apos;)

)a  order by CONCAT( a.participantShortName, a.region, &apos; &apos;,  a.market ); </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PartnerRegionMarket</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Participant" enabled="true">
          <stringProp name="dataSource">MySQLQA</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select distinct a.Participant  from
( 
-- EC Data
select 
distinct ei.participantNameInitCap AS Participant
FROM
warehouse.factPatientEpisode fp
LEFT JOIN (select f.facilitySK,f.ccn,f.facilityName,
case when df_claims.facilityNameInitCap is null then f.facilityNameInitCap
else df_claims.facilityNameInitCap end facilityNameInitCap,
f.facilityType,f.facilitySubtype,f.address1,f.address2,f.city,f.state,f.zip,f.contactName,f.contactEmail,
f.contactPhone1,f.contactPhone2,f.contactRole,f.lat,f.lon,f.fips,f.confirmed,f.dataSource,f.description,
f.excludedFromRiskScore,f.sourceFacilityKey,f.fgroup,f.id,f.isFeatured,f.medicareId,f.mongoId,f.outboundBpciParticipant,
f.participantId,f.participating,f.bpid,f.careType,f.categorySpecificFields,f.dwhIsActive,f.dwhIsDeleted,f.dwhSource,
f.dwhVersion,f.dwhStartDate,f.dwhEndDate,f.dwhMD5Checksum
from warehouse.dimFacility f
left outer join (select * from warehouse.dimFacility where dwhSource=&apos;Claims&apos;) as df_claims
on f.ccn = df_claims.ccn and f.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;) 
) anc ON fp.anchorAdmitFacilityKey=anc.facilitySK 
LEFT JOIN warehouse.dimFacility afdetail ON anc.sourceFacilityKey = afdetail.facilitySK and afdetail.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;)
LEFT JOIN warehouse.dimEpisodeInitiator ei ON fp.episodeInitiatorKey=ei.episodeInitiatorSK
LEFT JOIN warehouse.dimFacility post_acute_df ON fp.anchorDischargeFacilityKey=post_acute_df.facilitySK
LEFT JOIN warehouse.dimPatient dp ON fp.patientKey = dp.patientSK
LEFT JOIN warehouse.dimPhysician p on fp.physicianKey=p.physicianSK
LEFT JOIN warehouse.dimRegionMarket rm ON fp.rgRemKey = rm.rgSK
 LEFT JOIN warehouse.dimRegionMarket rmp ON fp.rgPartnerKey = rmp.rgSK
LEFT JOIN warehouse.dimDRG drg on fp.currDrgKey = drg.drgSK
LEFT JOIN warehouse.dimDate dt ON fp.anchorAdmitDateKey = dt.dateSK
LEFT JOIN (select distinct ad.provider_ccn, ophha.bpid,max(ophha.network_publication) &apos;HHA Network_Publication Date&apos; from warehouse.ops_anchor_detail  ad 
LEFT JOIN warehouse.ops_hha_pn_program_status ophha on ad.facilityID = ophha.facilityID group by ad.provider_ccn) opshha
on anc.ccn = opshha.provider_ccn and fp.BPID = opshha.bpid
INNER JOIN 
	(
		SELECT  tabUserSecurityBPID.bpid 
        FROM  warehouse.tabUserSecurityBPID
		WHERE  username = ${userName} GROUP BY bpid) tbsBPID ON ei.BPID = tbsBPID.bpid
INNER JOIN 
     (       
        SELECT tabUserSecurityCCN.ccn
        from warehouse.tabUserSecurityCCN where username = ${userName}
       GROUP BY ccn )tbsCCN on anc.ccn=tbsCCN.ccn
INNER JOIN 
     (       
        SELECT tabUserSecurityFacilityKey.facilitykey
        from warehouse.tabUserSecurityFacilityKey where username = ${userName}
       GROUP BY facilitykey )tbsFacilityKey on fp.sourceFacilityKey=tbsFacilityKey.facilitykey
WHERE 
fp.bundleRisk=1 and
dt.calendarDate &lt;= now() and
fp.anchorAdmitDateKey &gt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;) 
and fp.episodeCountReport=1
and anc.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;) and post_acute_df.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;)
and ei.bpid not like &apos;%DEMO%&apos; and fp.NSOCType  = &apos;HHA&apos;
and fp.anchorAdmitDateKey &lt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;BPCIAStartDate&apos;)
 
-- And anc.facilityNameInitCap in (&apos;&apos;)
 ${EC_BPID}
 ${EC_CCN}
 ${EC_BUNDLE} 
 ${EC_R_REGION} 
 ${EC_R_MARKET} 
 ${EC_REGION} 
 ${EC_MARKET} 
 ${EC_PARTICIPANTNAME}  
 ${EC_PAF}

union

 -- Claims Data
select
distinct  e.participantNameInitCap AS Participant
FROM
    warehouse.factClaims c LEFT JOIN
    warehouse.dimFacility f ON c.anchorFacilityKey = f.facilitySK LEFT JOIN
    warehouse.dimEpisodeInitiator e ON c.episodeInitiatorKey = e.episodeInitiatorSK LEFT JOIN
    warehouse.dimFacility pac ON c.postAcuteFacilityKey = pac.facilitySK LEFT JOIN
    warehouse.dimDRG drg ON c.anchorDrgKey = drg.drgSK LEFT JOIN
    warehouse.dimPatient dpc ON c.patientKey = dpc.patientSK LEFT JOIN
    warehouse.dimSNFNetwork snf ON c.SNFNetworkKey = snf.SNFNeworkSK LEFT JOIN
    warehouse.dimPhysician p ON c.physicianKey = p.physicianSK LEFT JOIN
    warehouse.dimRegionMarket rm ON c.rgRemKey = rm.rgSK LEFT JOIN
    warehouse.dimRegionMarket rmp ON c.rgPartnerKey = rmp.rgSK LEFT JOIN 
    warehouse.dimDate dt ON c.anchorBeginDateKey = dt.dateSK
LEFT JOIN (select distinct cad.provider_ccn, cophha.bpid,max(cophha.network_publication) &apos;HHA Network_Publication Date&apos; from warehouse.ops_anchor_detail  cad 
LEFT JOIN warehouse.ops_hha_pn_program_status cophha on cad.facilityID = cophha.facilityID group by cad.provider_ccn) copshha
on f.ccn = copshha.provider_ccn and e.BPID = copshha.bpid 
LEFT JOIN warehouse.dimFacility SSOC ON c.SSOC_CCN_Key = SSOC.facilitySK
INNER JOIN 
		(SELECT bpid,  username FROM warehouse.tabUserSecurityBPID
		WHERE username = ${userName}
        GROUP BY bpid
        ) tbsBPID ON e.BPID = tbsBPID.bpid
        
INNER JOIN 
     (       
        SELECT ccn, username AS username
        from warehouse.tabUserSecurityCCN where username = ${userName}
       GROUP BY ccn
        )tbsCCN on f.ccn=tbsCCN.ccn
WHERE c.atRisk=&apos;Y&apos; and f.dwhSource in (&apos;Claims&apos;, &apos;ZeroKey&apos;,&apos;emblemClaims&apos;) 
and pac.dwhSource in (&apos;Claims&apos;, &apos;ZeroKey&apos;,&apos;emblemClaims&apos;)
and e.bpid  not like &apos;%DEMO%&apos;
and c.anchorBeginDateKey &gt;= 20160101 
and c.anchorBeginDateKey &lt;= (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;)
and c.postAcuteCategory = &apos;HHA&apos; and c.targetPrice &lt;&gt; 0

AND e.BPID in (&apos;&apos;)
AND f.facilityNameInitCap in (&apos;&apos;)
AND f.ccn in (&apos;&apos;)
AND drg.bundleName(&apos;&apos;)
AND rmp.region in (&apos;&apos;)
AND rmp.market in (&apos;&apos;)
AND rm.region in (&apos;&apos;)
AND rm.market in (&apos;&apos;)
AND e.participantNameInitCap in (&apos;&apos;)
AND pac.facilityNameInitCap in (&apos;&apos;)

)a  order by a.Participant ;
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">participantName</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Post Acute Facility Details" enabled="true">
          <stringProp name="dataSource">MySQLQA</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select distinct `Post Acute Facility` -- concat( `Post Acute Facility`, &apos; - &apos;, `Post Acute CCN`) 
from
( 
-- EC Data
select distinct post_acute_df.facilityNameInitCap as &apos;Post Acute Facility&apos;
-- post_acute_df.ccn as &apos;Post Acute CCN&apos;
FROM
warehouse.factPatientEpisode fp
LEFT JOIN (select f.facilitySK,f.ccn,f.facilityName,
case when df_claims.facilityNameInitCap is null then f.facilityNameInitCap
else df_claims.facilityNameInitCap end facilityNameInitCap,
f.facilityType,f.facilitySubtype,f.address1,f.address2,f.city,f.state,f.zip,f.contactName,f.contactEmail,
f.contactPhone1,f.contactPhone2,f.contactRole,f.lat,f.lon,f.fips,f.confirmed,f.dataSource,f.description,
f.excludedFromRiskScore,f.sourceFacilityKey,f.fgroup,f.id,f.isFeatured,f.medicareId,f.mongoId,f.outboundBpciParticipant,
f.participantId,f.participating,f.bpid,f.careType,f.categorySpecificFields,f.dwhIsActive,f.dwhIsDeleted,f.dwhSource,
f.dwhVersion,f.dwhStartDate,f.dwhEndDate,f.dwhMD5Checksum
from warehouse.dimFacility f
left outer join (select * from warehouse.dimFacility where dwhSource=&apos;Claims&apos;) as df_claims
on f.ccn = df_claims.ccn and f.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;) 
) anc ON fp.anchorAdmitFacilityKey=anc.facilitySK 
LEFT JOIN warehouse.dimFacility afdetail ON anc.sourceFacilityKey = afdetail.facilitySK and afdetail.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;)
LEFT JOIN warehouse.dimEpisodeInitiator ei ON fp.episodeInitiatorKey=ei.episodeInitiatorSK
LEFT JOIN warehouse.dimFacility post_acute_df ON fp.anchorDischargeFacilityKey=post_acute_df.facilitySK
LEFT JOIN warehouse.dimPatient dp ON fp.patientKey = dp.patientSK
LEFT JOIN warehouse.dimPhysician p on fp.physicianKey=p.physicianSK
LEFT JOIN warehouse.dimRegionMarket rm ON fp.rgRemKey = rm.rgSK
 LEFT JOIN warehouse.dimRegionMarket rmp ON fp.rgPartnerKey = rmp.rgSK
LEFT JOIN warehouse.dimDRG drg on fp.currDrgKey = drg.drgSK
LEFT JOIN warehouse.dimDate dt ON fp.anchorAdmitDateKey = dt.dateSK
LEFT JOIN (select distinct ad.provider_ccn, ophha.bpid,max(ophha.network_publication) &apos;HHA Network_Publication Date&apos; from warehouse.ops_anchor_detail  ad 
LEFT JOIN warehouse.ops_hha_pn_program_status ophha on ad.facilityID = ophha.facilityID group by ad.provider_ccn) opshha
on anc.ccn = opshha.provider_ccn and fp.BPID = opshha.bpid
INNER JOIN 
	(
		SELECT  tabUserSecurityBPID.bpid 
        FROM  warehouse.tabUserSecurityBPID
		WHERE  username = ${userName} GROUP BY bpid) tbsBPID ON ei.BPID = tbsBPID.bpid
INNER JOIN 
     (       
        SELECT tabUserSecurityCCN.ccn
        from warehouse.tabUserSecurityCCN where username = ${userName}
       GROUP BY ccn )tbsCCN on anc.ccn=tbsCCN.ccn
INNER JOIN 
     (       
        SELECT tabUserSecurityFacilityKey.facilitykey
        from warehouse.tabUserSecurityFacilityKey where username = ${userName}
       GROUP BY facilitykey )tbsFacilityKey on fp.sourceFacilityKey=tbsFacilityKey.facilitykey
WHERE 
fp.bundleRisk=1 and
dt.calendarDate &lt;= now() and
fp.anchorAdmitDateKey &gt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;) 
and fp.episodeCountReport=1
and anc.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;) and post_acute_df.dwhSource in (&apos;EC&apos;, &apos;ZeroKey&apos;)
and ei.bpid not like &apos;%DEMO%&apos; and fp.NSOCType  = &apos;HHA&apos;
and fp.anchorAdmitDateKey &lt; (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;BPCIAStartDate&apos;)
 
-- And anc.facilityNameInitCap in (&apos;&apos;)
 ${EC_BPID}
 ${EC_CCN}
 ${EC_BUNDLE} 
 ${EC_R_REGION} 
 ${EC_R_MARKET} 
 ${EC_REGION} 
 ${EC_MARKET} 
 ${EC_PARTICIPANTNAME}  
 ${EC_PAF}

union

-- Claims Data 
select distinct  pac.facilityNameInitCap AS &apos;Post Acute Facility&apos;
 -- pac.ccn AS &apos;Post Acute CCN&apos;
FROM
    warehouse.factClaims c LEFT JOIN
    warehouse.dimFacility f ON c.anchorFacilityKey = f.facilitySK LEFT JOIN
    warehouse.dimEpisodeInitiator e ON c.episodeInitiatorKey = e.episodeInitiatorSK LEFT JOIN
    warehouse.dimFacility pac ON c.postAcuteFacilityKey = pac.facilitySK LEFT JOIN
    warehouse.dimDRG drg ON c.anchorDrgKey = drg.drgSK LEFT JOIN
    warehouse.dimPatient dpc ON c.patientKey = dpc.patientSK LEFT JOIN
    warehouse.dimSNFNetwork snf ON c.SNFNetworkKey = snf.SNFNeworkSK LEFT JOIN
    warehouse.dimPhysician p ON c.physicianKey = p.physicianSK LEFT JOIN
    warehouse.dimRegionMarket rm ON c.rgRemKey = rm.rgSK LEFT JOIN
    warehouse.dimRegionMarket rmp ON c.rgPartnerKey = rmp.rgSK LEFT JOIN 
    warehouse.dimDate dt ON c.anchorBeginDateKey = dt.dateSK
LEFT JOIN (select distinct cad.provider_ccn, cophha.bpid,max(cophha.network_publication) &apos;HHA Network_Publication Date&apos; from warehouse.ops_anchor_detail  cad 
LEFT JOIN warehouse.ops_hha_pn_program_status cophha on cad.facilityID = cophha.facilityID group by cad.provider_ccn) copshha
on f.ccn = copshha.provider_ccn and e.BPID = copshha.bpid 
LEFT JOIN warehouse.dimFacility SSOC ON c.SSOC_CCN_Key = SSOC.facilitySK
INNER JOIN 
		(SELECT bpid,  username FROM warehouse.tabUserSecurityBPID
		WHERE username = ${userName}
        GROUP BY bpid
        ) tbsBPID ON e.BPID = tbsBPID.bpid
        
INNER JOIN 
     (       
        SELECT ccn, username AS username
        from warehouse.tabUserSecurityCCN where username = ${userName}
       GROUP BY ccn
        )tbsCCN on f.ccn=tbsCCN.ccn
WHERE c.atRisk=&apos;Y&apos; and f.dwhSource in (&apos;Claims&apos;, &apos;ZeroKey&apos;,&apos;emblemClaims&apos;) 
and pac.dwhSource in (&apos;Claims&apos;, &apos;ZeroKey&apos;,&apos;emblemClaims&apos;)
and e.bpid  not like &apos;%DEMO%&apos;
and c.anchorBeginDateKey &gt;= 20160101 
and c.anchorBeginDateKey &lt;= (select CAST(lookupValue AS UNSIGNED)from warehouse.dimLookup where lookupCategory = &apos;ClaimsCubeDate&apos;)
and c.postAcuteCategory = &apos;HHA&apos; and c.targetPrice &lt;&gt; 0

AND e.BPID in (&apos;&apos;)
AND f.facilityNameInitCap in (&apos;&apos;)
AND f.ccn in (&apos;&apos;)
AND drg.bundleName(&apos;&apos;)
AND rmp.region in (&apos;&apos;)
AND rmp.market in (&apos;&apos;)
AND rm.region in (&apos;&apos;)
AND rm.market in (&apos;&apos;)
AND e.participantNameInitCap in (&apos;&apos;)
AND pac.facilityNameInitCap in (&apos;&apos;)

)a  order by `Post Acute Facility`; 
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">PostAcuteFacility</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="OS Process Sampler" enabled="true">
          <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
          <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
          <stringProp name="SystemSampler.command">cmd.exe</stringProp>
          <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">/c</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">echo Printed</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SystemSampler.directory">${__BeanShell(import org.apache.jmeter.services.FileServer; FileServer.getFileServer().getBaseDir();)}${__BeanShell(File.separator,)}</stringProp>
        </SystemSampler>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import java.util.ArrayList;

ArrayList al_bpid = new ArrayList();
for(int i=1;i&lt;=Integer.parseInt(vars.get(&quot;EpisodeInitiator_BPID_#&quot;));i++){
al_bpid.add(vars.get(&quot;EpisodeInitiator_BPID_&quot;+i));
}
vars.put(&quot;value1&quot;,&quot;\&quot;&quot;+al_bpid.toString()+&quot;\&quot;&quot;);
System.out.println(&quot;BPID:&quot;+al_bpid.toString());

ArrayList al_facilityName = new ArrayList();
for(int i=1;i&lt;=Integer.parseInt(vars.get(&quot;AnchorFacility_CCN_#&quot;));i++){
al_facilityName.add(vars.get(&quot;AnchorFacility_CCN_&quot;+i));
}
vars.put(&quot;value2&quot;,&quot;\&quot;&quot;+al_facilityName.toString()+&quot;\&quot;&quot;);
System.out.println(&quot;AnchorFacility_CCN&quot;+al_facilityName);

ArrayList al_bundleName = new ArrayList();
for(int i=1;i&lt;=Integer.parseInt(vars.get(&quot;bundleName_#&quot;));i++){
al_bundleName.add(vars.get(&quot;bundleName_&quot;+i));
}
vars.put(&quot;value3&quot;,&quot;\&quot;&quot;+al_bundleName.toString()+&quot;\&quot;&quot;);
System.out.println(&quot;bundleName:&quot;+al_bundleName.toString());
ArrayList al_RRegionMarket = new ArrayList();

for(int i=1;i&lt;=Integer.parseInt(vars.get(&quot;RRegionMarket_#&quot;));i++){
al_RRegionMarket.add(vars.get(&quot;RRegionMarket_&quot;+i));
}
vars.put(&quot;value4&quot;,&quot;\&quot;&quot;+al_RRegionMarket.toString()+&quot;\&quot;&quot;);
System.out.println(&quot;RRegionMarket:&quot;+al_RRegionMarket.toString());

ArrayList al_PartnerRegionMarket = new ArrayList();
for(int i=1;i&lt;=Integer.parseInt(vars.get(&quot;PartnerRegionMarket_#&quot;));i++){
al_PartnerRegionMarket.add(vars.get(&quot;PartnerRegionMarket_&quot;+i));
}
vars.put(&quot;value5&quot;,&quot;\&quot;&quot;+al_PartnerRegionMarket.toString()+&quot;\&quot;&quot;);
System.out.println(&quot;Partner region:&quot;+al_PartnerRegionMarket.toString());

ArrayList al_participant = new ArrayList();
for(int i=1;i&lt;=Integer.parseInt(vars.get(&quot;participantName_#&quot;));i++){
al_participant.add(vars.get(&quot;participantName_&quot;+i));
}
vars.put(&quot;value6&quot;,&quot;\&quot;&quot;+al_participant.toString()+&quot;\&quot;&quot;);
System.out.println(&quot;Participant:&quot;+al_participant.toString());

ArrayList al_Post_Acute_Facility = new ArrayList();
for(int i=1;i&lt;=Integer.parseInt(vars.get(&quot;PostAcuteFacility_#&quot;));i++){
al_Post_Acute_Facility.add(vars.get(&quot;PostAcuteFacility_&quot;+i));
}
vars.put(&quot;value7&quot;,&quot;\&quot;&quot;+al_Post_Acute_Facility.toString()+&quot;\&quot;&quot;);
System.out.println(&quot;PostAcuteFacility:&quot;+al_Post_Acute_Facility.toString());
</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.services.FileServer;
//get current jmeter script&apos;s directory
String path = FileServer.getFileServer().getBaseDir();
 
//get the separator
String separator = File.separator;
 
log.info(&quot;Path: &quot; + path);
log.info(&quot;Path with separator: &quot; + path + separator);
System.out.print(path+separator);
System.out.println(${Flag});
if(vars.get(&quot;Flag&quot;).equals(&quot;(1)&quot;)){
	log.info(&quot;Path: 1&quot;);
	fA = new FileOutputStream(path+separator+&quot;RowFilterOutput.txt&quot;);
	pA = new PrintStream(fA); 
	pA.print(&quot;&quot;);
	pA.close();
	fA.close();
	}
log.info(&quot;Path: 7&quot;);
f= new FileOutputStream(path + separator+&quot;RowFilterOutput.txt&quot;,true);
	p = new PrintStream(f);
	String vValue1 =  vars.get(&quot;value1&quot;);
	String vValue2 =  vars.get(&quot;value2&quot;);
	String vValue3 =  vars.get(&quot;value3&quot;);
	String vValue4 =  vars.get(&quot;value4&quot;);
	String vValue5 =  vars.get(&quot;value5&quot;);
	String vValue6 =  vars.get(&quot;value6&quot;);
	String vValue7 =  vars.get(&quot;value7&quot;);
	
	
	p.println(&quot;Episode Initiator - BPID=&quot;+vValue1+&quot;*Anchor Facility - CCN=&quot;+vValue2+&quot;*Bundle=&quot;+vValue3+&quot;*Remdy Region - Market=&quot;+vValue4+&quot;*Region - Market=&quot;+vValue5+&quot;*Participant=&quot;+vValue6+&quot;*Post Acute Facility=&quot;+vValue7);

	p.close();
	f.close();

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
