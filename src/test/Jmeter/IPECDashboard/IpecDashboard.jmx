<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="4.0" jmeter="4.0 r1823414">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery">select 1</stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="dataSource">MySQLQA</stringProp>
        <stringProp name="dbUrl">jdbc:mysql://rds-qa.remedypartners.com:3306/warehouse</stringProp>
        <stringProp name="driver">com.mysql.jdbc.Driver</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">1Welcome2</stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">pgoel</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="IPEC Dashboard" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="IPECUsername" enabled="true">
          <stringProp name="delimiter">|</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">IPECRowFilterInput.csv</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="variableNames">Flag,userName,time_range,bpid,ccn,bundle,region,market,r_region,r_market,participantName</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">if(!vars.get(&quot;bpid&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_BPID&quot;,&quot;AND e.bpid in ${bpid}&quot;);	
} else {
	vars.put(&quot;C_BPID&quot;,&quot;&quot;);
}
if(!vars.get(&quot;ccn&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_CCN&quot;,&quot;AND f.ccn in ${ccn}&quot;);	
} else {
	vars.put(&quot;C_CCN&quot;,&quot;&quot;);
}

if(!vars.get(&quot;bundle&quot;).contains(&quot;Skip&quot;)){;	
	vars.put(&quot;C_BUNDLE&quot;,&quot;and drg.bundleName in ${bundle}&quot;);
} else{
	vars.put(&quot;C_BUNDLE&quot;,&quot;&quot;);
}
if(!vars.get(&quot;r_region&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_R_REGION&quot;,&quot;and rm.region in  ${r_region}&quot;);	
} else {
	vars.put(&quot;C_R_REGION&quot;,&quot;&quot;);
}
if(!vars.get(&quot;r_market&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_R_MARKET&quot;,&quot;and rm.market in ${r_market}&quot;);		
} else{
	vars.put(&quot;C_R_MARKET&quot;,&quot;&quot;);
}
if(!vars.get(&quot;region&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_REGION&quot;,&quot;and prm.region in  ${region}&quot;);		
} else {
	vars.put(&quot;C_REGION&quot;,&quot;&quot;);
}
if(!vars.get(&quot;market&quot;).contains(&quot;Skip&quot;)){	
	vars.put(&quot;C_MARKET&quot;,&quot;and prm.market in ${market}&quot;);
} else{
	vars.put(&quot;C_MARKET&quot;,&quot;&quot;);
}
if(!vars.get(&quot;participantName&quot;).contains(&quot;Skip&quot;)){
	vars.put(&quot;C_PARTICIPANTNAME&quot;,&quot;and e.participantNameInitCap in ${participantName}&quot;);	
} else{
	vars.put(&quot;C_PARTICIPANTNAME&quot;,&quot;&quot;);
}

}	</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="bpid" enabled="true">
          <stringProp name="dataSource">MySQLQA</stringProp>
          <stringProp name="query">select
distinct de.episodeInitiatorNameInitCap, f.bpid
from
warehouse.factPatientEpisode f
LEFT JOIN
warehouse.dimPhysician dph ON f.physicianKey = dph.physicianSK
LEFT JOIN
warehouse.dimPatient dp ON f.patientKey = dp.patientSK 
left join warehouse.dimLookup dloo
on dp.totalRiskScore = dloo.lookupName
LEFT JOIN
warehouse.dimEpisodeInitiator de ON f.episodeInitiatorKey = de.episodeInitiatorSK
LEFT JOIN
warehouse.dimCARL dc ON f.carlKey = dc.carlSK
LEFT JOIN
warehouse.dimFacility aaf ON f.anchorAdmitFacilityKey = aaf.facilitySK
LEFT JOIN
warehouse.dimFacility adf ON f.anchorDischargeFacilityKey = adf.facilitySK
LEFT JOIN
warehouse.dimFacility afd ON f.sourceFacilityKey = afd.sourceFacilityKey
LEFT JOIN
warehouse.dimDRG drg ON f.currDrgKey = drg.drgSK
LEFT JOIN
warehouse.dimDRG d ON f.wDrgKeyMax = d.drgSK
LEFT JOIN
warehouse.dimDRG drgpre ON f.predDrgKeyMax = drgpre.drgSK
LEFT JOIN
warehouse.dimDRG drgfin ON f.fDrgKeyMax = drgfin.drgSK
LEFT JOIN
warehouse.dimNSOCMapping dn ON f.anchorDischCareSettingKey = dn.NSOCMappingSK
LEFT JOIN
warehouse.dimDate dt ON f.anchorAdmitDateKey = dt.dateSK
LEFT JOIN
warehouse.dimLookup dles ON f.episodeStatus = dles.lookupName AND dles.lookupCategory = &apos;episodeStatus&apos;
LEFT JOIN
warehouse.dimLookup dlos ON dp.onboardingStatus = dlos.lookupName AND dlos.lookupCategory = &apos;onboardingStatus&apos;
LEFT JOIN
warehouse.dimRegionMarket m ON f.rgRemKey = m.rgSK
LEFT JOIN
warehouse.dimRegionMarket rmp ON f.rgPartnerKey = rmp.rgSK
INNER JOIN 
warehouse.factAdmission fa ON f.anchorAdmissionKey = fa.anchorAdmissionKey
LEFT JOIN
warehouse.dimNSOCMapping dfad ON fa.dischCareSettingKey = dfad.NSOCMappingSK
INNER JOIN 
(
SELECT tabUserSecurityBPID.bpid, GROUP_CONCAT(username) AS username
from warehouse.tabUserSecurityBPID where username = ${userName}
GROUP BY bpid
)tbsBPID ON f.BPID = tbsBPID.bpid
INNER JOIN 
( 
SELECT tabUserSecurityCCN.ccn, GROUP_CONCAT(username) AS username
from warehouse.tabUserSecurityCCN where username = ${userName}
GROUP BY ccn
)tbsCCN on aaf.ccn=tbsCCN.ccn
INNER JOIN 
( 
SELECT tabUserSecurityFacilityKey.facilitykey, GROUP_CONCAT(username) AS username
from warehouse.tabUserSecurityFacilityKey where username = ${userName}
GROUP BY facilitykey
)tbsFacilityKey on f.sourceFacilityKey=tbsFacilityKey.facilitykey
WHERE f.bundleRisk=1 
AND f.episodeCountReport=1 
AND (f.model IN (1,2) OR f.episodeStatus=10) 
AND adf.dwhSource in (&apos;EC&apos;) 
AND aaf.dwhSource in (&apos;EC&apos;)
AND dp.dwhSource = &apos;EC&apos;
AND dloo.lookupCategory = &apos;patientRisk&apos;
and tbsBPID.username = ${userName}
-- and f.anchorAdmitDateKey &gt;= 20180515
-- and f.anchorAdmitDateKey &lt;= 20160101
AND dt.calendarDate BETWEEN DATE_SUB(NOW(), INTERVAL ${time_range} DAY) AND NOW()</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">episodeInitiatorNameInitCap,bpid</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ccn" enabled="true">
          <stringProp name="dataSource">MySQLQA</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select
distinct aaf.facilityNameInitCap, aaf.ccn
from
warehouse.factPatientEpisode f
LEFT JOIN
warehouse.dimPhysician dph ON f.physicianKey = dph.physicianSK
LEFT JOIN
warehouse.dimPatient dp ON f.patientKey = dp.patientSK 
left join warehouse.dimLookup dloo
on dp.totalRiskScore = dloo.lookupName
LEFT JOIN
warehouse.dimEpisodeInitiator de ON f.episodeInitiatorKey = de.episodeInitiatorSK
LEFT JOIN
warehouse.dimCARL dc ON f.carlKey = dc.carlSK
LEFT JOIN
warehouse.dimFacility aaf ON f.anchorAdmitFacilityKey = aaf.facilitySK
LEFT JOIN
warehouse.dimFacility adf ON f.anchorDischargeFacilityKey = adf.facilitySK
LEFT JOIN
warehouse.dimFacility afd ON f.sourceFacilityKey = afd.sourceFacilityKey
LEFT JOIN
warehouse.dimDRG drg ON f.currDrgKey = drg.drgSK
LEFT JOIN
warehouse.dimDRG d ON f.wDrgKeyMax = d.drgSK
LEFT JOIN
warehouse.dimDRG drgpre ON f.predDrgKeyMax = drgpre.drgSK
LEFT JOIN
warehouse.dimDRG drgfin ON f.fDrgKeyMax = drgfin.drgSK
LEFT JOIN
warehouse.dimNSOCMapping dn ON f.anchorDischCareSettingKey = dn.NSOCMappingSK
LEFT JOIN
warehouse.dimDate dt ON f.anchorAdmitDateKey = dt.dateSK
LEFT JOIN
warehouse.dimLookup dles ON f.episodeStatus = dles.lookupName AND dles.lookupCategory = &apos;episodeStatus&apos;
LEFT JOIN
warehouse.dimLookup dlos ON dp.onboardingStatus = dlos.lookupName AND dlos.lookupCategory = &apos;onboardingStatus&apos;
LEFT JOIN
warehouse.dimRegionMarket m ON f.rgRemKey = m.rgSK
LEFT JOIN
warehouse.dimRegionMarket rmp ON f.rgPartnerKey = rmp.rgSK
INNER JOIN 
warehouse.factAdmission fa ON f.anchorAdmissionKey = fa.anchorAdmissionKey
LEFT JOIN
warehouse.dimNSOCMapping dfad ON fa.dischCareSettingKey = dfad.NSOCMappingSK
INNER JOIN 
(
SELECT tabUserSecurityBPID.bpid, GROUP_CONCAT(username) AS username
from warehouse.tabUserSecurityBPID where username = ${useremail}
GROUP BY bpid
)tbsBPID ON f.BPID = tbsBPID.bpid
INNER JOIN 
( 
SELECT tabUserSecurityCCN.ccn, GROUP_CONCAT(username) AS username
from warehouse.tabUserSecurityCCN where username = ${useremail}
GROUP BY ccn
)tbsCCN on aaf.ccn=tbsCCN.ccn
INNER JOIN 
( 
SELECT tabUserSecurityFacilityKey.facilitykey, GROUP_CONCAT(username) AS username
from warehouse.tabUserSecurityFacilityKey where username = ${useremail}
GROUP BY facilitykey
)tbsFacilityKey on f.sourceFacilityKey=tbsFacilityKey.facilitykey
WHERE f.bundleRisk=1 
AND f.episodeCountReport=1 
AND (f.model IN (1,2) OR f.episodeStatus=10) 
AND adf.dwhSource in (&apos;EC&apos;) 
AND aaf.dwhSource in (&apos;EC&apos;)
AND dp.dwhSource = &apos;EC&apos;
AND dloo.lookupCategory = &apos;patientRisk&apos;
and tbsBPID.username = ${useremail}
-- and f.anchorAdmitDateKey &gt;= 20180515
AND dt.calendarDate BETWEEN DATE_SUB(NOW(), INTERVAL ${time_range} DAY) AND NOW()
and f.BPID = &apos;2070-021&apos;;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">facilityName,ccn</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="OS Process Sampler" enabled="true">
          <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
          <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
          <stringProp name="SystemSampler.command">cmd.exe</stringProp>
          <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">/c</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">echo episodeInitiatorNameInitCap=${episodeInitiatorNameInitCap_1},bpid=${bpid_1},facilityName=${facilityName_1},,ccn=${ccn_1}&gt;IpecDashboardResults.txt</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SystemSampler.directory">${__BeanShell(import org.apache.jmeter.services.FileServer; FileServer.getFileServer().getBaseDir();)}${__BeanShell(File.separator,)}</stringProp>
        </SystemSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
